// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: whitelist/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateBuyer struct {
	Buyer    string   `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	BuyerId  string   `protobuf:"bytes,2,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	Name     string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NumOrder uint64   `protobuf:"varint,4,opt,name=numOrder,proto3" json:"numOrder,omitempty"`
	OrderId  []string `protobuf:"bytes,5,rep,name=orderId,proto3" json:"orderId,omitempty"`
	Status   string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgCreateBuyer) Reset()         { *m = MsgCreateBuyer{} }
func (m *MsgCreateBuyer) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBuyer) ProtoMessage()    {}
func (*MsgCreateBuyer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{0}
}
func (m *MsgCreateBuyer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBuyer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBuyer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBuyer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBuyer.Merge(m, src)
}
func (m *MsgCreateBuyer) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBuyer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBuyer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBuyer proto.InternalMessageInfo

func (m *MsgCreateBuyer) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgCreateBuyer) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

func (m *MsgCreateBuyer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateBuyer) GetNumOrder() uint64 {
	if m != nil {
		return m.NumOrder
	}
	return 0
}

func (m *MsgCreateBuyer) GetOrderId() []string {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *MsgCreateBuyer) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgCreateBuyerResponse struct {
}

func (m *MsgCreateBuyerResponse) Reset()         { *m = MsgCreateBuyerResponse{} }
func (m *MsgCreateBuyerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBuyerResponse) ProtoMessage()    {}
func (*MsgCreateBuyerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{1}
}
func (m *MsgCreateBuyerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBuyerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBuyerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBuyerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBuyerResponse.Merge(m, src)
}
func (m *MsgCreateBuyerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBuyerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBuyerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBuyerResponse proto.InternalMessageInfo

type MsgUpdateBuyer struct {
	Buyer    string   `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	BuyerId  string   `protobuf:"bytes,2,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	Name     string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NumOrder uint64   `protobuf:"varint,4,opt,name=numOrder,proto3" json:"numOrder,omitempty"`
	OrderId  []string `protobuf:"bytes,5,rep,name=orderId,proto3" json:"orderId,omitempty"`
	Status   string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgUpdateBuyer) Reset()         { *m = MsgUpdateBuyer{} }
func (m *MsgUpdateBuyer) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBuyer) ProtoMessage()    {}
func (*MsgUpdateBuyer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{2}
}
func (m *MsgUpdateBuyer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBuyer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBuyer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBuyer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBuyer.Merge(m, src)
}
func (m *MsgUpdateBuyer) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBuyer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBuyer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBuyer proto.InternalMessageInfo

func (m *MsgUpdateBuyer) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgUpdateBuyer) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

func (m *MsgUpdateBuyer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateBuyer) GetNumOrder() uint64 {
	if m != nil {
		return m.NumOrder
	}
	return 0
}

func (m *MsgUpdateBuyer) GetOrderId() []string {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *MsgUpdateBuyer) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgUpdateBuyerResponse struct {
}

func (m *MsgUpdateBuyerResponse) Reset()         { *m = MsgUpdateBuyerResponse{} }
func (m *MsgUpdateBuyerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBuyerResponse) ProtoMessage()    {}
func (*MsgUpdateBuyerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{3}
}
func (m *MsgUpdateBuyerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBuyerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBuyerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBuyerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBuyerResponse.Merge(m, src)
}
func (m *MsgUpdateBuyerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBuyerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBuyerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBuyerResponse proto.InternalMessageInfo

type MsgDeleteBuyer struct {
	Buyer   string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	BuyerId string `protobuf:"bytes,2,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
}

func (m *MsgDeleteBuyer) Reset()         { *m = MsgDeleteBuyer{} }
func (m *MsgDeleteBuyer) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBuyer) ProtoMessage()    {}
func (*MsgDeleteBuyer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{4}
}
func (m *MsgDeleteBuyer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBuyer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBuyer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBuyer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBuyer.Merge(m, src)
}
func (m *MsgDeleteBuyer) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBuyer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBuyer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBuyer proto.InternalMessageInfo

func (m *MsgDeleteBuyer) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgDeleteBuyer) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

type MsgDeleteBuyerResponse struct {
}

func (m *MsgDeleteBuyerResponse) Reset()         { *m = MsgDeleteBuyerResponse{} }
func (m *MsgDeleteBuyerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBuyerResponse) ProtoMessage()    {}
func (*MsgDeleteBuyerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{5}
}
func (m *MsgDeleteBuyerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBuyerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBuyerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBuyerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBuyerResponse.Merge(m, src)
}
func (m *MsgDeleteBuyerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBuyerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBuyerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBuyerResponse proto.InternalMessageInfo

type MsgCreateSeller struct {
	Producer    string   `protobuf:"bytes,1,opt,name=producer,proto3" json:"producer,omitempty"`
	SellerId    string   `protobuf:"bytes,2,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Desc        string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	ContactInfo string   `protobuf:"bytes,5,opt,name=contactInfo,proto3" json:"contactInfo,omitempty"`
	NumListing  uint64   `protobuf:"varint,6,opt,name=numListing,proto3" json:"numListing,omitempty"`
	ListingId   []string `protobuf:"bytes,7,rep,name=listingId,proto3" json:"listingId,omitempty"`
	Status      string   `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgCreateSeller) Reset()         { *m = MsgCreateSeller{} }
func (m *MsgCreateSeller) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSeller) ProtoMessage()    {}
func (*MsgCreateSeller) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{6}
}
func (m *MsgCreateSeller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSeller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSeller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSeller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSeller.Merge(m, src)
}
func (m *MsgCreateSeller) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSeller) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSeller.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSeller proto.InternalMessageInfo

func (m *MsgCreateSeller) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *MsgCreateSeller) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

func (m *MsgCreateSeller) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateSeller) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgCreateSeller) GetContactInfo() string {
	if m != nil {
		return m.ContactInfo
	}
	return ""
}

func (m *MsgCreateSeller) GetNumListing() uint64 {
	if m != nil {
		return m.NumListing
	}
	return 0
}

func (m *MsgCreateSeller) GetListingId() []string {
	if m != nil {
		return m.ListingId
	}
	return nil
}

func (m *MsgCreateSeller) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgCreateSellerResponse struct {
}

func (m *MsgCreateSellerResponse) Reset()         { *m = MsgCreateSellerResponse{} }
func (m *MsgCreateSellerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSellerResponse) ProtoMessage()    {}
func (*MsgCreateSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{7}
}
func (m *MsgCreateSellerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSellerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSellerResponse.Merge(m, src)
}
func (m *MsgCreateSellerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSellerResponse proto.InternalMessageInfo

type MsgUpdateSeller struct {
	Producer    string   `protobuf:"bytes,1,opt,name=producer,proto3" json:"producer,omitempty"`
	SellerId    string   `protobuf:"bytes,2,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Desc        string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	ContactInfo string   `protobuf:"bytes,5,opt,name=contactInfo,proto3" json:"contactInfo,omitempty"`
	NumListing  uint64   `protobuf:"varint,6,opt,name=numListing,proto3" json:"numListing,omitempty"`
	ListingId   []string `protobuf:"bytes,7,rep,name=listingId,proto3" json:"listingId,omitempty"`
	Status      string   `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgUpdateSeller) Reset()         { *m = MsgUpdateSeller{} }
func (m *MsgUpdateSeller) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSeller) ProtoMessage()    {}
func (*MsgUpdateSeller) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{8}
}
func (m *MsgUpdateSeller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSeller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSeller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSeller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSeller.Merge(m, src)
}
func (m *MsgUpdateSeller) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSeller) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSeller.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSeller proto.InternalMessageInfo

func (m *MsgUpdateSeller) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *MsgUpdateSeller) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

func (m *MsgUpdateSeller) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateSeller) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgUpdateSeller) GetContactInfo() string {
	if m != nil {
		return m.ContactInfo
	}
	return ""
}

func (m *MsgUpdateSeller) GetNumListing() uint64 {
	if m != nil {
		return m.NumListing
	}
	return 0
}

func (m *MsgUpdateSeller) GetListingId() []string {
	if m != nil {
		return m.ListingId
	}
	return nil
}

func (m *MsgUpdateSeller) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgUpdateSellerResponse struct {
}

func (m *MsgUpdateSellerResponse) Reset()         { *m = MsgUpdateSellerResponse{} }
func (m *MsgUpdateSellerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSellerResponse) ProtoMessage()    {}
func (*MsgUpdateSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{9}
}
func (m *MsgUpdateSellerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSellerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSellerResponse.Merge(m, src)
}
func (m *MsgUpdateSellerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSellerResponse proto.InternalMessageInfo

type MsgDeleteSeller struct {
	Producer string `protobuf:"bytes,1,opt,name=producer,proto3" json:"producer,omitempty"`
	SellerId string `protobuf:"bytes,2,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
}

func (m *MsgDeleteSeller) Reset()         { *m = MsgDeleteSeller{} }
func (m *MsgDeleteSeller) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteSeller) ProtoMessage()    {}
func (*MsgDeleteSeller) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{10}
}
func (m *MsgDeleteSeller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteSeller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteSeller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteSeller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteSeller.Merge(m, src)
}
func (m *MsgDeleteSeller) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteSeller) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteSeller.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteSeller proto.InternalMessageInfo

func (m *MsgDeleteSeller) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *MsgDeleteSeller) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

type MsgDeleteSellerResponse struct {
}

func (m *MsgDeleteSellerResponse) Reset()         { *m = MsgDeleteSellerResponse{} }
func (m *MsgDeleteSellerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteSellerResponse) ProtoMessage()    {}
func (*MsgDeleteSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{11}
}
func (m *MsgDeleteSellerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteSellerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteSellerResponse.Merge(m, src)
}
func (m *MsgDeleteSellerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteSellerResponse proto.InternalMessageInfo

type MsgCreateVoter struct {
	Reviewer    string   `protobuf:"bytes,1,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	VoterId     string   `protobuf:"bytes,2,opt,name=voterId,proto3" json:"voterId,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	VotingPower uint64   `protobuf:"varint,4,opt,name=votingPower,proto3" json:"votingPower,omitempty"`
	NumVotes    uint64   `protobuf:"varint,5,opt,name=numVotes,proto3" json:"numVotes,omitempty"`
	VoteId      []string `protobuf:"bytes,6,rep,name=voteId,proto3" json:"voteId,omitempty"`
	Status      string   `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgCreateVoter) Reset()         { *m = MsgCreateVoter{} }
func (m *MsgCreateVoter) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVoter) ProtoMessage()    {}
func (*MsgCreateVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{12}
}
func (m *MsgCreateVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVoter.Merge(m, src)
}
func (m *MsgCreateVoter) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVoter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVoter proto.InternalMessageInfo

func (m *MsgCreateVoter) GetReviewer() string {
	if m != nil {
		return m.Reviewer
	}
	return ""
}

func (m *MsgCreateVoter) GetVoterId() string {
	if m != nil {
		return m.VoterId
	}
	return ""
}

func (m *MsgCreateVoter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateVoter) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func (m *MsgCreateVoter) GetNumVotes() uint64 {
	if m != nil {
		return m.NumVotes
	}
	return 0
}

func (m *MsgCreateVoter) GetVoteId() []string {
	if m != nil {
		return m.VoteId
	}
	return nil
}

func (m *MsgCreateVoter) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgCreateVoterResponse struct {
}

func (m *MsgCreateVoterResponse) Reset()         { *m = MsgCreateVoterResponse{} }
func (m *MsgCreateVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVoterResponse) ProtoMessage()    {}
func (*MsgCreateVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{13}
}
func (m *MsgCreateVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVoterResponse.Merge(m, src)
}
func (m *MsgCreateVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVoterResponse proto.InternalMessageInfo

type MsgUpdateVoter struct {
	Reviewer    string   `protobuf:"bytes,1,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	VoterId     string   `protobuf:"bytes,2,opt,name=voterId,proto3" json:"voterId,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	VotingPower uint64   `protobuf:"varint,4,opt,name=votingPower,proto3" json:"votingPower,omitempty"`
	NumVotes    uint64   `protobuf:"varint,5,opt,name=numVotes,proto3" json:"numVotes,omitempty"`
	VoteId      []string `protobuf:"bytes,6,rep,name=voteId,proto3" json:"voteId,omitempty"`
	Status      string   `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgUpdateVoter) Reset()         { *m = MsgUpdateVoter{} }
func (m *MsgUpdateVoter) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVoter) ProtoMessage()    {}
func (*MsgUpdateVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{14}
}
func (m *MsgUpdateVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVoter.Merge(m, src)
}
func (m *MsgUpdateVoter) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVoter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVoter proto.InternalMessageInfo

func (m *MsgUpdateVoter) GetReviewer() string {
	if m != nil {
		return m.Reviewer
	}
	return ""
}

func (m *MsgUpdateVoter) GetVoterId() string {
	if m != nil {
		return m.VoterId
	}
	return ""
}

func (m *MsgUpdateVoter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateVoter) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func (m *MsgUpdateVoter) GetNumVotes() uint64 {
	if m != nil {
		return m.NumVotes
	}
	return 0
}

func (m *MsgUpdateVoter) GetVoteId() []string {
	if m != nil {
		return m.VoteId
	}
	return nil
}

func (m *MsgUpdateVoter) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgUpdateVoterResponse struct {
}

func (m *MsgUpdateVoterResponse) Reset()         { *m = MsgUpdateVoterResponse{} }
func (m *MsgUpdateVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVoterResponse) ProtoMessage()    {}
func (*MsgUpdateVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{15}
}
func (m *MsgUpdateVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVoterResponse.Merge(m, src)
}
func (m *MsgUpdateVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVoterResponse proto.InternalMessageInfo

type MsgDeleteVoter struct {
	Reviewer string `protobuf:"bytes,1,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	VoterId  string `protobuf:"bytes,2,opt,name=voterId,proto3" json:"voterId,omitempty"`
}

func (m *MsgDeleteVoter) Reset()         { *m = MsgDeleteVoter{} }
func (m *MsgDeleteVoter) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteVoter) ProtoMessage()    {}
func (*MsgDeleteVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{16}
}
func (m *MsgDeleteVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteVoter.Merge(m, src)
}
func (m *MsgDeleteVoter) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteVoter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteVoter proto.InternalMessageInfo

func (m *MsgDeleteVoter) GetReviewer() string {
	if m != nil {
		return m.Reviewer
	}
	return ""
}

func (m *MsgDeleteVoter) GetVoterId() string {
	if m != nil {
		return m.VoterId
	}
	return ""
}

type MsgDeleteVoterResponse struct {
}

func (m *MsgDeleteVoterResponse) Reset()         { *m = MsgDeleteVoterResponse{} }
func (m *MsgDeleteVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteVoterResponse) ProtoMessage()    {}
func (*MsgDeleteVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{17}
}
func (m *MsgDeleteVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteVoterResponse.Merge(m, src)
}
func (m *MsgDeleteVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteVoterResponse proto.InternalMessageInfo

type MsgCreateWhitelist struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	WhitelistId string `protobuf:"bytes,2,opt,name=whitelistId,proto3" json:"whitelistId,omitempty"`
}

func (m *MsgCreateWhitelist) Reset()         { *m = MsgCreateWhitelist{} }
func (m *MsgCreateWhitelist) String() string { return proto.CompactTextString(m) }
func (*MsgCreateWhitelist) ProtoMessage()    {}
func (*MsgCreateWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{18}
}
func (m *MsgCreateWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateWhitelist.Merge(m, src)
}
func (m *MsgCreateWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateWhitelist proto.InternalMessageInfo

func (m *MsgCreateWhitelist) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateWhitelist) GetWhitelistId() string {
	if m != nil {
		return m.WhitelistId
	}
	return ""
}

type MsgCreateWhitelistResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateWhitelistResponse) Reset()         { *m = MsgCreateWhitelistResponse{} }
func (m *MsgCreateWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateWhitelistResponse) ProtoMessage()    {}
func (*MsgCreateWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{19}
}
func (m *MsgCreateWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateWhitelistResponse.Merge(m, src)
}
func (m *MsgCreateWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateWhitelistResponse proto.InternalMessageInfo

func (m *MsgCreateWhitelistResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdateWhitelist struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id          uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	WhitelistId string `protobuf:"bytes,3,opt,name=whitelistId,proto3" json:"whitelistId,omitempty"`
}

func (m *MsgUpdateWhitelist) Reset()         { *m = MsgUpdateWhitelist{} }
func (m *MsgUpdateWhitelist) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateWhitelist) ProtoMessage()    {}
func (*MsgUpdateWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{20}
}
func (m *MsgUpdateWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateWhitelist.Merge(m, src)
}
func (m *MsgUpdateWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateWhitelist proto.InternalMessageInfo

func (m *MsgUpdateWhitelist) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateWhitelist) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateWhitelist) GetWhitelistId() string {
	if m != nil {
		return m.WhitelistId
	}
	return ""
}

type MsgUpdateWhitelistResponse struct {
}

func (m *MsgUpdateWhitelistResponse) Reset()         { *m = MsgUpdateWhitelistResponse{} }
func (m *MsgUpdateWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateWhitelistResponse) ProtoMessage()    {}
func (*MsgUpdateWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{21}
}
func (m *MsgUpdateWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateWhitelistResponse.Merge(m, src)
}
func (m *MsgUpdateWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateWhitelistResponse proto.InternalMessageInfo

type MsgDeleteWhitelist struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeleteWhitelist) Reset()         { *m = MsgDeleteWhitelist{} }
func (m *MsgDeleteWhitelist) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteWhitelist) ProtoMessage()    {}
func (*MsgDeleteWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{22}
}
func (m *MsgDeleteWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteWhitelist.Merge(m, src)
}
func (m *MsgDeleteWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteWhitelist proto.InternalMessageInfo

func (m *MsgDeleteWhitelist) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteWhitelist) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgDeleteWhitelistResponse struct {
}

func (m *MsgDeleteWhitelistResponse) Reset()         { *m = MsgDeleteWhitelistResponse{} }
func (m *MsgDeleteWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteWhitelistResponse) ProtoMessage()    {}
func (*MsgDeleteWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{23}
}
func (m *MsgDeleteWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteWhitelistResponse.Merge(m, src)
}
func (m *MsgDeleteWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteWhitelistResponse proto.InternalMessageInfo

type MsgCreateMonoWhitelist struct {
	Governor    string  `protobuf:"bytes,1,opt,name=governor,proto3" json:"governor,omitempty"`
	WhitelistId string  `protobuf:"bytes,2,opt,name=whitelistId,proto3" json:"whitelistId,omitempty"`
	Buyer       *Buyer  `protobuf:"bytes,3,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Seller      *Seller `protobuf:"bytes,4,opt,name=seller,proto3" json:"seller,omitempty"`
	Voter       *Voter  `protobuf:"bytes,5,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (m *MsgCreateMonoWhitelist) Reset()         { *m = MsgCreateMonoWhitelist{} }
func (m *MsgCreateMonoWhitelist) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoWhitelist) ProtoMessage()    {}
func (*MsgCreateMonoWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{24}
}
func (m *MsgCreateMonoWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoWhitelist.Merge(m, src)
}
func (m *MsgCreateMonoWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoWhitelist proto.InternalMessageInfo

func (m *MsgCreateMonoWhitelist) GetGovernor() string {
	if m != nil {
		return m.Governor
	}
	return ""
}

func (m *MsgCreateMonoWhitelist) GetWhitelistId() string {
	if m != nil {
		return m.WhitelistId
	}
	return ""
}

func (m *MsgCreateMonoWhitelist) GetBuyer() *Buyer {
	if m != nil {
		return m.Buyer
	}
	return nil
}

func (m *MsgCreateMonoWhitelist) GetSeller() *Seller {
	if m != nil {
		return m.Seller
	}
	return nil
}

func (m *MsgCreateMonoWhitelist) GetVoter() *Voter {
	if m != nil {
		return m.Voter
	}
	return nil
}

type MsgCreateMonoWhitelistResponse struct {
}

func (m *MsgCreateMonoWhitelistResponse) Reset()         { *m = MsgCreateMonoWhitelistResponse{} }
func (m *MsgCreateMonoWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoWhitelistResponse) ProtoMessage()    {}
func (*MsgCreateMonoWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{25}
}
func (m *MsgCreateMonoWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoWhitelistResponse.Merge(m, src)
}
func (m *MsgCreateMonoWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoWhitelistResponse proto.InternalMessageInfo

type MsgUpdateMonoWhitelist struct {
	Governor    string  `protobuf:"bytes,1,opt,name=governor,proto3" json:"governor,omitempty"`
	WhitelistId string  `protobuf:"bytes,2,opt,name=whitelistId,proto3" json:"whitelistId,omitempty"`
	Buyer       *Buyer  `protobuf:"bytes,3,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Seller      *Seller `protobuf:"bytes,4,opt,name=seller,proto3" json:"seller,omitempty"`
	Voter       *Voter  `protobuf:"bytes,5,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (m *MsgUpdateMonoWhitelist) Reset()         { *m = MsgUpdateMonoWhitelist{} }
func (m *MsgUpdateMonoWhitelist) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoWhitelist) ProtoMessage()    {}
func (*MsgUpdateMonoWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{26}
}
func (m *MsgUpdateMonoWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoWhitelist.Merge(m, src)
}
func (m *MsgUpdateMonoWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoWhitelist proto.InternalMessageInfo

func (m *MsgUpdateMonoWhitelist) GetGovernor() string {
	if m != nil {
		return m.Governor
	}
	return ""
}

func (m *MsgUpdateMonoWhitelist) GetWhitelistId() string {
	if m != nil {
		return m.WhitelistId
	}
	return ""
}

func (m *MsgUpdateMonoWhitelist) GetBuyer() *Buyer {
	if m != nil {
		return m.Buyer
	}
	return nil
}

func (m *MsgUpdateMonoWhitelist) GetSeller() *Seller {
	if m != nil {
		return m.Seller
	}
	return nil
}

func (m *MsgUpdateMonoWhitelist) GetVoter() *Voter {
	if m != nil {
		return m.Voter
	}
	return nil
}

type MsgUpdateMonoWhitelistResponse struct {
}

func (m *MsgUpdateMonoWhitelistResponse) Reset()         { *m = MsgUpdateMonoWhitelistResponse{} }
func (m *MsgUpdateMonoWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoWhitelistResponse) ProtoMessage()    {}
func (*MsgUpdateMonoWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{27}
}
func (m *MsgUpdateMonoWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoWhitelistResponse.Merge(m, src)
}
func (m *MsgUpdateMonoWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoWhitelistResponse proto.InternalMessageInfo

type MsgDeleteMonoWhitelist struct {
	Governor    string `protobuf:"bytes,1,opt,name=governor,proto3" json:"governor,omitempty"`
	WhitelistId string `protobuf:"bytes,2,opt,name=whitelistId,proto3" json:"whitelistId,omitempty"`
}

func (m *MsgDeleteMonoWhitelist) Reset()         { *m = MsgDeleteMonoWhitelist{} }
func (m *MsgDeleteMonoWhitelist) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoWhitelist) ProtoMessage()    {}
func (*MsgDeleteMonoWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{28}
}
func (m *MsgDeleteMonoWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoWhitelist.Merge(m, src)
}
func (m *MsgDeleteMonoWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoWhitelist proto.InternalMessageInfo

func (m *MsgDeleteMonoWhitelist) GetGovernor() string {
	if m != nil {
		return m.Governor
	}
	return ""
}

func (m *MsgDeleteMonoWhitelist) GetWhitelistId() string {
	if m != nil {
		return m.WhitelistId
	}
	return ""
}

type MsgDeleteMonoWhitelistResponse struct {
}

func (m *MsgDeleteMonoWhitelistResponse) Reset()         { *m = MsgDeleteMonoWhitelistResponse{} }
func (m *MsgDeleteMonoWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoWhitelistResponse) ProtoMessage()    {}
func (*MsgDeleteMonoWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bd336a39a8c9db2, []int{29}
}
func (m *MsgDeleteMonoWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoWhitelistResponse.Merge(m, src)
}
func (m *MsgDeleteMonoWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoWhitelistResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateBuyer)(nil), "crowlabs.delta.whitelist.MsgCreateBuyer")
	proto.RegisterType((*MsgCreateBuyerResponse)(nil), "crowlabs.delta.whitelist.MsgCreateBuyerResponse")
	proto.RegisterType((*MsgUpdateBuyer)(nil), "crowlabs.delta.whitelist.MsgUpdateBuyer")
	proto.RegisterType((*MsgUpdateBuyerResponse)(nil), "crowlabs.delta.whitelist.MsgUpdateBuyerResponse")
	proto.RegisterType((*MsgDeleteBuyer)(nil), "crowlabs.delta.whitelist.MsgDeleteBuyer")
	proto.RegisterType((*MsgDeleteBuyerResponse)(nil), "crowlabs.delta.whitelist.MsgDeleteBuyerResponse")
	proto.RegisterType((*MsgCreateSeller)(nil), "crowlabs.delta.whitelist.MsgCreateSeller")
	proto.RegisterType((*MsgCreateSellerResponse)(nil), "crowlabs.delta.whitelist.MsgCreateSellerResponse")
	proto.RegisterType((*MsgUpdateSeller)(nil), "crowlabs.delta.whitelist.MsgUpdateSeller")
	proto.RegisterType((*MsgUpdateSellerResponse)(nil), "crowlabs.delta.whitelist.MsgUpdateSellerResponse")
	proto.RegisterType((*MsgDeleteSeller)(nil), "crowlabs.delta.whitelist.MsgDeleteSeller")
	proto.RegisterType((*MsgDeleteSellerResponse)(nil), "crowlabs.delta.whitelist.MsgDeleteSellerResponse")
	proto.RegisterType((*MsgCreateVoter)(nil), "crowlabs.delta.whitelist.MsgCreateVoter")
	proto.RegisterType((*MsgCreateVoterResponse)(nil), "crowlabs.delta.whitelist.MsgCreateVoterResponse")
	proto.RegisterType((*MsgUpdateVoter)(nil), "crowlabs.delta.whitelist.MsgUpdateVoter")
	proto.RegisterType((*MsgUpdateVoterResponse)(nil), "crowlabs.delta.whitelist.MsgUpdateVoterResponse")
	proto.RegisterType((*MsgDeleteVoter)(nil), "crowlabs.delta.whitelist.MsgDeleteVoter")
	proto.RegisterType((*MsgDeleteVoterResponse)(nil), "crowlabs.delta.whitelist.MsgDeleteVoterResponse")
	proto.RegisterType((*MsgCreateWhitelist)(nil), "crowlabs.delta.whitelist.MsgCreateWhitelist")
	proto.RegisterType((*MsgCreateWhitelistResponse)(nil), "crowlabs.delta.whitelist.MsgCreateWhitelistResponse")
	proto.RegisterType((*MsgUpdateWhitelist)(nil), "crowlabs.delta.whitelist.MsgUpdateWhitelist")
	proto.RegisterType((*MsgUpdateWhitelistResponse)(nil), "crowlabs.delta.whitelist.MsgUpdateWhitelistResponse")
	proto.RegisterType((*MsgDeleteWhitelist)(nil), "crowlabs.delta.whitelist.MsgDeleteWhitelist")
	proto.RegisterType((*MsgDeleteWhitelistResponse)(nil), "crowlabs.delta.whitelist.MsgDeleteWhitelistResponse")
	proto.RegisterType((*MsgCreateMonoWhitelist)(nil), "crowlabs.delta.whitelist.MsgCreateMonoWhitelist")
	proto.RegisterType((*MsgCreateMonoWhitelistResponse)(nil), "crowlabs.delta.whitelist.MsgCreateMonoWhitelistResponse")
	proto.RegisterType((*MsgUpdateMonoWhitelist)(nil), "crowlabs.delta.whitelist.MsgUpdateMonoWhitelist")
	proto.RegisterType((*MsgUpdateMonoWhitelistResponse)(nil), "crowlabs.delta.whitelist.MsgUpdateMonoWhitelistResponse")
	proto.RegisterType((*MsgDeleteMonoWhitelist)(nil), "crowlabs.delta.whitelist.MsgDeleteMonoWhitelist")
	proto.RegisterType((*MsgDeleteMonoWhitelistResponse)(nil), "crowlabs.delta.whitelist.MsgDeleteMonoWhitelistResponse")
}

func init() { proto.RegisterFile("whitelist/tx.proto", fileDescriptor_3bd336a39a8c9db2) }

var fileDescriptor_3bd336a39a8c9db2 = []byte{
	// 937 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x93, 0x34, 0x6d, 0x37, 0xd0, 0x4a, 0x0b, 0x14, 0xd7, 0xaa, 0x4c, 0x94, 0x53, 0x2b,
	0x85, 0x04, 0x0a, 0x48, 0x3d, 0x21, 0x54, 0x50, 0xa5, 0x48, 0x54, 0x54, 0x41, 0x14, 0x89, 0x0b,
	0x24, 0xf1, 0x92, 0x5a, 0x72, 0xbc, 0x91, 0x7f, 0x92, 0xf6, 0xc8, 0x1b, 0xf0, 0x0c, 0x3c, 0x0a,
	0xa7, 0x1e, 0x7b, 0xe4, 0x88, 0xda, 0x13, 0x2f, 0x81, 0xd0, 0xce, 0xda, 0xeb, 0xb5, 0xeb, 0xa4,
	0x9b, 0x96, 0x03, 0xa2, 0xb7, 0x9d, 0xd9, 0xd9, 0xf9, 0x66, 0xbe, 0x8c, 0x67, 0x46, 0x41, 0x78,
	0x7c, 0x68, 0x07, 0xc4, 0xb1, 0xfd, 0xa0, 0x19, 0x1c, 0x35, 0x86, 0x1e, 0x0d, 0x28, 0xd6, 0x7b,
	0x1e, 0x1d, 0x3b, 0x9d, 0xae, 0xdf, 0xb0, 0x88, 0x13, 0x74, 0x1a, 0xc2, 0xc4, 0x58, 0x4b, 0xac,
	0xc5, 0x89, 0x3f, 0x32, 0xcc, 0xe4, 0x6a, 0x40, 0x5d, 0xfa, 0x31, 0x7b, 0x7f, 0x2f, 0xb9, 0x1f,
	0xd1, 0x80, 0x78, 0x91, 0x7a, 0x35, 0x51, 0xfb, 0xc4, 0x71, 0x84, 0x5e, 0x32, 0xef, 0x86, 0xc7,
	0xb1, 0xba, 0xf6, 0x4d, 0x43, 0xcb, 0x7b, 0x7e, 0xff, 0xa5, 0x47, 0x3a, 0x01, 0xd9, 0x61, 0x17,
	0xf8, 0x2e, 0x9a, 0x07, 0x0b, 0x5d, 0xab, 0x6a, 0x1b, 0x4b, 0x6d, 0x2e, 0x60, 0x1d, 0x2d, 0xc0,
	0xa1, 0x65, 0xe9, 0x05, 0xd0, 0xc7, 0x22, 0xc6, 0xa8, 0xe4, 0x76, 0x06, 0x44, 0x2f, 0x82, 0x1a,
	0xce, 0xd8, 0x40, 0x8b, 0x6e, 0x38, 0x78, 0xe3, 0x59, 0xc4, 0xd3, 0x4b, 0x55, 0x6d, 0xa3, 0xd4,
	0x16, 0x32, 0xf3, 0x44, 0xd9, 0xa1, 0x65, 0xe9, 0xf3, 0xd5, 0x22, 0xf3, 0x14, 0x89, 0x78, 0x15,
	0x95, 0xfd, 0xa0, 0x13, 0x84, 0xbe, 0x5e, 0x06, 0x5f, 0x91, 0x54, 0xd3, 0xd1, 0x6a, 0x3a, 0xc6,
	0x36, 0xf1, 0x87, 0xd4, 0xf5, 0x49, 0x1c, 0xfe, 0xbb, 0xa1, 0xf5, 0xcf, 0x87, 0x2f, 0xc5, 0x28,
	0xc2, 0x7f, 0x01, 0xd1, 0xbf, 0x22, 0x0e, 0xb9, 0x62, 0xf4, 0x91, 0x6f, 0xc9, 0x83, 0xf0, 0xfd,
	0x4b, 0x43, 0x2b, 0x82, 0xb5, 0xb7, 0x50, 0x0a, 0x2c, 0xaf, 0xa1, 0x47, 0xad, 0xb0, 0x27, 0x00,
	0x84, 0xcc, 0xee, 0x78, 0xc1, 0x08, 0x10, 0x21, 0xe7, 0x72, 0x84, 0x51, 0xc9, 0x22, 0x7e, 0x0f,
	0xf8, 0x59, 0x6a, 0xc3, 0x19, 0x57, 0x51, 0xa5, 0x47, 0xdd, 0xa0, 0xd3, 0x0b, 0x5a, 0xee, 0x67,
	0xaa, 0xcf, 0xc3, 0x95, 0xac, 0xc2, 0x26, 0x42, 0x6e, 0x38, 0x78, 0x6d, 0xfb, 0x81, 0xed, 0xf6,
	0x81, 0xa7, 0x52, 0x5b, 0xd2, 0xe0, 0x75, 0xb4, 0xe4, 0xf0, 0x63, 0xcb, 0xd2, 0x17, 0x80, 0xdf,
	0x44, 0x21, 0x31, 0xbc, 0x98, 0x62, 0x78, 0x0d, 0xdd, 0xcf, 0xa4, 0x9a, 0xa5, 0x81, 0xb3, 0x7f,
	0x23, 0x68, 0x90, 0x53, 0x15, 0x34, 0xb4, 0x80, 0x05, 0x5e, 0x27, 0xd7, 0x63, 0x21, 0x42, 0x91,
	0x5d, 0x09, 0x94, 0x13, 0xb9, 0x9b, 0x1c, 0xb0, 0xae, 0xc4, 0x3c, 0x79, 0x64, 0x64, 0x93, 0x71,
	0x82, 0x12, 0xcb, 0xac, 0xac, 0xa1, 0x75, 0x25, 0x65, 0x1d, 0x89, 0xb9, 0x4c, 0x57, 0x51, 0x65,
	0x44, 0x19, 0x03, 0xfb, 0x74, 0x2c, 0xbe, 0x4b, 0x59, 0x15, 0x7d, 0xb6, 0x0c, 0xd7, 0x07, 0xd2,
	0xf9, 0x67, 0x0b, 0x32, 0xe3, 0x8c, 0x39, 0x6f, 0x59, 0x7a, 0x19, 0xe8, 0x8c, 0x24, 0x89, 0xcb,
	0x85, 0x89, 0x3d, 0x07, 0x32, 0xc9, 0x26, 0xc9, 0x69, 0xfe, 0x1f, 0x92, 0x94, 0x32, 0x11, 0x49,
	0xee, 0x4a, 0x9d, 0xe9, 0x1a, 0x39, 0xa6, 0xfa, 0x53, 0x1a, 0x61, 0x1f, 0x61, 0x41, 0xf0, 0xfb,
	0x78, 0x36, 0x31, 0x4f, 0x3d, 0xa6, 0xa2, 0x31, 0x48, 0x2c, 0x32, 0x66, 0xc4, 0x08, 0x13, 0x38,
	0xb2, 0xaa, 0x56, 0x47, 0xc6, 0x45, 0x8f, 0x31, 0x1e, 0x5e, 0x46, 0x05, 0xdb, 0x02, 0xa7, 0xa5,
	0x76, 0xc1, 0xb6, 0x6a, 0x9f, 0x00, 0x9f, 0xe7, 0xae, 0x82, 0xcf, 0xdf, 0x17, 0xe2, 0xf7, 0xd9,
	0x78, 0x8a, 0x17, 0xe3, 0x59, 0x87, 0x78, 0x32, 0x08, 0x22, 0xff, 0xe7, 0x80, 0xcf, 0x99, 0xb9,
	0x02, 0x7e, 0xe4, 0x3d, 0xf3, 0x5e, 0x78, 0xff, 0xad, 0x49, 0xf5, 0xbb, 0x47, 0x5d, 0x9a, 0x40,
	0x18, 0x68, 0xb1, 0x4f, 0x47, 0xc4, 0x73, 0x05, 0x86, 0x90, 0x2f, 0x27, 0x19, 0x3f, 0x8b, 0x07,
	0x14, 0x4b, 0xb8, 0xb2, 0xf5, 0xa0, 0x31, 0x69, 0xb7, 0x69, 0xf0, 0x71, 0x14, 0x4d, 0xb0, 0x6d,
	0x54, 0xe6, 0x0d, 0x04, 0x4a, 0xba, 0xb2, 0x55, 0x9d, 0xfc, 0x2e, 0xea, 0x29, 0x91, 0x3d, 0x03,
	0x84, 0x62, 0x82, 0x62, 0x9f, 0x0a, 0xc8, 0xeb, 0x8b, 0x5b, 0xd7, 0xaa, 0xc8, 0xcc, 0xcf, 0x3f,
	0x4b, 0x11, 0xff, 0x7d, 0x6e, 0x2e, 0x45, 0x39, 0xf9, 0x0b, 0x8a, 0x0e, 0xa4, 0xaf, 0xf7, 0x2f,
	0x32, 0x14, 0x21, 0xe7, 0xf8, 0x8d, 0x91, 0xb7, 0xbe, 0xdf, 0x46, 0xc5, 0x3d, 0xbf, 0x8f, 0x6d,
	0x54, 0x91, 0x77, 0xd3, 0x8d, 0xc9, 0xa9, 0xa5, 0x37, 0x44, 0xe3, 0x91, 0xaa, 0xa5, 0x68, 0x10,
	0x36, 0xaa, 0xc8, 0x7b, 0xe4, 0x74, 0x28, 0xc9, 0xf2, 0x12, 0xa8, 0x9c, 0xbd, 0x8f, 0x41, 0xc9,
	0x4b, 0xdf, 0x74, 0x28, 0xc9, 0xf2, 0x12, 0xa8, 0x9c, 0x35, 0x10, 0x3b, 0xe8, 0x56, 0x6a, 0x05,
	0xdc, 0x54, 0xe0, 0x85, 0x9b, 0x1a, 0x8f, 0x95, 0x4d, 0x65, 0xb4, 0xd4, 0xa6, 0xb5, 0xa9, 0x40,
	0x8d, 0x12, 0x5a, 0xde, 0x52, 0xc3, 0xd0, 0x52, 0x1b, 0xcd, 0xa6, 0x02, 0x3b, 0x4a, 0x68, 0x79,
	0xcb, 0x4d, 0x52, 0x8a, 0x7c, 0x1e, 0xaa, 0x94, 0x22, 0x58, 0x2a, 0x95, 0x62, 0x6a, 0x36, 0x26,
	0xa5, 0xa8, 0x02, 0x25, 0x59, 0x2a, 0x95, 0xe2, 0x05, 0x28, 0x79, 0xca, 0xab, 0x94, 0xa2, 0x0a,
	0x54, 0xce, 0xc4, 0xc7, 0x21, 0x5a, 0xc9, 0x8e, 0xfb, 0xba, 0x02, 0x35, 0xc2, 0xda, 0x78, 0x3a,
	0x8b, 0xb5, 0x0c, 0x9b, 0x9d, 0xf2, 0x75, 0x05, 0x9a, 0x54, 0x61, 0x27, 0xcc, 0x77, 0x06, 0x9b,
	0x1d, 0xee, 0x75, 0x05, 0xca, 0x54, 0x61, 0x27, 0x0c, 0x7e, 0xfc, 0x45, 0x43, 0x77, 0xf2, 0xa6,
	0xbe, 0x4a, 0x11, 0xa6, 0x5e, 0x18, 0xdb, 0xb3, 0xbe, 0x48, 0xc5, 0x90, 0x37, 0x56, 0x55, 0xaa,
	0x73, 0x96, 0x18, 0xa6, 0x8c, 0x2e, 0x88, 0x21, 0x6f, 0x70, 0xa9, 0x94, 0xed, 0x2c, 0x31, 0x4c,
	0x19, 0x62, 0x3b, 0xbb, 0x27, 0x67, 0xa6, 0x76, 0x7a, 0x66, 0x6a, 0x3f, 0xcf, 0x4c, 0xed, 0xeb,
	0xb9, 0x39, 0x77, 0x7a, 0x6e, 0xce, 0xfd, 0x38, 0x37, 0xe7, 0x3e, 0xd4, 0xfb, 0x76, 0x70, 0x18,
	0x76, 0x1b, 0x3d, 0x3a, 0x68, 0x32, 0xef, 0x0f, 0x99, 0xfb, 0x26, 0xb8, 0x6f, 0x1e, 0x35, 0xa5,
	0xbf, 0x90, 0x8e, 0x87, 0xc4, 0xef, 0x96, 0xe1, 0xbf, 0x9a, 0x27, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x12, 0xac, 0x6e, 0xda, 0x5c, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateBuyer(ctx context.Context, in *MsgCreateBuyer, opts ...grpc.CallOption) (*MsgCreateBuyerResponse, error)
	UpdateBuyer(ctx context.Context, in *MsgUpdateBuyer, opts ...grpc.CallOption) (*MsgUpdateBuyerResponse, error)
	DeleteBuyer(ctx context.Context, in *MsgDeleteBuyer, opts ...grpc.CallOption) (*MsgDeleteBuyerResponse, error)
	CreateSeller(ctx context.Context, in *MsgCreateSeller, opts ...grpc.CallOption) (*MsgCreateSellerResponse, error)
	UpdateSeller(ctx context.Context, in *MsgUpdateSeller, opts ...grpc.CallOption) (*MsgUpdateSellerResponse, error)
	DeleteSeller(ctx context.Context, in *MsgDeleteSeller, opts ...grpc.CallOption) (*MsgDeleteSellerResponse, error)
	CreateVoter(ctx context.Context, in *MsgCreateVoter, opts ...grpc.CallOption) (*MsgCreateVoterResponse, error)
	UpdateVoter(ctx context.Context, in *MsgUpdateVoter, opts ...grpc.CallOption) (*MsgUpdateVoterResponse, error)
	DeleteVoter(ctx context.Context, in *MsgDeleteVoter, opts ...grpc.CallOption) (*MsgDeleteVoterResponse, error)
	CreateWhitelist(ctx context.Context, in *MsgCreateWhitelist, opts ...grpc.CallOption) (*MsgCreateWhitelistResponse, error)
	UpdateWhitelist(ctx context.Context, in *MsgUpdateWhitelist, opts ...grpc.CallOption) (*MsgUpdateWhitelistResponse, error)
	DeleteWhitelist(ctx context.Context, in *MsgDeleteWhitelist, opts ...grpc.CallOption) (*MsgDeleteWhitelistResponse, error)
	CreateMonoWhitelist(ctx context.Context, in *MsgCreateMonoWhitelist, opts ...grpc.CallOption) (*MsgCreateMonoWhitelistResponse, error)
	UpdateMonoWhitelist(ctx context.Context, in *MsgUpdateMonoWhitelist, opts ...grpc.CallOption) (*MsgUpdateMonoWhitelistResponse, error)
	DeleteMonoWhitelist(ctx context.Context, in *MsgDeleteMonoWhitelist, opts ...grpc.CallOption) (*MsgDeleteMonoWhitelistResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateBuyer(ctx context.Context, in *MsgCreateBuyer, opts ...grpc.CallOption) (*MsgCreateBuyerResponse, error) {
	out := new(MsgCreateBuyerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/CreateBuyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBuyer(ctx context.Context, in *MsgUpdateBuyer, opts ...grpc.CallOption) (*MsgUpdateBuyerResponse, error) {
	out := new(MsgUpdateBuyerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/UpdateBuyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteBuyer(ctx context.Context, in *MsgDeleteBuyer, opts ...grpc.CallOption) (*MsgDeleteBuyerResponse, error) {
	out := new(MsgDeleteBuyerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/DeleteBuyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSeller(ctx context.Context, in *MsgCreateSeller, opts ...grpc.CallOption) (*MsgCreateSellerResponse, error) {
	out := new(MsgCreateSellerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/CreateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSeller(ctx context.Context, in *MsgUpdateSeller, opts ...grpc.CallOption) (*MsgUpdateSellerResponse, error) {
	out := new(MsgUpdateSellerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/UpdateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteSeller(ctx context.Context, in *MsgDeleteSeller, opts ...grpc.CallOption) (*MsgDeleteSellerResponse, error) {
	out := new(MsgDeleteSellerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/DeleteSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateVoter(ctx context.Context, in *MsgCreateVoter, opts ...grpc.CallOption) (*MsgCreateVoterResponse, error) {
	out := new(MsgCreateVoterResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/CreateVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVoter(ctx context.Context, in *MsgUpdateVoter, opts ...grpc.CallOption) (*MsgUpdateVoterResponse, error) {
	out := new(MsgUpdateVoterResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/UpdateVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteVoter(ctx context.Context, in *MsgDeleteVoter, opts ...grpc.CallOption) (*MsgDeleteVoterResponse, error) {
	out := new(MsgDeleteVoterResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/DeleteVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateWhitelist(ctx context.Context, in *MsgCreateWhitelist, opts ...grpc.CallOption) (*MsgCreateWhitelistResponse, error) {
	out := new(MsgCreateWhitelistResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/CreateWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateWhitelist(ctx context.Context, in *MsgUpdateWhitelist, opts ...grpc.CallOption) (*MsgUpdateWhitelistResponse, error) {
	out := new(MsgUpdateWhitelistResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/UpdateWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteWhitelist(ctx context.Context, in *MsgDeleteWhitelist, opts ...grpc.CallOption) (*MsgDeleteWhitelistResponse, error) {
	out := new(MsgDeleteWhitelistResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/DeleteWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMonoWhitelist(ctx context.Context, in *MsgCreateMonoWhitelist, opts ...grpc.CallOption) (*MsgCreateMonoWhitelistResponse, error) {
	out := new(MsgCreateMonoWhitelistResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/CreateMonoWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMonoWhitelist(ctx context.Context, in *MsgUpdateMonoWhitelist, opts ...grpc.CallOption) (*MsgUpdateMonoWhitelistResponse, error) {
	out := new(MsgUpdateMonoWhitelistResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/UpdateMonoWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMonoWhitelist(ctx context.Context, in *MsgDeleteMonoWhitelist, opts ...grpc.CallOption) (*MsgDeleteMonoWhitelistResponse, error) {
	out := new(MsgDeleteMonoWhitelistResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Msg/DeleteMonoWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateBuyer(context.Context, *MsgCreateBuyer) (*MsgCreateBuyerResponse, error)
	UpdateBuyer(context.Context, *MsgUpdateBuyer) (*MsgUpdateBuyerResponse, error)
	DeleteBuyer(context.Context, *MsgDeleteBuyer) (*MsgDeleteBuyerResponse, error)
	CreateSeller(context.Context, *MsgCreateSeller) (*MsgCreateSellerResponse, error)
	UpdateSeller(context.Context, *MsgUpdateSeller) (*MsgUpdateSellerResponse, error)
	DeleteSeller(context.Context, *MsgDeleteSeller) (*MsgDeleteSellerResponse, error)
	CreateVoter(context.Context, *MsgCreateVoter) (*MsgCreateVoterResponse, error)
	UpdateVoter(context.Context, *MsgUpdateVoter) (*MsgUpdateVoterResponse, error)
	DeleteVoter(context.Context, *MsgDeleteVoter) (*MsgDeleteVoterResponse, error)
	CreateWhitelist(context.Context, *MsgCreateWhitelist) (*MsgCreateWhitelistResponse, error)
	UpdateWhitelist(context.Context, *MsgUpdateWhitelist) (*MsgUpdateWhitelistResponse, error)
	DeleteWhitelist(context.Context, *MsgDeleteWhitelist) (*MsgDeleteWhitelistResponse, error)
	CreateMonoWhitelist(context.Context, *MsgCreateMonoWhitelist) (*MsgCreateMonoWhitelistResponse, error)
	UpdateMonoWhitelist(context.Context, *MsgUpdateMonoWhitelist) (*MsgUpdateMonoWhitelistResponse, error)
	DeleteMonoWhitelist(context.Context, *MsgDeleteMonoWhitelist) (*MsgDeleteMonoWhitelistResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateBuyer(ctx context.Context, req *MsgCreateBuyer) (*MsgCreateBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuyer not implemented")
}
func (*UnimplementedMsgServer) UpdateBuyer(ctx context.Context, req *MsgUpdateBuyer) (*MsgUpdateBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyer not implemented")
}
func (*UnimplementedMsgServer) DeleteBuyer(ctx context.Context, req *MsgDeleteBuyer) (*MsgDeleteBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuyer not implemented")
}
func (*UnimplementedMsgServer) CreateSeller(ctx context.Context, req *MsgCreateSeller) (*MsgCreateSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeller not implemented")
}
func (*UnimplementedMsgServer) UpdateSeller(ctx context.Context, req *MsgUpdateSeller) (*MsgUpdateSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeller not implemented")
}
func (*UnimplementedMsgServer) DeleteSeller(ctx context.Context, req *MsgDeleteSeller) (*MsgDeleteSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeller not implemented")
}
func (*UnimplementedMsgServer) CreateVoter(ctx context.Context, req *MsgCreateVoter) (*MsgCreateVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoter not implemented")
}
func (*UnimplementedMsgServer) UpdateVoter(ctx context.Context, req *MsgUpdateVoter) (*MsgUpdateVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoter not implemented")
}
func (*UnimplementedMsgServer) DeleteVoter(ctx context.Context, req *MsgDeleteVoter) (*MsgDeleteVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVoter not implemented")
}
func (*UnimplementedMsgServer) CreateWhitelist(ctx context.Context, req *MsgCreateWhitelist) (*MsgCreateWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWhitelist not implemented")
}
func (*UnimplementedMsgServer) UpdateWhitelist(ctx context.Context, req *MsgUpdateWhitelist) (*MsgUpdateWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWhitelist not implemented")
}
func (*UnimplementedMsgServer) DeleteWhitelist(ctx context.Context, req *MsgDeleteWhitelist) (*MsgDeleteWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWhitelist not implemented")
}
func (*UnimplementedMsgServer) CreateMonoWhitelist(ctx context.Context, req *MsgCreateMonoWhitelist) (*MsgCreateMonoWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonoWhitelist not implemented")
}
func (*UnimplementedMsgServer) UpdateMonoWhitelist(ctx context.Context, req *MsgUpdateMonoWhitelist) (*MsgUpdateMonoWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonoWhitelist not implemented")
}
func (*UnimplementedMsgServer) DeleteMonoWhitelist(ctx context.Context, req *MsgDeleteMonoWhitelist) (*MsgDeleteMonoWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonoWhitelist not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBuyer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/CreateBuyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBuyer(ctx, req.(*MsgCreateBuyer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBuyer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/UpdateBuyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBuyer(ctx, req.(*MsgUpdateBuyer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteBuyer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/DeleteBuyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteBuyer(ctx, req.(*MsgDeleteBuyer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSeller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/CreateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSeller(ctx, req.(*MsgCreateSeller))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSeller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/UpdateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSeller(ctx, req.(*MsgUpdateSeller))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteSeller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/DeleteSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteSeller(ctx, req.(*MsgDeleteSeller))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/CreateVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVoter(ctx, req.(*MsgCreateVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/UpdateVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVoter(ctx, req.(*MsgUpdateVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/DeleteVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteVoter(ctx, req.(*MsgDeleteVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateWhitelist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/CreateWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateWhitelist(ctx, req.(*MsgCreateWhitelist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateWhitelist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/UpdateWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateWhitelist(ctx, req.(*MsgUpdateWhitelist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteWhitelist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/DeleteWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteWhitelist(ctx, req.(*MsgDeleteWhitelist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMonoWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMonoWhitelist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMonoWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/CreateMonoWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMonoWhitelist(ctx, req.(*MsgCreateMonoWhitelist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMonoWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMonoWhitelist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMonoWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/UpdateMonoWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMonoWhitelist(ctx, req.(*MsgUpdateMonoWhitelist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMonoWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMonoWhitelist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMonoWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Msg/DeleteMonoWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMonoWhitelist(ctx, req.(*MsgDeleteMonoWhitelist))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crowlabs.delta.whitelist.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuyer",
			Handler:    _Msg_CreateBuyer_Handler,
		},
		{
			MethodName: "UpdateBuyer",
			Handler:    _Msg_UpdateBuyer_Handler,
		},
		{
			MethodName: "DeleteBuyer",
			Handler:    _Msg_DeleteBuyer_Handler,
		},
		{
			MethodName: "CreateSeller",
			Handler:    _Msg_CreateSeller_Handler,
		},
		{
			MethodName: "UpdateSeller",
			Handler:    _Msg_UpdateSeller_Handler,
		},
		{
			MethodName: "DeleteSeller",
			Handler:    _Msg_DeleteSeller_Handler,
		},
		{
			MethodName: "CreateVoter",
			Handler:    _Msg_CreateVoter_Handler,
		},
		{
			MethodName: "UpdateVoter",
			Handler:    _Msg_UpdateVoter_Handler,
		},
		{
			MethodName: "DeleteVoter",
			Handler:    _Msg_DeleteVoter_Handler,
		},
		{
			MethodName: "CreateWhitelist",
			Handler:    _Msg_CreateWhitelist_Handler,
		},
		{
			MethodName: "UpdateWhitelist",
			Handler:    _Msg_UpdateWhitelist_Handler,
		},
		{
			MethodName: "DeleteWhitelist",
			Handler:    _Msg_DeleteWhitelist_Handler,
		},
		{
			MethodName: "CreateMonoWhitelist",
			Handler:    _Msg_CreateMonoWhitelist_Handler,
		},
		{
			MethodName: "UpdateMonoWhitelist",
			Handler:    _Msg_UpdateMonoWhitelist_Handler,
		},
		{
			MethodName: "DeleteMonoWhitelist",
			Handler:    _Msg_DeleteMonoWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whitelist/tx.proto",
}

func (m *MsgCreateBuyer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBuyer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBuyer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OrderId) > 0 {
		for iNdEx := len(m.OrderId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderId[iNdEx])
			copy(dAtA[i:], m.OrderId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NumOrder != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumOrder))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuyerId) > 0 {
		i -= len(m.BuyerId)
		copy(dAtA[i:], m.BuyerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateBuyerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBuyerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBuyerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBuyer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBuyer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBuyer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OrderId) > 0 {
		for iNdEx := len(m.OrderId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderId[iNdEx])
			copy(dAtA[i:], m.OrderId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NumOrder != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumOrder))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuyerId) > 0 {
		i -= len(m.BuyerId)
		copy(dAtA[i:], m.BuyerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBuyerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBuyerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBuyerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBuyer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBuyer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBuyer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyerId) > 0 {
		i -= len(m.BuyerId)
		copy(dAtA[i:], m.BuyerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBuyerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBuyerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBuyerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateSeller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSeller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSeller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ListingId) > 0 {
		for iNdEx := len(m.ListingId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ListingId[iNdEx])
			copy(dAtA[i:], m.ListingId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ListingId[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.NumListing != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumListing))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ContactInfo) > 0 {
		i -= len(m.ContactInfo)
		copy(dAtA[i:], m.ContactInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContactInfo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Producer) > 0 {
		i -= len(m.Producer)
		copy(dAtA[i:], m.Producer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Producer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSellerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSellerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSellerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSeller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSeller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSeller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ListingId) > 0 {
		for iNdEx := len(m.ListingId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ListingId[iNdEx])
			copy(dAtA[i:], m.ListingId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ListingId[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.NumListing != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumListing))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ContactInfo) > 0 {
		i -= len(m.ContactInfo)
		copy(dAtA[i:], m.ContactInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContactInfo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Producer) > 0 {
		i -= len(m.Producer)
		copy(dAtA[i:], m.Producer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Producer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSellerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSellerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSellerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteSeller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteSeller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteSeller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Producer) > 0 {
		i -= len(m.Producer)
		copy(dAtA[i:], m.Producer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Producer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteSellerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteSellerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteSellerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VoteId) > 0 {
		for iNdEx := len(m.VoteId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VoteId[iNdEx])
			copy(dAtA[i:], m.VoteId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.VoteId[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.NumVotes != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumVotes))
		i--
		dAtA[i] = 0x28
	}
	if m.VotingPower != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoterId) > 0 {
		i -= len(m.VoterId)
		copy(dAtA[i:], m.VoterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reviewer) > 0 {
		i -= len(m.Reviewer)
		copy(dAtA[i:], m.Reviewer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reviewer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VoteId) > 0 {
		for iNdEx := len(m.VoteId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VoteId[iNdEx])
			copy(dAtA[i:], m.VoteId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.VoteId[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.NumVotes != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumVotes))
		i--
		dAtA[i] = 0x28
	}
	if m.VotingPower != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoterId) > 0 {
		i -= len(m.VoterId)
		copy(dAtA[i:], m.VoterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reviewer) > 0 {
		i -= len(m.Reviewer)
		copy(dAtA[i:], m.Reviewer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reviewer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterId) > 0 {
		i -= len(m.VoterId)
		copy(dAtA[i:], m.VoterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reviewer) > 0 {
		i -= len(m.Reviewer)
		copy(dAtA[i:], m.Reviewer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reviewer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistId) > 0 {
		i -= len(m.WhitelistId)
		copy(dAtA[i:], m.WhitelistId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WhitelistId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistId) > 0 {
		i -= len(m.WhitelistId)
		copy(dAtA[i:], m.WhitelistId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WhitelistId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateMonoWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Voter != nil {
		{
			size, err := m.Voter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Seller != nil {
		{
			size, err := m.Seller.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Buyer != nil {
		{
			size, err := m.Buyer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WhitelistId) > 0 {
		i -= len(m.WhitelistId)
		copy(dAtA[i:], m.WhitelistId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WhitelistId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Governor) > 0 {
		i -= len(m.Governor)
		copy(dAtA[i:], m.Governor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Governor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMonoWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Voter != nil {
		{
			size, err := m.Voter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Seller != nil {
		{
			size, err := m.Seller.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Buyer != nil {
		{
			size, err := m.Buyer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WhitelistId) > 0 {
		i -= len(m.WhitelistId)
		copy(dAtA[i:], m.WhitelistId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WhitelistId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Governor) > 0 {
		i -= len(m.Governor)
		copy(dAtA[i:], m.Governor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Governor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistId) > 0 {
		i -= len(m.WhitelistId)
		copy(dAtA[i:], m.WhitelistId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WhitelistId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Governor) > 0 {
		i -= len(m.Governor)
		copy(dAtA[i:], m.Governor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Governor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateBuyer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NumOrder != 0 {
		n += 1 + sovTx(uint64(m.NumOrder))
	}
	if len(m.OrderId) > 0 {
		for _, s := range m.OrderId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateBuyerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateBuyer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NumOrder != 0 {
		n += 1 + sovTx(uint64(m.NumOrder))
	}
	if len(m.OrderId) > 0 {
		for _, s := range m.OrderId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateBuyerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteBuyer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteBuyerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateSeller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Producer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContactInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NumListing != 0 {
		n += 1 + sovTx(uint64(m.NumListing))
	}
	if len(m.ListingId) > 0 {
		for _, s := range m.ListingId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSellerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSeller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Producer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContactInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NumListing != 0 {
		n += 1 + sovTx(uint64(m.NumListing))
	}
	if len(m.ListingId) > 0 {
		for _, s := range m.ListingId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSellerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteSeller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Producer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteSellerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reviewer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VotingPower != 0 {
		n += 1 + sovTx(uint64(m.VotingPower))
	}
	if m.NumVotes != 0 {
		n += 1 + sovTx(uint64(m.NumVotes))
	}
	if len(m.VoteId) > 0 {
		for _, s := range m.VoteId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reviewer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VotingPower != 0 {
		n += 1 + sovTx(uint64(m.VotingPower))
	}
	if m.NumVotes != 0 {
		n += 1 + sovTx(uint64(m.NumVotes))
	}
	if len(m.VoteId) > 0 {
		for _, s := range m.VoteId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reviewer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WhitelistId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgUpdateWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.WhitelistId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgDeleteWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateMonoWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Governor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WhitelistId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Buyer != nil {
		l = m.Buyer.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Seller != nil {
		l = m.Seller.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Voter != nil {
		l = m.Voter.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMonoWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMonoWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Governor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WhitelistId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Buyer != nil {
		l = m.Buyer.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Seller != nil {
		l = m.Seller.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Voter != nil {
		l = m.Voter.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMonoWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteMonoWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Governor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WhitelistId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteMonoWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateBuyer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBuyer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBuyer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOrder", wireType)
			}
			m.NumOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOrder |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = append(m.OrderId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBuyerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBuyerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBuyerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBuyer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBuyer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBuyer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOrder", wireType)
			}
			m.NumOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOrder |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = append(m.OrderId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBuyerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBuyerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBuyerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBuyer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBuyer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBuyer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBuyerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBuyerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBuyerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSeller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSeller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSeller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Producer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumListing", wireType)
			}
			m.NumListing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumListing |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = append(m.ListingId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSellerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSellerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSellerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSeller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSeller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSeller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Producer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumListing", wireType)
			}
			m.NumListing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumListing |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = append(m.ListingId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSellerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSellerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSellerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteSeller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteSeller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteSeller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Producer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteSellerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteSellerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteSellerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reviewer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reviewer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumVotes", wireType)
			}
			m.NumVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumVotes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = append(m.VoteId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reviewer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reviewer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumVotes", wireType)
			}
			m.NumVotes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumVotes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = append(m.VoteId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reviewer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reviewer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMonoWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Governor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Governor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buyer == nil {
				m.Buyer = &Buyer{}
			}
			if err := m.Buyer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Seller == nil {
				m.Seller = &Seller{}
			}
			if err := m.Seller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voter == nil {
				m.Voter = &Voter{}
			}
			if err := m.Voter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMonoWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Governor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Governor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buyer == nil {
				m.Buyer = &Buyer{}
			}
			if err := m.Buyer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Seller == nil {
				m.Seller = &Seller{}
			}
			if err := m.Seller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voter == nil {
				m.Voter = &Voter{}
			}
			if err := m.Voter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Governor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Governor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
