// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: whitelist/mono_whitelist.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MonoWhitelist struct {
	WhitelistId string  `protobuf:"bytes,1,opt,name=whitelistId,proto3" json:"whitelistId,omitempty"`
	Buyer       *Buyer  `protobuf:"bytes,2,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Seller      *Seller `protobuf:"bytes,3,opt,name=seller,proto3" json:"seller,omitempty"`
	Voter       *Voter  `protobuf:"bytes,4,opt,name=voter,proto3" json:"voter,omitempty"`
	Governor    string  `protobuf:"bytes,5,opt,name=governor,proto3" json:"governor,omitempty"`
}

func (m *MonoWhitelist) Reset()         { *m = MonoWhitelist{} }
func (m *MonoWhitelist) String() string { return proto.CompactTextString(m) }
func (*MonoWhitelist) ProtoMessage()    {}
func (*MonoWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9e9fb01ba03924, []int{0}
}
func (m *MonoWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonoWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonoWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonoWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonoWhitelist.Merge(m, src)
}
func (m *MonoWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *MonoWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MonoWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_MonoWhitelist proto.InternalMessageInfo

func (m *MonoWhitelist) GetWhitelistId() string {
	if m != nil {
		return m.WhitelistId
	}
	return ""
}

func (m *MonoWhitelist) GetBuyer() *Buyer {
	if m != nil {
		return m.Buyer
	}
	return nil
}

func (m *MonoWhitelist) GetSeller() *Seller {
	if m != nil {
		return m.Seller
	}
	return nil
}

func (m *MonoWhitelist) GetVoter() *Voter {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *MonoWhitelist) GetGovernor() string {
	if m != nil {
		return m.Governor
	}
	return ""
}

func init() {
	proto.RegisterType((*MonoWhitelist)(nil), "crowlabs.delta.whitelist.MonoWhitelist")
}

func init() { proto.RegisterFile("whitelist/mono_whitelist.proto", fileDescriptor_3f9e9fb01ba03924) }

var fileDescriptor_3f9e9fb01ba03924 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0xcf, 0xc8, 0x2c,
	0x49, 0xcd, 0xc9, 0x2c, 0x2e, 0xd1, 0xcf, 0xcd, 0xcf, 0xcb, 0x8f, 0x87, 0x73, 0xf5, 0x0a, 0x8a,
	0xf2, 0x4b, 0xf2, 0x85, 0x24, 0x92, 0x8b, 0xf2, 0xcb, 0x73, 0x12, 0x93, 0x8a, 0xf5, 0x52, 0x52,
	0x73, 0x4a, 0x12, 0xf5, 0xe0, 0xf2, 0x52, 0xa2, 0x08, 0x9d, 0x49, 0xa5, 0x95, 0xa9, 0x45, 0x10,
	0x0d, 0x52, 0x62, 0x08, 0xe1, 0xe2, 0xd4, 0x9c, 0x1c, 0xb8, 0x38, 0x92, 0xf2, 0xb2, 0xfc, 0x12,
	0x98, 0xb0, 0xd2, 0x57, 0x46, 0x2e, 0x5e, 0xdf, 0xfc, 0xbc, 0xfc, 0x70, 0x98, 0xac, 0x90, 0x02,
	0x17, 0x37, 0x5c, 0xa9, 0x67, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0xb2, 0x90, 0x90,
	0x29, 0x17, 0x2b, 0xd8, 0x46, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x79, 0x3d, 0x5c, 0x6e,
	0xd4, 0x73, 0x02, 0x29, 0x0b, 0x82, 0xa8, 0x16, 0xb2, 0xe0, 0x62, 0x83, 0xb8, 0x48, 0x82, 0x19,
	0xac, 0x4f, 0x01, 0xb7, 0xbe, 0x60, 0xb0, 0xba, 0x20, 0xa8, 0x7a, 0x90, 0x85, 0x60, 0x37, 0x4b,
	0xb0, 0x10, 0xb2, 0x30, 0x0c, 0xa4, 0x2c, 0x08, 0xa2, 0x5a, 0x48, 0x8a, 0x8b, 0x23, 0x3d, 0xbf,
	0x2c, 0xb5, 0x28, 0x2f, 0xbf, 0x48, 0x82, 0x15, 0xec, 0x0d, 0x38, 0xdf, 0xc9, 0xed, 0xc4, 0x23,
	0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2,
	0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x74, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4,
	0x92, 0xf3, 0x73, 0xf5, 0x41, 0xf6, 0xe8, 0x82, 0x2c, 0xd2, 0x07, 0x5b, 0xa4, 0x5f, 0xa1, 0x8f,
	0x08, 0xc5, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0x70, 0x30, 0x1a, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x02, 0x0a, 0xe0, 0xb3, 0xc8, 0x01, 0x00, 0x00,
}

func (m *MonoWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonoWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonoWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Governor) > 0 {
		i -= len(m.Governor)
		copy(dAtA[i:], m.Governor)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.Governor)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Voter != nil {
		{
			size, err := m.Voter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonoWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Seller != nil {
		{
			size, err := m.Seller.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonoWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Buyer != nil {
		{
			size, err := m.Buyer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMonoWhitelist(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.WhitelistId) > 0 {
		i -= len(m.WhitelistId)
		copy(dAtA[i:], m.WhitelistId)
		i = encodeVarintMonoWhitelist(dAtA, i, uint64(len(m.WhitelistId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonoWhitelist(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonoWhitelist(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MonoWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WhitelistId)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	if m.Buyer != nil {
		l = m.Buyer.Size()
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	if m.Seller != nil {
		l = m.Seller.Size()
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	if m.Voter != nil {
		l = m.Voter.Size()
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	l = len(m.Governor)
	if l > 0 {
		n += 1 + l + sovMonoWhitelist(uint64(l))
	}
	return n
}

func sovMonoWhitelist(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonoWhitelist(x uint64) (n int) {
	return sovMonoWhitelist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MonoWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonoWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonoWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buyer == nil {
				m.Buyer = &Buyer{}
			}
			if err := m.Buyer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Seller == nil {
				m.Seller = &Seller{}
			}
			if err := m.Seller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voter == nil {
				m.Voter = &Voter{}
			}
			if err := m.Voter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Governor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Governor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonoWhitelist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonoWhitelist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoWhitelist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonoWhitelist
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonoWhitelist
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonoWhitelist
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonoWhitelist        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonoWhitelist          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonoWhitelist = fmt.Errorf("proto: unexpected end of group")
)
