// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: whitelist/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetUserRequest struct {
	AccAddr string `protobuf:"bytes,1,opt,name=accAddr,proto3" json:"accAddr,omitempty"`
}

func (m *QueryGetUserRequest) Reset()         { *m = QueryGetUserRequest{} }
func (m *QueryGetUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserRequest) ProtoMessage()    {}
func (*QueryGetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{2}
}
func (m *QueryGetUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserRequest.Merge(m, src)
}
func (m *QueryGetUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserRequest proto.InternalMessageInfo

func (m *QueryGetUserRequest) GetAccAddr() string {
	if m != nil {
		return m.AccAddr
	}
	return ""
}

type QueryGetUserResponse struct {
	User User `protobuf:"bytes,1,opt,name=user,proto3" json:"user"`
}

func (m *QueryGetUserResponse) Reset()         { *m = QueryGetUserResponse{} }
func (m *QueryGetUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserResponse) ProtoMessage()    {}
func (*QueryGetUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{3}
}
func (m *QueryGetUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserResponse.Merge(m, src)
}
func (m *QueryGetUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserResponse proto.InternalMessageInfo

func (m *QueryGetUserResponse) GetUser() User {
	if m != nil {
		return m.User
	}
	return User{}
}

type QueryAllUserRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserRequest) Reset()         { *m = QueryAllUserRequest{} }
func (m *QueryAllUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserRequest) ProtoMessage()    {}
func (*QueryAllUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{4}
}
func (m *QueryAllUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserRequest.Merge(m, src)
}
func (m *QueryAllUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserRequest proto.InternalMessageInfo

func (m *QueryAllUserRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUserResponse struct {
	User       []User              `protobuf:"bytes,1,rep,name=user,proto3" json:"user"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserResponse) Reset()         { *m = QueryAllUserResponse{} }
func (m *QueryAllUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserResponse) ProtoMessage()    {}
func (*QueryAllUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{5}
}
func (m *QueryAllUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserResponse.Merge(m, src)
}
func (m *QueryAllUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserResponse proto.InternalMessageInfo

func (m *QueryAllUserResponse) GetUser() []User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *QueryAllUserResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBuyerRequest struct {
	BuyerId string `protobuf:"bytes,1,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
}

func (m *QueryGetBuyerRequest) Reset()         { *m = QueryGetBuyerRequest{} }
func (m *QueryGetBuyerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBuyerRequest) ProtoMessage()    {}
func (*QueryGetBuyerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{6}
}
func (m *QueryGetBuyerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBuyerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBuyerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBuyerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBuyerRequest.Merge(m, src)
}
func (m *QueryGetBuyerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBuyerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBuyerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBuyerRequest proto.InternalMessageInfo

func (m *QueryGetBuyerRequest) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

type QueryGetBuyerResponse struct {
	Buyer Buyer `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer"`
}

func (m *QueryGetBuyerResponse) Reset()         { *m = QueryGetBuyerResponse{} }
func (m *QueryGetBuyerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBuyerResponse) ProtoMessage()    {}
func (*QueryGetBuyerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{7}
}
func (m *QueryGetBuyerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBuyerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBuyerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBuyerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBuyerResponse.Merge(m, src)
}
func (m *QueryGetBuyerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBuyerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBuyerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBuyerResponse proto.InternalMessageInfo

func (m *QueryGetBuyerResponse) GetBuyer() Buyer {
	if m != nil {
		return m.Buyer
	}
	return Buyer{}
}

type QueryAllBuyerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBuyerRequest) Reset()         { *m = QueryAllBuyerRequest{} }
func (m *QueryAllBuyerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBuyerRequest) ProtoMessage()    {}
func (*QueryAllBuyerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{8}
}
func (m *QueryAllBuyerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBuyerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBuyerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBuyerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBuyerRequest.Merge(m, src)
}
func (m *QueryAllBuyerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBuyerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBuyerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBuyerRequest proto.InternalMessageInfo

func (m *QueryAllBuyerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBuyerResponse struct {
	Buyer      []Buyer             `protobuf:"bytes,1,rep,name=buyer,proto3" json:"buyer"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBuyerResponse) Reset()         { *m = QueryAllBuyerResponse{} }
func (m *QueryAllBuyerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBuyerResponse) ProtoMessage()    {}
func (*QueryAllBuyerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{9}
}
func (m *QueryAllBuyerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBuyerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBuyerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBuyerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBuyerResponse.Merge(m, src)
}
func (m *QueryAllBuyerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBuyerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBuyerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBuyerResponse proto.InternalMessageInfo

func (m *QueryAllBuyerResponse) GetBuyer() []Buyer {
	if m != nil {
		return m.Buyer
	}
	return nil
}

func (m *QueryAllBuyerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProducerRequest struct {
	AccAddr string `protobuf:"bytes,1,opt,name=accAddr,proto3" json:"accAddr,omitempty"`
}

func (m *QueryGetProducerRequest) Reset()         { *m = QueryGetProducerRequest{} }
func (m *QueryGetProducerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProducerRequest) ProtoMessage()    {}
func (*QueryGetProducerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{10}
}
func (m *QueryGetProducerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProducerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProducerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProducerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProducerRequest.Merge(m, src)
}
func (m *QueryGetProducerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProducerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProducerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProducerRequest proto.InternalMessageInfo

func (m *QueryGetProducerRequest) GetAccAddr() string {
	if m != nil {
		return m.AccAddr
	}
	return ""
}

type QueryGetProducerResponse struct {
	Producer Producer `protobuf:"bytes,1,opt,name=producer,proto3" json:"producer"`
}

func (m *QueryGetProducerResponse) Reset()         { *m = QueryGetProducerResponse{} }
func (m *QueryGetProducerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProducerResponse) ProtoMessage()    {}
func (*QueryGetProducerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{11}
}
func (m *QueryGetProducerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProducerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProducerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProducerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProducerResponse.Merge(m, src)
}
func (m *QueryGetProducerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProducerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProducerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProducerResponse proto.InternalMessageInfo

func (m *QueryGetProducerResponse) GetProducer() Producer {
	if m != nil {
		return m.Producer
	}
	return Producer{}
}

type QueryAllProducerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProducerRequest) Reset()         { *m = QueryAllProducerRequest{} }
func (m *QueryAllProducerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProducerRequest) ProtoMessage()    {}
func (*QueryAllProducerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{12}
}
func (m *QueryAllProducerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProducerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProducerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProducerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProducerRequest.Merge(m, src)
}
func (m *QueryAllProducerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProducerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProducerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProducerRequest proto.InternalMessageInfo

func (m *QueryAllProducerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProducerResponse struct {
	Producer   []Producer          `protobuf:"bytes,1,rep,name=producer,proto3" json:"producer"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProducerResponse) Reset()         { *m = QueryAllProducerResponse{} }
func (m *QueryAllProducerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProducerResponse) ProtoMessage()    {}
func (*QueryAllProducerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{13}
}
func (m *QueryAllProducerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProducerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProducerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProducerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProducerResponse.Merge(m, src)
}
func (m *QueryAllProducerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProducerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProducerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProducerResponse proto.InternalMessageInfo

func (m *QueryAllProducerResponse) GetProducer() []Producer {
	if m != nil {
		return m.Producer
	}
	return nil
}

func (m *QueryAllProducerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSellerRequest struct {
	SellerId string `protobuf:"bytes,1,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
}

func (m *QueryGetSellerRequest) Reset()         { *m = QueryGetSellerRequest{} }
func (m *QueryGetSellerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSellerRequest) ProtoMessage()    {}
func (*QueryGetSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{14}
}
func (m *QueryGetSellerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSellerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSellerRequest.Merge(m, src)
}
func (m *QueryGetSellerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSellerRequest proto.InternalMessageInfo

func (m *QueryGetSellerRequest) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

type QueryGetSellerResponse struct {
	Seller Seller `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller"`
}

func (m *QueryGetSellerResponse) Reset()         { *m = QueryGetSellerResponse{} }
func (m *QueryGetSellerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSellerResponse) ProtoMessage()    {}
func (*QueryGetSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{15}
}
func (m *QueryGetSellerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSellerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSellerResponse.Merge(m, src)
}
func (m *QueryGetSellerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSellerResponse proto.InternalMessageInfo

func (m *QueryGetSellerResponse) GetSeller() Seller {
	if m != nil {
		return m.Seller
	}
	return Seller{}
}

type QueryAllSellerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSellerRequest) Reset()         { *m = QueryAllSellerRequest{} }
func (m *QueryAllSellerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSellerRequest) ProtoMessage()    {}
func (*QueryAllSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{16}
}
func (m *QueryAllSellerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSellerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSellerRequest.Merge(m, src)
}
func (m *QueryAllSellerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSellerRequest proto.InternalMessageInfo

func (m *QueryAllSellerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSellerResponse struct {
	Seller     []Seller            `protobuf:"bytes,1,rep,name=seller,proto3" json:"seller"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSellerResponse) Reset()         { *m = QueryAllSellerResponse{} }
func (m *QueryAllSellerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSellerResponse) ProtoMessage()    {}
func (*QueryAllSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{17}
}
func (m *QueryAllSellerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSellerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSellerResponse.Merge(m, src)
}
func (m *QueryAllSellerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSellerResponse proto.InternalMessageInfo

func (m *QueryAllSellerResponse) GetSeller() []Seller {
	if m != nil {
		return m.Seller
	}
	return nil
}

func (m *QueryAllSellerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReviewerRequest struct {
	AccAddr string `protobuf:"bytes,1,opt,name=accAddr,proto3" json:"accAddr,omitempty"`
}

func (m *QueryGetReviewerRequest) Reset()         { *m = QueryGetReviewerRequest{} }
func (m *QueryGetReviewerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReviewerRequest) ProtoMessage()    {}
func (*QueryGetReviewerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{18}
}
func (m *QueryGetReviewerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReviewerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReviewerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReviewerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReviewerRequest.Merge(m, src)
}
func (m *QueryGetReviewerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReviewerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReviewerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReviewerRequest proto.InternalMessageInfo

func (m *QueryGetReviewerRequest) GetAccAddr() string {
	if m != nil {
		return m.AccAddr
	}
	return ""
}

type QueryGetReviewerResponse struct {
	Reviewer Reviewer `protobuf:"bytes,1,opt,name=reviewer,proto3" json:"reviewer"`
}

func (m *QueryGetReviewerResponse) Reset()         { *m = QueryGetReviewerResponse{} }
func (m *QueryGetReviewerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReviewerResponse) ProtoMessage()    {}
func (*QueryGetReviewerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{19}
}
func (m *QueryGetReviewerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReviewerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReviewerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReviewerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReviewerResponse.Merge(m, src)
}
func (m *QueryGetReviewerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReviewerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReviewerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReviewerResponse proto.InternalMessageInfo

func (m *QueryGetReviewerResponse) GetReviewer() Reviewer {
	if m != nil {
		return m.Reviewer
	}
	return Reviewer{}
}

type QueryAllReviewerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReviewerRequest) Reset()         { *m = QueryAllReviewerRequest{} }
func (m *QueryAllReviewerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllReviewerRequest) ProtoMessage()    {}
func (*QueryAllReviewerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{20}
}
func (m *QueryAllReviewerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReviewerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReviewerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReviewerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReviewerRequest.Merge(m, src)
}
func (m *QueryAllReviewerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReviewerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReviewerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReviewerRequest proto.InternalMessageInfo

func (m *QueryAllReviewerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReviewerResponse struct {
	Reviewer   []Reviewer          `protobuf:"bytes,1,rep,name=reviewer,proto3" json:"reviewer"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReviewerResponse) Reset()         { *m = QueryAllReviewerResponse{} }
func (m *QueryAllReviewerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllReviewerResponse) ProtoMessage()    {}
func (*QueryAllReviewerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{21}
}
func (m *QueryAllReviewerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReviewerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReviewerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReviewerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReviewerResponse.Merge(m, src)
}
func (m *QueryAllReviewerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReviewerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReviewerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReviewerResponse proto.InternalMessageInfo

func (m *QueryAllReviewerResponse) GetReviewer() []Reviewer {
	if m != nil {
		return m.Reviewer
	}
	return nil
}

func (m *QueryAllReviewerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetVoterRequest struct {
	VoterId string `protobuf:"bytes,1,opt,name=voterId,proto3" json:"voterId,omitempty"`
}

func (m *QueryGetVoterRequest) Reset()         { *m = QueryGetVoterRequest{} }
func (m *QueryGetVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoterRequest) ProtoMessage()    {}
func (*QueryGetVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{22}
}
func (m *QueryGetVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoterRequest.Merge(m, src)
}
func (m *QueryGetVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoterRequest proto.InternalMessageInfo

func (m *QueryGetVoterRequest) GetVoterId() string {
	if m != nil {
		return m.VoterId
	}
	return ""
}

type QueryGetVoterResponse struct {
	Voter Voter `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter"`
}

func (m *QueryGetVoterResponse) Reset()         { *m = QueryGetVoterResponse{} }
func (m *QueryGetVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoterResponse) ProtoMessage()    {}
func (*QueryGetVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{23}
}
func (m *QueryGetVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoterResponse.Merge(m, src)
}
func (m *QueryGetVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoterResponse proto.InternalMessageInfo

func (m *QueryGetVoterResponse) GetVoter() Voter {
	if m != nil {
		return m.Voter
	}
	return Voter{}
}

type QueryAllVoterRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoterRequest) Reset()         { *m = QueryAllVoterRequest{} }
func (m *QueryAllVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoterRequest) ProtoMessage()    {}
func (*QueryAllVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{24}
}
func (m *QueryAllVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoterRequest.Merge(m, src)
}
func (m *QueryAllVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoterRequest proto.InternalMessageInfo

func (m *QueryAllVoterRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVoterResponse struct {
	Voter      []Voter             `protobuf:"bytes,1,rep,name=voter,proto3" json:"voter"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoterResponse) Reset()         { *m = QueryAllVoterResponse{} }
func (m *QueryAllVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoterResponse) ProtoMessage()    {}
func (*QueryAllVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{25}
}
func (m *QueryAllVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoterResponse.Merge(m, src)
}
func (m *QueryAllVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoterResponse proto.InternalMessageInfo

func (m *QueryAllVoterResponse) GetVoter() []Voter {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *QueryAllVoterResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetWhitelistRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetWhitelistRequest) Reset()         { *m = QueryGetWhitelistRequest{} }
func (m *QueryGetWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWhitelistRequest) ProtoMessage()    {}
func (*QueryGetWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{26}
}
func (m *QueryGetWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWhitelistRequest.Merge(m, src)
}
func (m *QueryGetWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWhitelistRequest proto.InternalMessageInfo

func (m *QueryGetWhitelistRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetWhitelistResponse struct {
	Whitelist Whitelist `protobuf:"bytes,1,opt,name=Whitelist,proto3" json:"Whitelist"`
}

func (m *QueryGetWhitelistResponse) Reset()         { *m = QueryGetWhitelistResponse{} }
func (m *QueryGetWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWhitelistResponse) ProtoMessage()    {}
func (*QueryGetWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{27}
}
func (m *QueryGetWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWhitelistResponse.Merge(m, src)
}
func (m *QueryGetWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWhitelistResponse proto.InternalMessageInfo

func (m *QueryGetWhitelistResponse) GetWhitelist() Whitelist {
	if m != nil {
		return m.Whitelist
	}
	return Whitelist{}
}

type QueryAllWhitelistRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWhitelistRequest) Reset()         { *m = QueryAllWhitelistRequest{} }
func (m *QueryAllWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllWhitelistRequest) ProtoMessage()    {}
func (*QueryAllWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{28}
}
func (m *QueryAllWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWhitelistRequest.Merge(m, src)
}
func (m *QueryAllWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWhitelistRequest proto.InternalMessageInfo

func (m *QueryAllWhitelistRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllWhitelistResponse struct {
	Whitelist  []Whitelist         `protobuf:"bytes,1,rep,name=Whitelist,proto3" json:"Whitelist"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWhitelistResponse) Reset()         { *m = QueryAllWhitelistResponse{} }
func (m *QueryAllWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllWhitelistResponse) ProtoMessage()    {}
func (*QueryAllWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{29}
}
func (m *QueryAllWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWhitelistResponse.Merge(m, src)
}
func (m *QueryAllWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWhitelistResponse proto.InternalMessageInfo

func (m *QueryAllWhitelistResponse) GetWhitelist() []Whitelist {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

func (m *QueryAllWhitelistResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMonoWhitelistRequest struct {
	WhitelistId string `protobuf:"bytes,1,opt,name=whitelistId,proto3" json:"whitelistId,omitempty"`
}

func (m *QueryGetMonoWhitelistRequest) Reset()         { *m = QueryGetMonoWhitelistRequest{} }
func (m *QueryGetMonoWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMonoWhitelistRequest) ProtoMessage()    {}
func (*QueryGetMonoWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{30}
}
func (m *QueryGetMonoWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMonoWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMonoWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMonoWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMonoWhitelistRequest.Merge(m, src)
}
func (m *QueryGetMonoWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMonoWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMonoWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMonoWhitelistRequest proto.InternalMessageInfo

func (m *QueryGetMonoWhitelistRequest) GetWhitelistId() string {
	if m != nil {
		return m.WhitelistId
	}
	return ""
}

type QueryGetMonoWhitelistResponse struct {
	MonoWhitelist MonoWhitelist `protobuf:"bytes,1,opt,name=monoWhitelist,proto3" json:"monoWhitelist"`
}

func (m *QueryGetMonoWhitelistResponse) Reset()         { *m = QueryGetMonoWhitelistResponse{} }
func (m *QueryGetMonoWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMonoWhitelistResponse) ProtoMessage()    {}
func (*QueryGetMonoWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{31}
}
func (m *QueryGetMonoWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMonoWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMonoWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMonoWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMonoWhitelistResponse.Merge(m, src)
}
func (m *QueryGetMonoWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMonoWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMonoWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMonoWhitelistResponse proto.InternalMessageInfo

func (m *QueryGetMonoWhitelistResponse) GetMonoWhitelist() MonoWhitelist {
	if m != nil {
		return m.MonoWhitelist
	}
	return MonoWhitelist{}
}

type QueryAllMonoWhitelistRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMonoWhitelistRequest) Reset()         { *m = QueryAllMonoWhitelistRequest{} }
func (m *QueryAllMonoWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMonoWhitelistRequest) ProtoMessage()    {}
func (*QueryAllMonoWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{32}
}
func (m *QueryAllMonoWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMonoWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMonoWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMonoWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMonoWhitelistRequest.Merge(m, src)
}
func (m *QueryAllMonoWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMonoWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMonoWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMonoWhitelistRequest proto.InternalMessageInfo

func (m *QueryAllMonoWhitelistRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMonoWhitelistResponse struct {
	MonoWhitelist []MonoWhitelist     `protobuf:"bytes,1,rep,name=monoWhitelist,proto3" json:"monoWhitelist"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMonoWhitelistResponse) Reset()         { *m = QueryAllMonoWhitelistResponse{} }
func (m *QueryAllMonoWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMonoWhitelistResponse) ProtoMessage()    {}
func (*QueryAllMonoWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae4e6c2632e3347, []int{33}
}
func (m *QueryAllMonoWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMonoWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMonoWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMonoWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMonoWhitelistResponse.Merge(m, src)
}
func (m *QueryAllMonoWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMonoWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMonoWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMonoWhitelistResponse proto.InternalMessageInfo

func (m *QueryAllMonoWhitelistResponse) GetMonoWhitelist() []MonoWhitelist {
	if m != nil {
		return m.MonoWhitelist
	}
	return nil
}

func (m *QueryAllMonoWhitelistResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "crowlabs.delta.whitelist.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "crowlabs.delta.whitelist.QueryParamsResponse")
	proto.RegisterType((*QueryGetUserRequest)(nil), "crowlabs.delta.whitelist.QueryGetUserRequest")
	proto.RegisterType((*QueryGetUserResponse)(nil), "crowlabs.delta.whitelist.QueryGetUserResponse")
	proto.RegisterType((*QueryAllUserRequest)(nil), "crowlabs.delta.whitelist.QueryAllUserRequest")
	proto.RegisterType((*QueryAllUserResponse)(nil), "crowlabs.delta.whitelist.QueryAllUserResponse")
	proto.RegisterType((*QueryGetBuyerRequest)(nil), "crowlabs.delta.whitelist.QueryGetBuyerRequest")
	proto.RegisterType((*QueryGetBuyerResponse)(nil), "crowlabs.delta.whitelist.QueryGetBuyerResponse")
	proto.RegisterType((*QueryAllBuyerRequest)(nil), "crowlabs.delta.whitelist.QueryAllBuyerRequest")
	proto.RegisterType((*QueryAllBuyerResponse)(nil), "crowlabs.delta.whitelist.QueryAllBuyerResponse")
	proto.RegisterType((*QueryGetProducerRequest)(nil), "crowlabs.delta.whitelist.QueryGetProducerRequest")
	proto.RegisterType((*QueryGetProducerResponse)(nil), "crowlabs.delta.whitelist.QueryGetProducerResponse")
	proto.RegisterType((*QueryAllProducerRequest)(nil), "crowlabs.delta.whitelist.QueryAllProducerRequest")
	proto.RegisterType((*QueryAllProducerResponse)(nil), "crowlabs.delta.whitelist.QueryAllProducerResponse")
	proto.RegisterType((*QueryGetSellerRequest)(nil), "crowlabs.delta.whitelist.QueryGetSellerRequest")
	proto.RegisterType((*QueryGetSellerResponse)(nil), "crowlabs.delta.whitelist.QueryGetSellerResponse")
	proto.RegisterType((*QueryAllSellerRequest)(nil), "crowlabs.delta.whitelist.QueryAllSellerRequest")
	proto.RegisterType((*QueryAllSellerResponse)(nil), "crowlabs.delta.whitelist.QueryAllSellerResponse")
	proto.RegisterType((*QueryGetReviewerRequest)(nil), "crowlabs.delta.whitelist.QueryGetReviewerRequest")
	proto.RegisterType((*QueryGetReviewerResponse)(nil), "crowlabs.delta.whitelist.QueryGetReviewerResponse")
	proto.RegisterType((*QueryAllReviewerRequest)(nil), "crowlabs.delta.whitelist.QueryAllReviewerRequest")
	proto.RegisterType((*QueryAllReviewerResponse)(nil), "crowlabs.delta.whitelist.QueryAllReviewerResponse")
	proto.RegisterType((*QueryGetVoterRequest)(nil), "crowlabs.delta.whitelist.QueryGetVoterRequest")
	proto.RegisterType((*QueryGetVoterResponse)(nil), "crowlabs.delta.whitelist.QueryGetVoterResponse")
	proto.RegisterType((*QueryAllVoterRequest)(nil), "crowlabs.delta.whitelist.QueryAllVoterRequest")
	proto.RegisterType((*QueryAllVoterResponse)(nil), "crowlabs.delta.whitelist.QueryAllVoterResponse")
	proto.RegisterType((*QueryGetWhitelistRequest)(nil), "crowlabs.delta.whitelist.QueryGetWhitelistRequest")
	proto.RegisterType((*QueryGetWhitelistResponse)(nil), "crowlabs.delta.whitelist.QueryGetWhitelistResponse")
	proto.RegisterType((*QueryAllWhitelistRequest)(nil), "crowlabs.delta.whitelist.QueryAllWhitelistRequest")
	proto.RegisterType((*QueryAllWhitelistResponse)(nil), "crowlabs.delta.whitelist.QueryAllWhitelistResponse")
	proto.RegisterType((*QueryGetMonoWhitelistRequest)(nil), "crowlabs.delta.whitelist.QueryGetMonoWhitelistRequest")
	proto.RegisterType((*QueryGetMonoWhitelistResponse)(nil), "crowlabs.delta.whitelist.QueryGetMonoWhitelistResponse")
	proto.RegisterType((*QueryAllMonoWhitelistRequest)(nil), "crowlabs.delta.whitelist.QueryAllMonoWhitelistRequest")
	proto.RegisterType((*QueryAllMonoWhitelistResponse)(nil), "crowlabs.delta.whitelist.QueryAllMonoWhitelistResponse")
}

func init() { proto.RegisterFile("whitelist/query.proto", fileDescriptor_8ae4e6c2632e3347) }

var fileDescriptor_8ae4e6c2632e3347 = []byte{
	// 1323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x99, 0x41, 0x6f, 0xdc, 0xc4,
	0x17, 0xc0, 0x33, 0xd9, 0x24, 0x4d, 0x26, 0xff, 0xfe, 0x85, 0x86, 0xa4, 0xa4, 0xab, 0xb2, 0x49,
	0x27, 0xd0, 0xb4, 0x69, 0x62, 0x37, 0x09, 0xb4, 0x20, 0x24, 0x20, 0x11, 0x6a, 0xc4, 0x01, 0x29,
	0x6c, 0x29, 0x20, 0x24, 0x28, 0xde, 0x5d, 0xb3, 0x5d, 0xc9, 0x59, 0x6f, 0xd7, 0xde, 0x84, 0x68,
	0xb5, 0x17, 0x3e, 0x41, 0x11, 0x42, 0xa2, 0x12, 0x1c, 0x7a, 0x40, 0xc0, 0x81, 0x2b, 0x37, 0x0e,
	0xdc, 0x7a, 0xac, 0xc4, 0x85, 0x13, 0x42, 0x49, 0x3f, 0x08, 0x9a, 0x99, 0x37, 0xf6, 0xd8, 0x6b,
	0xaf, 0xc7, 0xc1, 0xb9, 0xad, 0xed, 0xf7, 0xde, 0xfc, 0xde, 0x9b, 0x37, 0x6f, 0xde, 0x4b, 0xf0,
	0xfc, 0xe1, 0xfd, 0x96, 0x6f, 0x3b, 0x2d, 0xcf, 0x37, 0x1f, 0xf4, 0xec, 0xee, 0x91, 0xd1, 0xe9,
	0xba, 0xbe, 0x4b, 0x16, 0xea, 0x5d, 0xf7, 0xd0, 0xb1, 0x6a, 0x9e, 0xd1, 0xb0, 0x1d, 0xdf, 0x32,
	0x02, 0xa9, 0xf2, 0x5c, 0xd3, 0x6d, 0xba, 0x5c, 0xc8, 0x64, 0xbf, 0x84, 0x7c, 0xf9, 0x52, 0xd3,
	0x75, 0x9b, 0x8e, 0x6d, 0x5a, 0x9d, 0x96, 0x69, 0xb5, 0xdb, 0xae, 0x6f, 0xf9, 0x2d, 0xb7, 0xed,
	0xc1, 0xd7, 0xd5, 0xba, 0xeb, 0xed, 0xbb, 0x9e, 0x59, 0xb3, 0x3c, 0x5b, 0x2c, 0x63, 0x1e, 0x6c,
	0xd4, 0x6c, 0xdf, 0xda, 0x30, 0x3b, 0x56, 0xb3, 0xd5, 0xe6, 0xc2, 0x20, 0x7b, 0x21, 0x04, 0xea,
	0x58, 0x5d, 0x6b, 0x5f, 0xda, 0x98, 0x0b, 0xdf, 0xf7, 0x3c, 0xbb, 0x0b, 0x6f, 0x17, 0x14, 0xe9,
	0xae, 0xdb, 0xe8, 0xd5, 0x93, 0xbe, 0x74, 0xed, 0x83, 0x96, 0x7d, 0x18, 0x7c, 0xb9, 0x18, 0x7e,
	0x09, 0x7e, 0xc1, 0xa7, 0x4a, 0xf8, 0x69, 0xdf, 0x6d, 0xbb, 0xf7, 0xe2, 0xdf, 0x95, 0x68, 0x1d,
	0xb8, 0x7e, 0x60, 0x51, 0x61, 0xf6, 0x6c, 0xc7, 0x09, 0xde, 0x2b, 0xe2, 0xb5, 0xde, 0x91, 0x7c,
	0x4d, 0xe7, 0x30, 0x79, 0x9f, 0x05, 0x61, 0x8f, 0xfb, 0x57, 0xb5, 0x1f, 0xf4, 0x6c, 0xcf, 0xa7,
	0x77, 0xf1, 0xf3, 0x91, 0xb7, 0x5e, 0xc7, 0x6d, 0x7b, 0x36, 0x79, 0x13, 0x4f, 0x89, 0x38, 0x2c,
	0xa0, 0x25, 0x74, 0x75, 0x76, 0x73, 0xc9, 0x48, 0xdb, 0x1a, 0x43, 0x68, 0xee, 0x4c, 0x3c, 0xf9,
	0x7b, 0x71, 0xac, 0x0a, 0x5a, 0xd4, 0x04, 0xb3, 0xbb, 0xb6, 0x7f, 0xd7, 0xb3, 0xbb, 0xb0, 0x1a,
	0x59, 0xc0, 0xe7, 0xac, 0x7a, 0x7d, 0xbb, 0xd1, 0xe8, 0x72, 0xbb, 0x33, 0x55, 0xf9, 0x48, 0xf7,
	0xf0, 0x5c, 0x54, 0x01, 0x40, 0x5e, 0xc3, 0x13, 0x2c, 0xf0, 0x80, 0x51, 0x49, 0xc7, 0x60, 0x5a,
	0x00, 0xc1, 0x35, 0xe8, 0xa7, 0x80, 0xb0, 0xed, 0x38, 0x2a, 0xc2, 0x6d, 0x8c, 0xc3, 0xdd, 0x07,
	0xb3, 0x57, 0x0c, 0x91, 0x2a, 0x06, 0x4b, 0x15, 0x43, 0x64, 0x24, 0xa4, 0x8a, 0xb1, 0x67, 0x35,
	0x6d, 0xd0, 0xad, 0x2a, 0x9a, 0xf4, 0x11, 0x02, 0xe2, 0xc0, 0xfe, 0x10, 0x71, 0x29, 0x1f, 0x31,
	0xd9, 0x8d, 0xa0, 0x8d, 0x73, 0xb4, 0x95, 0x4c, 0x34, 0xb1, 0x6c, 0x84, 0xed, 0x46, 0x18, 0xcc,
	0x1d, 0x96, 0x01, 0x4a, 0xf8, 0x79, 0x46, 0xbc, 0xdb, 0x90, 0xe1, 0x87, 0x47, 0xfa, 0x01, 0x9e,
	0x8f, 0x69, 0x80, 0x37, 0x6f, 0xe0, 0x49, 0x2e, 0x03, 0x91, 0x5a, 0x4c, 0x77, 0x87, 0xeb, 0x81,
	0x3f, 0x42, 0x87, 0x7e, 0x16, 0x86, 0x28, 0xc2, 0x51, 0xd4, 0x1e, 0xfc, 0x80, 0x00, 0x3b, 0x5c,
	0x60, 0x18, 0xbb, 0x94, 0x17, 0xbb, 0xb8, 0x7d, 0xd8, 0xc2, 0x2f, 0xc8, 0xa8, 0xee, 0x41, 0x9d,
	0xc8, 0x3e, 0x09, 0x9f, 0xe3, 0x85, 0x61, 0x25, 0x70, 0xeb, 0x1d, 0x3c, 0x2d, 0x0b, 0x0e, 0x84,
	0x8d, 0x8e, 0x38, 0x98, 0x20, 0x09, 0xce, 0x05, 0x9a, 0xd4, 0x02, 0xac, 0x6d, 0xc7, 0x89, 0x63,
	0x15, 0xb5, 0x33, 0xbf, 0x20, 0xf0, 0x22, 0xb2, 0x46, 0xa2, 0x17, 0xa5, 0xd3, 0x79, 0x51, 0xe4,
	0x2e, 0x05, 0xb9, 0x7f, 0x87, 0xd7, 0x51, 0x19, 0x8c, 0x32, 0x9e, 0x16, 0x85, 0x35, 0x38, 0x2f,
	0xc1, 0x33, 0xfd, 0x18, 0x5f, 0x88, 0x2b, 0x85, 0xa5, 0x53, 0x48, 0x65, 0x97, 0x4e, 0xa1, 0x29,
	0x4b, 0xa7, 0xd0, 0xa2, 0xf7, 0xc2, 0x9c, 0x8e, 0xe2, 0x14, 0xb5, 0x37, 0x8f, 0x11, 0xb0, 0x2b,
	0x2b, 0x24, 0xb0, 0x97, 0xf2, 0xb3, 0x9f, 0xc9, 0xc9, 0xa9, 0xc2, 0x3d, 0x9a, 0xeb, 0xe4, 0x84,
	0x4a, 0x61, 0xce, 0xc9, 0x0b, 0x39, 0xfb, 0xe4, 0x48, 0x6d, 0x99, 0x73, 0x52, 0x53, 0x3d, 0x39,
	0x71, 0xac, 0xb3, 0x38, 0x39, 0x19, 0x5e, 0x94, 0x4e, 0xe7, 0xc5, 0x99, 0xdc, 0x33, 0x1f, 0xb2,
	0xc6, 0x44, 0xd9, 0x22, 0xde, 0xa8, 0x84, 0xf7, 0x0c, 0x3c, 0xaa, 0xf7, 0x0c, 0x68, 0x84, 0x05,
	0x9b, 0xcb, 0x64, 0xdf, 0x33, 0x5c, 0x4f, 0x16, 0x6c, 0xae, 0xa3, 0xde, 0x33, 0x11, 0x8e, 0xb3,
	0xb8, 0x67, 0x52, 0xb1, 0x4b, 0x79, 0xb1, 0x8b, 0xdb, 0x87, 0xd5, 0x30, 0xf1, 0x3f, 0x92, 0x0b,
	0xca, 0x18, 0xfc, 0x1f, 0x8f, 0xb7, 0xc4, 0x36, 0x4c, 0x54, 0xc7, 0x5b, 0x0d, 0xda, 0xc0, 0x17,
	0x13, 0x64, 0xc1, 0x9d, 0x5d, 0x3c, 0x13, 0xbc, 0x84, 0x78, 0x2d, 0xa7, 0xbb, 0x14, 0x88, 0x82,
	0x5b, 0xa1, 0x2e, 0xad, 0x85, 0x49, 0x3c, 0x44, 0x54, 0xd4, 0xae, 0xfc, 0x8a, 0xc0, 0x95, 0xe8,
	0x22, 0xc9, 0xae, 0x94, 0x4e, 0xeb, 0x4a, 0x71, 0xbb, 0xf4, 0x36, 0xbe, 0x24, 0x23, 0xff, 0x9e,
	0xdb, 0x76, 0x87, 0xe2, 0xb2, 0x84, 0x67, 0x03, 0xa0, 0xe0, 0xe4, 0xa8, 0xaf, 0xa8, 0x8f, 0x5f,
	0x4c, 0xb1, 0x00, 0x4e, 0xdf, 0xc1, 0xe7, 0xf7, 0xd5, 0x0f, 0x10, 0xdd, 0x95, 0x74, 0xc7, 0x23,
	0x76, 0xc0, 0xf9, 0xa8, 0x0d, 0xfa, 0x05, 0x70, 0x6f, 0x3b, 0x4e, 0x22, 0x77, 0x51, 0xfb, 0xf9,
	0x3b, 0x02, 0xf7, 0x86, 0x17, 0x4a, 0x77, 0xaf, 0xf4, 0x5f, 0xdd, 0x2b, 0x6c, 0x7f, 0x37, 0x9f,
	0xcd, 0xe3, 0x49, 0xce, 0x4f, 0x1e, 0x22, 0x3c, 0x25, 0xc6, 0x22, 0xb2, 0x96, 0xce, 0x36, 0x3c,
	0x8d, 0x95, 0xd7, 0x35, 0xa5, 0xc5, 0xea, 0xf4, 0xda, 0x57, 0x7f, 0x3e, 0xfb, 0x66, 0x7c, 0x99,
	0x5c, 0x36, 0x99, 0xda, 0x3a, 0xd3, 0x33, 0xb9, 0x9e, 0x19, 0x1f, 0x67, 0xc9, 0x77, 0x08, 0x4f,
	0xb0, 0x81, 0x83, 0x64, 0x2d, 0x11, 0x9d, 0xd8, 0xca, 0x86, 0xae, 0x38, 0x20, 0x6d, 0x70, 0xa4,
	0xeb, 0xe4, 0xda, 0x08, 0x24, 0x36, 0xec, 0x98, 0x7d, 0xb8, 0xb5, 0x07, 0xe4, 0x6b, 0x84, 0xcf,
	0x31, 0x1b, 0xdb, 0x8e, 0x93, 0x49, 0x17, 0x1d, 0xe6, 0x32, 0xe9, 0x62, 0xb3, 0x19, 0x5d, 0xe1,
	0x74, 0x97, 0xc9, 0x62, 0x06, 0x1d, 0xf9, 0x1e, 0xe1, 0x49, 0x3e, 0x19, 0x10, 0x8d, 0x00, 0xa8,
	0xb3, 0x4d, 0xd9, 0xd4, 0x96, 0x07, 0xa6, 0x4d, 0xce, 0xb4, 0x46, 0x56, 0x47, 0x30, 0xf1, 0xb9,
	0xc4, 0xec, 0xc3, 0xb4, 0x36, 0x20, 0xdf, 0x22, 0x3c, 0xcd, 0xad, 0xb0, 0x98, 0x69, 0x04, 0x21,
	0x17, 0x61, 0x7c, 0x98, 0xa2, 0x57, 0x39, 0x21, 0x25, 0x4b, 0x59, 0x84, 0xe4, 0x67, 0x84, 0xa7,
	0x65, 0xc3, 0x4e, 0x36, 0xb2, 0x23, 0x11, 0x1b, 0x3f, 0xca, 0x9b, 0x79, 0x54, 0x80, 0xee, 0x55,
	0x4e, 0x67, 0x92, 0xf5, 0x51, 0x87, 0x00, 0x94, 0x94, 0xac, 0x7b, 0x8c, 0xf0, 0xac, 0xb4, 0xc5,
	0xa2, 0xb8, 0x91, 0x1d, 0x95, 0xbc, 0xb4, 0x09, 0xb3, 0x0f, 0xbd, 0xce, 0x69, 0x5f, 0x26, 0xcb,
	0x1a, 0xb4, 0x8c, 0x71, 0x4a, 0xf4, 0xd9, 0x44, 0x23, 0xad, 0x22, 0xd3, 0x42, 0xf9, 0x86, 0xbe,
	0x02, 0xa0, 0xbd, 0xc2, 0xd1, 0x0c, 0xb2, 0x36, 0x02, 0x4d, 0xf4, 0xf9, 0x66, 0x5f, 0xce, 0x41,
	0x03, 0xf2, 0x08, 0xe1, 0x19, 0x61, 0x88, 0x45, 0x51, 0x23, 0xb7, 0xf2, 0x61, 0x0e, 0xcd, 0x28,
	0x5a, 0x45, 0x0f, 0xc6, 0x11, 0x96, 0x8e, 0xb2, 0x0b, 0xd6, 0x49, 0xc7, 0x58, 0x4f, 0xaf, 0x93,
	0x8e, 0xf1, 0x16, 0x5d, 0x2b, 0x1d, 0x65, 0x27, 0x1e, 0x4b, 0x47, 0x69, 0x4b, 0x33, 0x1d, 0xf3,
	0xd2, 0x26, 0x0c, 0x14, 0x5a, 0xe9, 0x18, 0xcc, 0x0d, 0xac, 0x28, 0xf2, 0x36, 0x56, 0xa7, 0x28,
	0xaa, 0x8d, 0xb8, 0x4e, 0x51, 0x8c, 0xf4, 0xd5, 0x5a, 0x45, 0x91, 0x37, 0xd1, 0x66, 0x1f, 0x46,
	0x0b, 0x51, 0x14, 0xb9, 0x15, 0xcd, 0xa2, 0x98, 0x8b, 0x30, 0xde, 0xf9, 0x6b, 0x15, 0x45, 0xd1,
	0xe6, 0xff, 0x84, 0x94, 0x56, 0x94, 0x68, 0xe4, 0x54, 0xbc, 0xc3, 0x2a, 0x6f, 0xe5, 0xd2, 0xc9,
	0x71, 0x13, 0x87, 0xbf, 0xfa, 0xad, 0xc6, 0x80, 0xfc, 0x88, 0xf0, 0xff, 0x02, 0x43, 0x2c, 0x8a,
	0x1a, 0x29, 0x95, 0x1b, 0x36, 0xa9, 0x5b, 0xa7, 0x6b, 0x1c, 0xf6, 0x0a, 0x79, 0x49, 0x07, 0x96,
	0xfc, 0x81, 0xf0, 0xf9, 0x48, 0x67, 0x47, 0x6e, 0x66, 0x47, 0x28, 0xa9, 0x77, 0x2d, 0xdf, 0xca,
	0xad, 0x07, 0xc0, 0x6f, 0x71, 0xe0, 0xd7, 0xc9, 0xad, 0x11, 0xc0, 0xd1, 0x3f, 0xe6, 0x9b, 0x7d,
	0xa5, 0x95, 0x1f, 0x90, 0xdf, 0x10, 0x7e, 0x2e, 0x62, 0x9a, 0xc5, 0xfb, 0x66, 0x76, 0xec, 0x4e,
	0xe5, 0x46, 0x5a, 0x47, 0xad, 0x95, 0x24, 0x51, 0x37, 0x76, 0x6e, 0x3f, 0x39, 0xae, 0xa0, 0xa7,
	0xc7, 0x15, 0xf4, 0xcf, 0x71, 0x05, 0x3d, 0x3c, 0xa9, 0x8c, 0x3d, 0x3d, 0xa9, 0x8c, 0xfd, 0x75,
	0x52, 0x19, 0xfb, 0x64, 0xad, 0xd9, 0xf2, 0xef, 0xf7, 0x6a, 0x46, 0xdd, 0xdd, 0x1f, 0x32, 0xf7,
	0xa5, 0x62, 0xd0, 0x3f, 0xea, 0xd8, 0x5e, 0x6d, 0x8a, 0xff, 0x5b, 0x62, 0xeb, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x59, 0xc1, 0x75, 0xc6, 0x0c, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a User by index.
	User(ctx context.Context, in *QueryGetUserRequest, opts ...grpc.CallOption) (*QueryGetUserResponse, error)
	// Queries a list of User items.
	UserAll(ctx context.Context, in *QueryAllUserRequest, opts ...grpc.CallOption) (*QueryAllUserResponse, error)
	// Queries a Buyer by index.
	Buyer(ctx context.Context, in *QueryGetBuyerRequest, opts ...grpc.CallOption) (*QueryGetBuyerResponse, error)
	// Queries a list of Buyer items.
	BuyerAll(ctx context.Context, in *QueryAllBuyerRequest, opts ...grpc.CallOption) (*QueryAllBuyerResponse, error)
	// Queries a Producer by index.
	Producer(ctx context.Context, in *QueryGetProducerRequest, opts ...grpc.CallOption) (*QueryGetProducerResponse, error)
	// Queries a list of Producer items.
	ProducerAll(ctx context.Context, in *QueryAllProducerRequest, opts ...grpc.CallOption) (*QueryAllProducerResponse, error)
	// Queries a Seller by index.
	Seller(ctx context.Context, in *QueryGetSellerRequest, opts ...grpc.CallOption) (*QueryGetSellerResponse, error)
	// Queries a list of Seller items.
	SellerAll(ctx context.Context, in *QueryAllSellerRequest, opts ...grpc.CallOption) (*QueryAllSellerResponse, error)
	// Queries a Reviewer by index.
	Reviewer(ctx context.Context, in *QueryGetReviewerRequest, opts ...grpc.CallOption) (*QueryGetReviewerResponse, error)
	// Queries a list of Reviewer items.
	ReviewerAll(ctx context.Context, in *QueryAllReviewerRequest, opts ...grpc.CallOption) (*QueryAllReviewerResponse, error)
	// Queries a Voter by index.
	Voter(ctx context.Context, in *QueryGetVoterRequest, opts ...grpc.CallOption) (*QueryGetVoterResponse, error)
	// Queries a list of Voter items.
	VoterAll(ctx context.Context, in *QueryAllVoterRequest, opts ...grpc.CallOption) (*QueryAllVoterResponse, error)
	// Queries a Whitelist by id.
	Whitelist(ctx context.Context, in *QueryGetWhitelistRequest, opts ...grpc.CallOption) (*QueryGetWhitelistResponse, error)
	// Queries a list of Whitelist items.
	WhitelistAll(ctx context.Context, in *QueryAllWhitelistRequest, opts ...grpc.CallOption) (*QueryAllWhitelistResponse, error)
	// Queries a MonoWhitelist by index.
	MonoWhitelist(ctx context.Context, in *QueryGetMonoWhitelistRequest, opts ...grpc.CallOption) (*QueryGetMonoWhitelistResponse, error)
	// Queries a list of MonoWhitelist items.
	MonoWhitelistAll(ctx context.Context, in *QueryAllMonoWhitelistRequest, opts ...grpc.CallOption) (*QueryAllMonoWhitelistResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) User(ctx context.Context, in *QueryGetUserRequest, opts ...grpc.CallOption) (*QueryGetUserResponse, error) {
	out := new(QueryGetUserResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserAll(ctx context.Context, in *QueryAllUserRequest, opts ...grpc.CallOption) (*QueryAllUserResponse, error) {
	out := new(QueryAllUserResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/UserAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Buyer(ctx context.Context, in *QueryGetBuyerRequest, opts ...grpc.CallOption) (*QueryGetBuyerResponse, error) {
	out := new(QueryGetBuyerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/Buyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyerAll(ctx context.Context, in *QueryAllBuyerRequest, opts ...grpc.CallOption) (*QueryAllBuyerResponse, error) {
	out := new(QueryAllBuyerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/BuyerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Producer(ctx context.Context, in *QueryGetProducerRequest, opts ...grpc.CallOption) (*QueryGetProducerResponse, error) {
	out := new(QueryGetProducerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/Producer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProducerAll(ctx context.Context, in *QueryAllProducerRequest, opts ...grpc.CallOption) (*QueryAllProducerResponse, error) {
	out := new(QueryAllProducerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/ProducerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Seller(ctx context.Context, in *QueryGetSellerRequest, opts ...grpc.CallOption) (*QueryGetSellerResponse, error) {
	out := new(QueryGetSellerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/Seller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SellerAll(ctx context.Context, in *QueryAllSellerRequest, opts ...grpc.CallOption) (*QueryAllSellerResponse, error) {
	out := new(QueryAllSellerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/SellerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reviewer(ctx context.Context, in *QueryGetReviewerRequest, opts ...grpc.CallOption) (*QueryGetReviewerResponse, error) {
	out := new(QueryGetReviewerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/Reviewer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReviewerAll(ctx context.Context, in *QueryAllReviewerRequest, opts ...grpc.CallOption) (*QueryAllReviewerResponse, error) {
	out := new(QueryAllReviewerResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/ReviewerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Voter(ctx context.Context, in *QueryGetVoterRequest, opts ...grpc.CallOption) (*QueryGetVoterResponse, error) {
	out := new(QueryGetVoterResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/Voter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoterAll(ctx context.Context, in *QueryAllVoterRequest, opts ...grpc.CallOption) (*QueryAllVoterResponse, error) {
	out := new(QueryAllVoterResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/VoterAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Whitelist(ctx context.Context, in *QueryGetWhitelistRequest, opts ...grpc.CallOption) (*QueryGetWhitelistResponse, error) {
	out := new(QueryGetWhitelistResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/Whitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WhitelistAll(ctx context.Context, in *QueryAllWhitelistRequest, opts ...grpc.CallOption) (*QueryAllWhitelistResponse, error) {
	out := new(QueryAllWhitelistResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/WhitelistAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MonoWhitelist(ctx context.Context, in *QueryGetMonoWhitelistRequest, opts ...grpc.CallOption) (*QueryGetMonoWhitelistResponse, error) {
	out := new(QueryGetMonoWhitelistResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/MonoWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MonoWhitelistAll(ctx context.Context, in *QueryAllMonoWhitelistRequest, opts ...grpc.CallOption) (*QueryAllMonoWhitelistResponse, error) {
	out := new(QueryAllMonoWhitelistResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.whitelist.Query/MonoWhitelistAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a User by index.
	User(context.Context, *QueryGetUserRequest) (*QueryGetUserResponse, error)
	// Queries a list of User items.
	UserAll(context.Context, *QueryAllUserRequest) (*QueryAllUserResponse, error)
	// Queries a Buyer by index.
	Buyer(context.Context, *QueryGetBuyerRequest) (*QueryGetBuyerResponse, error)
	// Queries a list of Buyer items.
	BuyerAll(context.Context, *QueryAllBuyerRequest) (*QueryAllBuyerResponse, error)
	// Queries a Producer by index.
	Producer(context.Context, *QueryGetProducerRequest) (*QueryGetProducerResponse, error)
	// Queries a list of Producer items.
	ProducerAll(context.Context, *QueryAllProducerRequest) (*QueryAllProducerResponse, error)
	// Queries a Seller by index.
	Seller(context.Context, *QueryGetSellerRequest) (*QueryGetSellerResponse, error)
	// Queries a list of Seller items.
	SellerAll(context.Context, *QueryAllSellerRequest) (*QueryAllSellerResponse, error)
	// Queries a Reviewer by index.
	Reviewer(context.Context, *QueryGetReviewerRequest) (*QueryGetReviewerResponse, error)
	// Queries a list of Reviewer items.
	ReviewerAll(context.Context, *QueryAllReviewerRequest) (*QueryAllReviewerResponse, error)
	// Queries a Voter by index.
	Voter(context.Context, *QueryGetVoterRequest) (*QueryGetVoterResponse, error)
	// Queries a list of Voter items.
	VoterAll(context.Context, *QueryAllVoterRequest) (*QueryAllVoterResponse, error)
	// Queries a Whitelist by id.
	Whitelist(context.Context, *QueryGetWhitelistRequest) (*QueryGetWhitelistResponse, error)
	// Queries a list of Whitelist items.
	WhitelistAll(context.Context, *QueryAllWhitelistRequest) (*QueryAllWhitelistResponse, error)
	// Queries a MonoWhitelist by index.
	MonoWhitelist(context.Context, *QueryGetMonoWhitelistRequest) (*QueryGetMonoWhitelistResponse, error)
	// Queries a list of MonoWhitelist items.
	MonoWhitelistAll(context.Context, *QueryAllMonoWhitelistRequest) (*QueryAllMonoWhitelistResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) User(ctx context.Context, req *QueryGetUserRequest) (*QueryGetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (*UnimplementedQueryServer) UserAll(ctx context.Context, req *QueryAllUserRequest) (*QueryAllUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAll not implemented")
}
func (*UnimplementedQueryServer) Buyer(ctx context.Context, req *QueryGetBuyerRequest) (*QueryGetBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buyer not implemented")
}
func (*UnimplementedQueryServer) BuyerAll(ctx context.Context, req *QueryAllBuyerRequest) (*QueryAllBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyerAll not implemented")
}
func (*UnimplementedQueryServer) Producer(ctx context.Context, req *QueryGetProducerRequest) (*QueryGetProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Producer not implemented")
}
func (*UnimplementedQueryServer) ProducerAll(ctx context.Context, req *QueryAllProducerRequest) (*QueryAllProducerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProducerAll not implemented")
}
func (*UnimplementedQueryServer) Seller(ctx context.Context, req *QueryGetSellerRequest) (*QueryGetSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Seller not implemented")
}
func (*UnimplementedQueryServer) SellerAll(ctx context.Context, req *QueryAllSellerRequest) (*QueryAllSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerAll not implemented")
}
func (*UnimplementedQueryServer) Reviewer(ctx context.Context, req *QueryGetReviewerRequest) (*QueryGetReviewerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reviewer not implemented")
}
func (*UnimplementedQueryServer) ReviewerAll(ctx context.Context, req *QueryAllReviewerRequest) (*QueryAllReviewerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewerAll not implemented")
}
func (*UnimplementedQueryServer) Voter(ctx context.Context, req *QueryGetVoterRequest) (*QueryGetVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Voter not implemented")
}
func (*UnimplementedQueryServer) VoterAll(ctx context.Context, req *QueryAllVoterRequest) (*QueryAllVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoterAll not implemented")
}
func (*UnimplementedQueryServer) Whitelist(ctx context.Context, req *QueryGetWhitelistRequest) (*QueryGetWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whitelist not implemented")
}
func (*UnimplementedQueryServer) WhitelistAll(ctx context.Context, req *QueryAllWhitelistRequest) (*QueryAllWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistAll not implemented")
}
func (*UnimplementedQueryServer) MonoWhitelist(ctx context.Context, req *QueryGetMonoWhitelistRequest) (*QueryGetMonoWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonoWhitelist not implemented")
}
func (*UnimplementedQueryServer) MonoWhitelistAll(ctx context.Context, req *QueryAllMonoWhitelistRequest) (*QueryAllMonoWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonoWhitelistAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).User(ctx, req.(*QueryGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/UserAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserAll(ctx, req.(*QueryAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Buyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Buyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/Buyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Buyer(ctx, req.(*QueryGetBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/BuyerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyerAll(ctx, req.(*QueryAllBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Producer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Producer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/Producer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Producer(ctx, req.(*QueryGetProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProducerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProducerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/ProducerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProducerAll(ctx, req.(*QueryAllProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Seller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Seller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/Seller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Seller(ctx, req.(*QueryGetSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SellerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SellerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/SellerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SellerAll(ctx, req.(*QueryAllSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reviewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReviewerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reviewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/Reviewer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reviewer(ctx, req.(*QueryGetReviewerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReviewerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReviewerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReviewerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/ReviewerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReviewerAll(ctx, req.(*QueryAllReviewerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Voter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Voter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/Voter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Voter(ctx, req.(*QueryGetVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoterAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoterAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/VoterAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoterAll(ctx, req.(*QueryAllVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Whitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Whitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/Whitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Whitelist(ctx, req.(*QueryGetWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WhitelistAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WhitelistAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/WhitelistAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WhitelistAll(ctx, req.(*QueryAllWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MonoWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMonoWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MonoWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/MonoWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MonoWhitelist(ctx, req.(*QueryGetMonoWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MonoWhitelistAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMonoWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MonoWhitelistAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.whitelist.Query/MonoWhitelistAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MonoWhitelistAll(ctx, req.(*QueryAllMonoWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crowlabs.delta.whitelist.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "User",
			Handler:    _Query_User_Handler,
		},
		{
			MethodName: "UserAll",
			Handler:    _Query_UserAll_Handler,
		},
		{
			MethodName: "Buyer",
			Handler:    _Query_Buyer_Handler,
		},
		{
			MethodName: "BuyerAll",
			Handler:    _Query_BuyerAll_Handler,
		},
		{
			MethodName: "Producer",
			Handler:    _Query_Producer_Handler,
		},
		{
			MethodName: "ProducerAll",
			Handler:    _Query_ProducerAll_Handler,
		},
		{
			MethodName: "Seller",
			Handler:    _Query_Seller_Handler,
		},
		{
			MethodName: "SellerAll",
			Handler:    _Query_SellerAll_Handler,
		},
		{
			MethodName: "Reviewer",
			Handler:    _Query_Reviewer_Handler,
		},
		{
			MethodName: "ReviewerAll",
			Handler:    _Query_ReviewerAll_Handler,
		},
		{
			MethodName: "Voter",
			Handler:    _Query_Voter_Handler,
		},
		{
			MethodName: "VoterAll",
			Handler:    _Query_VoterAll_Handler,
		},
		{
			MethodName: "Whitelist",
			Handler:    _Query_Whitelist_Handler,
		},
		{
			MethodName: "WhitelistAll",
			Handler:    _Query_WhitelistAll_Handler,
		},
		{
			MethodName: "MonoWhitelist",
			Handler:    _Query_MonoWhitelist_Handler,
		},
		{
			MethodName: "MonoWhitelistAll",
			Handler:    _Query_MonoWhitelistAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whitelist/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccAddr) > 0 {
		i -= len(m.AccAddr)
		copy(dAtA[i:], m.AccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		for iNdEx := len(m.User) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.User[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBuyerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBuyerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBuyerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyerId) > 0 {
		i -= len(m.BuyerId)
		copy(dAtA[i:], m.BuyerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BuyerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBuyerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBuyerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBuyerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Buyer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBuyerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBuyerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBuyerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBuyerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBuyerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBuyerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		for iNdEx := len(m.Buyer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buyer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProducerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProducerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProducerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccAddr) > 0 {
		i -= len(m.AccAddr)
		copy(dAtA[i:], m.AccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProducerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProducerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProducerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Producer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProducerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProducerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProducerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProducerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProducerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProducerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Producer) > 0 {
		for iNdEx := len(m.Producer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Producer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSellerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSellerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSellerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSellerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSellerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSellerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Seller.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSellerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSellerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSellerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSellerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSellerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSellerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		for iNdEx := len(m.Seller) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seller[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReviewerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReviewerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReviewerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccAddr) > 0 {
		i -= len(m.AccAddr)
		copy(dAtA[i:], m.AccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReviewerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReviewerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReviewerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reviewer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllReviewerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReviewerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReviewerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReviewerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReviewerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReviewerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reviewer) > 0 {
		for iNdEx := len(m.Reviewer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reviewer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterId) > 0 {
		i -= len(m.VoterId)
		copy(dAtA[i:], m.VoterId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VoterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Voter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Voter) > 0 {
		for iNdEx := len(m.Voter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Voter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Whitelist.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Whitelist) > 0 {
		for iNdEx := len(m.Whitelist) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Whitelist[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMonoWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMonoWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMonoWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistId) > 0 {
		i -= len(m.WhitelistId)
		copy(dAtA[i:], m.WhitelistId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WhitelistId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMonoWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMonoWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMonoWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MonoWhitelist.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMonoWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMonoWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMonoWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMonoWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMonoWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMonoWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MonoWhitelist) > 0 {
		for iNdEx := len(m.MonoWhitelist) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MonoWhitelist[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.User.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.User) > 0 {
		for _, e := range m.User {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBuyerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBuyerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Buyer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBuyerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBuyerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Buyer) > 0 {
		for _, e := range m.Buyer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProducerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProducerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Producer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProducerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProducerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Producer) > 0 {
		for _, e := range m.Producer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSellerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSellerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Seller.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSellerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSellerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Seller) > 0 {
		for _, e := range m.Seller {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReviewerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReviewerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reviewer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllReviewerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReviewerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reviewer) > 0 {
		for _, e := range m.Reviewer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoterId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Voter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Voter) > 0 {
		for _, e := range m.Voter {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Whitelist.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Whitelist) > 0 {
		for _, e := range m.Whitelist {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMonoWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WhitelistId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMonoWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MonoWhitelist.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMonoWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMonoWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MonoWhitelist) > 0 {
		for _, e := range m.MonoWhitelist {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = append(m.User, User{})
			if err := m.User[len(m.User)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBuyerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBuyerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBuyerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBuyerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBuyerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBuyerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Buyer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBuyerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBuyerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBuyerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBuyerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBuyerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBuyerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = append(m.Buyer, Buyer{})
			if err := m.Buyer[len(m.Buyer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProducerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProducerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProducerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProducerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProducerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProducerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Producer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProducerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProducerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProducerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProducerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProducerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProducerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Producer = append(m.Producer, Producer{})
			if err := m.Producer[len(m.Producer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSellerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSellerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSellerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSellerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSellerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSellerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Seller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSellerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSellerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSellerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSellerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSellerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSellerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = append(m.Seller, Seller{})
			if err := m.Seller[len(m.Seller)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReviewerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReviewerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReviewerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReviewerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReviewerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReviewerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reviewer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reviewer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReviewerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReviewerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReviewerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReviewerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReviewerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReviewerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reviewer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reviewer = append(m.Reviewer, Reviewer{})
			if err := m.Reviewer[len(m.Reviewer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Voter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter, Voter{})
			if err := m.Voter[len(m.Voter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Whitelist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whitelist = append(m.Whitelist, Whitelist{})
			if err := m.Whitelist[len(m.Whitelist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMonoWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMonoWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMonoWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMonoWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMonoWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMonoWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonoWhitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MonoWhitelist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMonoWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMonoWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMonoWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMonoWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMonoWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMonoWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonoWhitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonoWhitelist = append(m.MonoWhitelist, MonoWhitelist{})
			if err := m.MonoWhitelist[len(m.MonoWhitelist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
