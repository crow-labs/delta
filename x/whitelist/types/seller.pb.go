// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: whitelist/seller.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Seller struct {
	SellerId    string   `protobuf:"bytes,1,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc        string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	ContactInfo string   `protobuf:"bytes,4,opt,name=contactInfo,proto3" json:"contactInfo,omitempty"`
	NumListing  uint64   `protobuf:"varint,5,opt,name=numListing,proto3" json:"numListing,omitempty"`
	ListingId   []string `protobuf:"bytes,6,rep,name=listingId,proto3" json:"listingId,omitempty"`
	Status      string   `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Producer    string   `protobuf:"bytes,8,opt,name=producer,proto3" json:"producer,omitempty"`
}

func (m *Seller) Reset()         { *m = Seller{} }
func (m *Seller) String() string { return proto.CompactTextString(m) }
func (*Seller) ProtoMessage()    {}
func (*Seller) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddc1456fe49128dc, []int{0}
}
func (m *Seller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Seller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Seller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Seller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Seller.Merge(m, src)
}
func (m *Seller) XXX_Size() int {
	return m.Size()
}
func (m *Seller) XXX_DiscardUnknown() {
	xxx_messageInfo_Seller.DiscardUnknown(m)
}

var xxx_messageInfo_Seller proto.InternalMessageInfo

func (m *Seller) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

func (m *Seller) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Seller) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Seller) GetContactInfo() string {
	if m != nil {
		return m.ContactInfo
	}
	return ""
}

func (m *Seller) GetNumListing() uint64 {
	if m != nil {
		return m.NumListing
	}
	return 0
}

func (m *Seller) GetListingId() []string {
	if m != nil {
		return m.ListingId
	}
	return nil
}

func (m *Seller) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Seller) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func init() {
	proto.RegisterType((*Seller)(nil), "crowlabs.delta.whitelist.Seller")
}

func init() { proto.RegisterFile("whitelist/seller.proto", fileDescriptor_ddc1456fe49128dc) }

var fileDescriptor_ddc1456fe49128dc = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x6b, 0x1a, 0x42, 0x63, 0x36, 0x0f, 0x95, 0x85, 0x90, 0x15, 0x31, 0x65, 0x80, 0x64,
	0xe0, 0x06, 0x0c, 0x48, 0x91, 0x98, 0xc2, 0xc6, 0x96, 0x38, 0xa6, 0xb5, 0xe4, 0xd8, 0x91, 0xfd,
	0xa2, 0xc2, 0x2d, 0x38, 0x16, 0x63, 0x47, 0xc6, 0x2a, 0xb9, 0x08, 0xb2, 0x03, 0x6d, 0xb7, 0xff,
	0xff, 0xfc, 0xfc, 0xf4, 0xf4, 0xe1, 0xf5, 0x6e, 0x2b, 0x41, 0x28, 0xe9, 0xa0, 0x70, 0x42, 0x29,
	0x61, 0xf3, 0xde, 0x1a, 0x30, 0x84, 0x72, 0x6b, 0x76, 0xaa, 0x6e, 0x5c, 0xde, 0x0a, 0x05, 0x75,
	0x7e, 0x1c, 0xbb, 0x3b, 0x20, 0x1c, 0xbf, 0x86, 0x51, 0x72, 0x83, 0x57, 0xf3, 0xa7, 0xb2, 0xa5,
	0x28, 0x45, 0x59, 0x52, 0x1d, 0x3b, 0x21, 0x38, 0xd2, 0x75, 0x27, 0xe8, 0x45, 0xe0, 0x21, 0x7b,
	0xd6, 0x0a, 0xc7, 0xe9, 0x72, 0x66, 0x3e, 0x93, 0x14, 0x5f, 0x73, 0xa3, 0xa1, 0xe6, 0x50, 0xea,
	0x77, 0x43, 0xa3, 0xf0, 0x74, 0x8e, 0x08, 0xc3, 0x58, 0x0f, 0xdd, 0x8b, 0x74, 0x20, 0xf5, 0x86,
	0x5e, 0xa6, 0x28, 0x8b, 0xaa, 0x33, 0x42, 0x6e, 0x71, 0xa2, 0xe6, 0x58, 0xb6, 0x34, 0x4e, 0x97,
	0x59, 0x52, 0x9d, 0x00, 0x59, 0xe3, 0xd8, 0x41, 0x0d, 0x83, 0xa3, 0x57, 0x61, 0xf5, 0x5f, 0xf3,
	0xb7, 0xf7, 0xd6, 0xb4, 0x03, 0x17, 0x96, 0xae, 0xe6, 0xdb, 0xff, 0xfb, 0xd3, 0xf3, 0xf7, 0xc8,
	0xd0, 0x7e, 0x64, 0xe8, 0x30, 0x32, 0xf4, 0x35, 0xb1, 0xc5, 0x7e, 0x62, 0x8b, 0x9f, 0x89, 0x2d,
	0xde, 0xee, 0x37, 0x12, 0xb6, 0x43, 0x93, 0x73, 0xd3, 0x15, 0xde, 0xd0, 0x83, 0x57, 0x54, 0x04,
	0x45, 0xc5, 0x47, 0x71, 0x72, 0x09, 0x9f, 0xbd, 0x70, 0x4d, 0x1c, 0x5c, 0x3e, 0xfe, 0x06, 0x00,
	0x00, 0xff, 0xff, 0xa8, 0x1b, 0x1c, 0xcb, 0x65, 0x01, 0x00, 0x00,
}

func (m *Seller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Seller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Seller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Producer) > 0 {
		i -= len(m.Producer)
		copy(dAtA[i:], m.Producer)
		i = encodeVarintSeller(dAtA, i, uint64(len(m.Producer)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintSeller(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ListingId) > 0 {
		for iNdEx := len(m.ListingId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ListingId[iNdEx])
			copy(dAtA[i:], m.ListingId[iNdEx])
			i = encodeVarintSeller(dAtA, i, uint64(len(m.ListingId[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.NumListing != 0 {
		i = encodeVarintSeller(dAtA, i, uint64(m.NumListing))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ContactInfo) > 0 {
		i -= len(m.ContactInfo)
		copy(dAtA[i:], m.ContactInfo)
		i = encodeVarintSeller(dAtA, i, uint64(len(m.ContactInfo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSeller(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSeller(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintSeller(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSeller(dAtA []byte, offset int, v uint64) int {
	offset -= sovSeller(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Seller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovSeller(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSeller(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSeller(uint64(l))
	}
	l = len(m.ContactInfo)
	if l > 0 {
		n += 1 + l + sovSeller(uint64(l))
	}
	if m.NumListing != 0 {
		n += 1 + sovSeller(uint64(m.NumListing))
	}
	if len(m.ListingId) > 0 {
		for _, s := range m.ListingId {
			l = len(s)
			n += 1 + l + sovSeller(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSeller(uint64(l))
	}
	l = len(m.Producer)
	if l > 0 {
		n += 1 + l + sovSeller(uint64(l))
	}
	return n
}

func sovSeller(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSeller(x uint64) (n int) {
	return sovSeller(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Seller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeller
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Seller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Seller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeller
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeller
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeller
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeller
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeller
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeller
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeller
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeller
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumListing", wireType)
			}
			m.NumListing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumListing |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeller
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeller
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = append(m.ListingId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeller
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeller
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeller
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeller
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Producer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeller(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSeller
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSeller(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSeller
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeller
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSeller
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSeller
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSeller
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSeller        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSeller          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSeller = fmt.Errorf("proto: unexpected end of group")
)
