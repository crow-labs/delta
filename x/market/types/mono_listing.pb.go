// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/mono_listing.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MonoListing struct {
	ListingId       string       `protobuf:"bytes,1,opt,name=listingId,proto3" json:"listingId,omitempty"`
	Title           string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Desc            string       `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Price           []types.Coin `protobuf:"bytes,4,rep,name=price,proto3" json:"price"`
	OrderId         []string     `protobuf:"bytes,5,rep,name=orderId,proto3" json:"orderId,omitempty"`
	AcceptedOrderId string       `protobuf:"bytes,6,opt,name=acceptedOrderId,proto3" json:"acceptedOrderId,omitempty"`
	Status          string       `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Seller          string       `protobuf:"bytes,8,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (m *MonoListing) Reset()         { *m = MonoListing{} }
func (m *MonoListing) String() string { return proto.CompactTextString(m) }
func (*MonoListing) ProtoMessage()    {}
func (*MonoListing) Descriptor() ([]byte, []int) {
	return fileDescriptor_8337c8f316aad250, []int{0}
}
func (m *MonoListing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonoListing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonoListing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonoListing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonoListing.Merge(m, src)
}
func (m *MonoListing) XXX_Size() int {
	return m.Size()
}
func (m *MonoListing) XXX_DiscardUnknown() {
	xxx_messageInfo_MonoListing.DiscardUnknown(m)
}

var xxx_messageInfo_MonoListing proto.InternalMessageInfo

func (m *MonoListing) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *MonoListing) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MonoListing) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MonoListing) GetPrice() []types.Coin {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *MonoListing) GetOrderId() []string {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *MonoListing) GetAcceptedOrderId() string {
	if m != nil {
		return m.AcceptedOrderId
	}
	return ""
}

func (m *MonoListing) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MonoListing) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func init() {
	proto.RegisterType((*MonoListing)(nil), "crowlabs.delta.market.MonoListing")
}

func init() { proto.RegisterFile("market/mono_listing.proto", fileDescriptor_8337c8f316aad250) }

var fileDescriptor_8337c8f316aad250 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcd, 0x4a, 0x03, 0x31,
	0x1c, 0xc4, 0x77, 0xfb, 0x69, 0xd3, 0x83, 0x10, 0xaa, 0xa4, 0x45, 0xd6, 0xe2, 0x69, 0x3d, 0x98,
	0x50, 0xc5, 0x17, 0x68, 0x4f, 0x05, 0x45, 0xe8, 0xd1, 0x8b, 0x64, 0xb3, 0x61, 0x0d, 0xee, 0xee,
	0x7f, 0x49, 0x52, 0x3f, 0x6e, 0x3e, 0x82, 0x8f, 0xd5, 0x63, 0x8f, 0x9e, 0x44, 0xda, 0x17, 0x91,
	0x4d, 0x56, 0x04, 0x6f, 0x99, 0xf9, 0xff, 0x60, 0x86, 0x09, 0x1a, 0x17, 0x5c, 0x3f, 0x49, 0xcb,
	0x0a, 0x28, 0xe1, 0x21, 0x57, 0xc6, 0xaa, 0x32, 0xa3, 0x95, 0x06, 0x0b, 0xf8, 0x48, 0x68, 0x78,
	0xc9, 0x79, 0x62, 0x68, 0x2a, 0x73, 0xcb, 0xa9, 0x27, 0x27, 0xa3, 0x0c, 0x32, 0x70, 0x04, 0xab,
	0x5f, 0x1e, 0x9e, 0x44, 0x02, 0x4c, 0x01, 0x86, 0x25, 0xdc, 0x48, 0xf6, 0x3c, 0x4b, 0xa4, 0xe5,
	0x33, 0x26, 0x40, 0x95, 0xfe, 0x7e, 0xf6, 0xde, 0x42, 0xc3, 0x5b, 0x28, 0xe1, 0xc6, 0x47, 0xe0,
	0x13, 0x34, 0x68, 0xd2, 0x96, 0x29, 0x09, 0xa7, 0x61, 0x3c, 0x58, 0xfd, 0x19, 0x78, 0x84, 0xba,
	0x56, 0xd9, 0x5c, 0x92, 0x96, 0xbb, 0x78, 0x81, 0x31, 0xea, 0xa4, 0xd2, 0x08, 0xd2, 0x76, 0xa6,
	0x7b, 0xe3, 0x6b, 0xd4, 0xad, 0xb4, 0x12, 0x92, 0x74, 0xa6, 0xed, 0x78, 0x78, 0x39, 0xa6, 0xbe,
	0x07, 0xad, 0x7b, 0xd0, 0xa6, 0x07, 0x5d, 0x80, 0x2a, 0xe7, 0x9d, 0xcd, 0xd7, 0x69, 0xb0, 0xf2,
	0x34, 0x26, 0xa8, 0x0f, 0x3a, 0x95, 0x7a, 0x99, 0x92, 0xee, 0xb4, 0x1d, 0x0f, 0x56, 0xbf, 0x12,
	0xc7, 0xe8, 0x90, 0x0b, 0x21, 0x2b, 0x2b, 0xd3, 0xbb, 0x86, 0xe8, 0xb9, 0xbc, 0xff, 0x36, 0x3e,
	0x46, 0x3d, 0x63, 0xb9, 0x5d, 0x1b, 0xd2, 0x77, 0x40, 0xa3, 0x9c, 0x2f, 0xf3, 0x5c, 0x6a, 0x72,
	0xd0, 0xf8, 0x4e, 0xcd, 0x17, 0x9b, 0x5d, 0x14, 0x6e, 0x77, 0x51, 0xf8, 0xbd, 0x8b, 0xc2, 0x8f,
	0x7d, 0x14, 0x6c, 0xf7, 0x51, 0xf0, 0xb9, 0x8f, 0x82, 0xfb, 0xf3, 0x4c, 0xd9, 0xc7, 0x75, 0x42,
	0x05, 0x14, 0xac, 0x1e, 0xfd, 0xa2, 0x5e, 0x9d, 0xb9, 0xd5, 0xd9, 0x2b, 0x6b, 0x7e, 0xc8, 0xbe,
	0x55, 0xd2, 0x24, 0x3d, 0x37, 0xe7, 0xd5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0x64, 0xb1,
	0xf2, 0xb8, 0x01, 0x00, 0x00,
}

func (m *MonoListing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonoListing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonoListing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintMonoListing(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMonoListing(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AcceptedOrderId) > 0 {
		i -= len(m.AcceptedOrderId)
		copy(dAtA[i:], m.AcceptedOrderId)
		i = encodeVarintMonoListing(dAtA, i, uint64(len(m.AcceptedOrderId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OrderId) > 0 {
		for iNdEx := len(m.OrderId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderId[iNdEx])
			copy(dAtA[i:], m.OrderId[iNdEx])
			i = encodeVarintMonoListing(dAtA, i, uint64(len(m.OrderId[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonoListing(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintMonoListing(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMonoListing(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintMonoListing(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonoListing(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonoListing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MonoListing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovMonoListing(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMonoListing(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMonoListing(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovMonoListing(uint64(l))
		}
	}
	if len(m.OrderId) > 0 {
		for _, s := range m.OrderId {
			l = len(s)
			n += 1 + l + sovMonoListing(uint64(l))
		}
	}
	l = len(m.AcceptedOrderId)
	if l > 0 {
		n += 1 + l + sovMonoListing(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMonoListing(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovMonoListing(uint64(l))
	}
	return n
}

func sovMonoListing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonoListing(x uint64) (n int) {
	return sovMonoListing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MonoListing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoListing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonoListing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonoListing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoListing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = append(m.OrderId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoListing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoListing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonoListing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonoListing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoListing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoListing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonoListing
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonoListing
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonoListing
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonoListing        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonoListing          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonoListing = fmt.Errorf("proto: unexpected end of group")
)
