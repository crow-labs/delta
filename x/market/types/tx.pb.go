// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateMonoListing struct {
	Seller          string       `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	ListingId       string       `protobuf:"bytes,2,opt,name=listingId,proto3" json:"listingId,omitempty"`
	Title           string       `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Desc            string       `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Price           []types.Coin `protobuf:"bytes,5,rep,name=price,proto3" json:"price"`
	OrderId         []string     `protobuf:"bytes,6,rep,name=orderId,proto3" json:"orderId,omitempty"`
	AcceptedOrderId string       `protobuf:"bytes,7,opt,name=acceptedOrderId,proto3" json:"acceptedOrderId,omitempty"`
	Status          string       `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgCreateMonoListing) Reset()         { *m = MsgCreateMonoListing{} }
func (m *MsgCreateMonoListing) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoListing) ProtoMessage()    {}
func (*MsgCreateMonoListing) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{0}
}
func (m *MsgCreateMonoListing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoListing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoListing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoListing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoListing.Merge(m, src)
}
func (m *MsgCreateMonoListing) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoListing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoListing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoListing proto.InternalMessageInfo

func (m *MsgCreateMonoListing) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgCreateMonoListing) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *MsgCreateMonoListing) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreateMonoListing) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgCreateMonoListing) GetPrice() []types.Coin {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *MsgCreateMonoListing) GetOrderId() []string {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *MsgCreateMonoListing) GetAcceptedOrderId() string {
	if m != nil {
		return m.AcceptedOrderId
	}
	return ""
}

func (m *MsgCreateMonoListing) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgCreateMonoListingResponse struct {
}

func (m *MsgCreateMonoListingResponse) Reset()         { *m = MsgCreateMonoListingResponse{} }
func (m *MsgCreateMonoListingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoListingResponse) ProtoMessage()    {}
func (*MsgCreateMonoListingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{1}
}
func (m *MsgCreateMonoListingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoListingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoListingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoListingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoListingResponse.Merge(m, src)
}
func (m *MsgCreateMonoListingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoListingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoListingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoListingResponse proto.InternalMessageInfo

type MsgUpdateMonoListing struct {
	Seller          string       `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	ListingId       string       `protobuf:"bytes,2,opt,name=listingId,proto3" json:"listingId,omitempty"`
	Title           string       `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Desc            string       `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Price           []types.Coin `protobuf:"bytes,5,rep,name=price,proto3" json:"price"`
	OrderId         []string     `protobuf:"bytes,6,rep,name=orderId,proto3" json:"orderId,omitempty"`
	AcceptedOrderId string       `protobuf:"bytes,7,opt,name=acceptedOrderId,proto3" json:"acceptedOrderId,omitempty"`
	Status          string       `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgUpdateMonoListing) Reset()         { *m = MsgUpdateMonoListing{} }
func (m *MsgUpdateMonoListing) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoListing) ProtoMessage()    {}
func (*MsgUpdateMonoListing) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{2}
}
func (m *MsgUpdateMonoListing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoListing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoListing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoListing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoListing.Merge(m, src)
}
func (m *MsgUpdateMonoListing) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoListing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoListing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoListing proto.InternalMessageInfo

func (m *MsgUpdateMonoListing) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgUpdateMonoListing) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

func (m *MsgUpdateMonoListing) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgUpdateMonoListing) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgUpdateMonoListing) GetPrice() []types.Coin {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *MsgUpdateMonoListing) GetOrderId() []string {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *MsgUpdateMonoListing) GetAcceptedOrderId() string {
	if m != nil {
		return m.AcceptedOrderId
	}
	return ""
}

func (m *MsgUpdateMonoListing) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgUpdateMonoListingResponse struct {
}

func (m *MsgUpdateMonoListingResponse) Reset()         { *m = MsgUpdateMonoListingResponse{} }
func (m *MsgUpdateMonoListingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoListingResponse) ProtoMessage()    {}
func (*MsgUpdateMonoListingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{3}
}
func (m *MsgUpdateMonoListingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoListingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoListingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoListingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoListingResponse.Merge(m, src)
}
func (m *MsgUpdateMonoListingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoListingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoListingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoListingResponse proto.InternalMessageInfo

type MsgDeleteMonoListing struct {
	Seller    string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	ListingId string `protobuf:"bytes,2,opt,name=listingId,proto3" json:"listingId,omitempty"`
}

func (m *MsgDeleteMonoListing) Reset()         { *m = MsgDeleteMonoListing{} }
func (m *MsgDeleteMonoListing) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoListing) ProtoMessage()    {}
func (*MsgDeleteMonoListing) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{4}
}
func (m *MsgDeleteMonoListing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoListing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoListing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoListing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoListing.Merge(m, src)
}
func (m *MsgDeleteMonoListing) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoListing) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoListing.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoListing proto.InternalMessageInfo

func (m *MsgDeleteMonoListing) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgDeleteMonoListing) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

type MsgDeleteMonoListingResponse struct {
}

func (m *MsgDeleteMonoListingResponse) Reset()         { *m = MsgDeleteMonoListingResponse{} }
func (m *MsgDeleteMonoListingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoListingResponse) ProtoMessage()    {}
func (*MsgDeleteMonoListingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{5}
}
func (m *MsgDeleteMonoListingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoListingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoListingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoListingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoListingResponse.Merge(m, src)
}
func (m *MsgDeleteMonoListingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoListingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoListingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoListingResponse proto.InternalMessageInfo

type MsgCreateMonoOrder struct {
	Buyer   string       `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	OrderId string       `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Price   []types.Coin `protobuf:"bytes,3,rep,name=price,proto3" json:"price"`
	Timeout string       `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Status  string       `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgCreateMonoOrder) Reset()         { *m = MsgCreateMonoOrder{} }
func (m *MsgCreateMonoOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoOrder) ProtoMessage()    {}
func (*MsgCreateMonoOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{6}
}
func (m *MsgCreateMonoOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoOrder.Merge(m, src)
}
func (m *MsgCreateMonoOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoOrder proto.InternalMessageInfo

func (m *MsgCreateMonoOrder) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgCreateMonoOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgCreateMonoOrder) GetPrice() []types.Coin {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *MsgCreateMonoOrder) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func (m *MsgCreateMonoOrder) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgCreateMonoOrderResponse struct {
}

func (m *MsgCreateMonoOrderResponse) Reset()         { *m = MsgCreateMonoOrderResponse{} }
func (m *MsgCreateMonoOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoOrderResponse) ProtoMessage()    {}
func (*MsgCreateMonoOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{7}
}
func (m *MsgCreateMonoOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoOrderResponse.Merge(m, src)
}
func (m *MsgCreateMonoOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoOrderResponse proto.InternalMessageInfo

type MsgUpdateMonoOrder struct {
	Buyer   string       `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	OrderId string       `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Price   []types.Coin `protobuf:"bytes,3,rep,name=price,proto3" json:"price"`
	Timeout string       `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Status  string       `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgUpdateMonoOrder) Reset()         { *m = MsgUpdateMonoOrder{} }
func (m *MsgUpdateMonoOrder) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoOrder) ProtoMessage()    {}
func (*MsgUpdateMonoOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{8}
}
func (m *MsgUpdateMonoOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoOrder.Merge(m, src)
}
func (m *MsgUpdateMonoOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoOrder proto.InternalMessageInfo

func (m *MsgUpdateMonoOrder) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgUpdateMonoOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgUpdateMonoOrder) GetPrice() []types.Coin {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *MsgUpdateMonoOrder) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func (m *MsgUpdateMonoOrder) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgUpdateMonoOrderResponse struct {
}

func (m *MsgUpdateMonoOrderResponse) Reset()         { *m = MsgUpdateMonoOrderResponse{} }
func (m *MsgUpdateMonoOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoOrderResponse) ProtoMessage()    {}
func (*MsgUpdateMonoOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{9}
}
func (m *MsgUpdateMonoOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoOrderResponse.Merge(m, src)
}
func (m *MsgUpdateMonoOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoOrderResponse proto.InternalMessageInfo

type MsgDeleteMonoOrder struct {
	Buyer   string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	OrderId string `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *MsgDeleteMonoOrder) Reset()         { *m = MsgDeleteMonoOrder{} }
func (m *MsgDeleteMonoOrder) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoOrder) ProtoMessage()    {}
func (*MsgDeleteMonoOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{10}
}
func (m *MsgDeleteMonoOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoOrder.Merge(m, src)
}
func (m *MsgDeleteMonoOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoOrder proto.InternalMessageInfo

func (m *MsgDeleteMonoOrder) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgDeleteMonoOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type MsgDeleteMonoOrderResponse struct {
}

func (m *MsgDeleteMonoOrderResponse) Reset()         { *m = MsgDeleteMonoOrderResponse{} }
func (m *MsgDeleteMonoOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoOrderResponse) ProtoMessage()    {}
func (*MsgDeleteMonoOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2966ca2342567dca, []int{11}
}
func (m *MsgDeleteMonoOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoOrderResponse.Merge(m, src)
}
func (m *MsgDeleteMonoOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoOrderResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateMonoListing)(nil), "crowlabs.delta.market.MsgCreateMonoListing")
	proto.RegisterType((*MsgCreateMonoListingResponse)(nil), "crowlabs.delta.market.MsgCreateMonoListingResponse")
	proto.RegisterType((*MsgUpdateMonoListing)(nil), "crowlabs.delta.market.MsgUpdateMonoListing")
	proto.RegisterType((*MsgUpdateMonoListingResponse)(nil), "crowlabs.delta.market.MsgUpdateMonoListingResponse")
	proto.RegisterType((*MsgDeleteMonoListing)(nil), "crowlabs.delta.market.MsgDeleteMonoListing")
	proto.RegisterType((*MsgDeleteMonoListingResponse)(nil), "crowlabs.delta.market.MsgDeleteMonoListingResponse")
	proto.RegisterType((*MsgCreateMonoOrder)(nil), "crowlabs.delta.market.MsgCreateMonoOrder")
	proto.RegisterType((*MsgCreateMonoOrderResponse)(nil), "crowlabs.delta.market.MsgCreateMonoOrderResponse")
	proto.RegisterType((*MsgUpdateMonoOrder)(nil), "crowlabs.delta.market.MsgUpdateMonoOrder")
	proto.RegisterType((*MsgUpdateMonoOrderResponse)(nil), "crowlabs.delta.market.MsgUpdateMonoOrderResponse")
	proto.RegisterType((*MsgDeleteMonoOrder)(nil), "crowlabs.delta.market.MsgDeleteMonoOrder")
	proto.RegisterType((*MsgDeleteMonoOrderResponse)(nil), "crowlabs.delta.market.MsgDeleteMonoOrderResponse")
}

func init() { proto.RegisterFile("market/tx.proto", fileDescriptor_2966ca2342567dca) }

var fileDescriptor_2966ca2342567dca = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe3, 0xe6, 0xa3, 0x64, 0x39, 0x44, 0xac, 0x02, 0xb8, 0x56, 0x64, 0xa2, 0x9e, 0x12,
	0x21, 0xd6, 0x4a, 0x2b, 0x5e, 0xa0, 0xe9, 0xa5, 0x52, 0x23, 0xa4, 0x48, 0x5c, 0xb8, 0x20, 0x7f,
	0x8c, 0x8c, 0x85, 0xed, 0xb5, 0xbc, 0x6b, 0x68, 0x1f, 0x81, 0x1b, 0x2f, 0xc2, 0x23, 0x70, 0xef,
	0xb1, 0x47, 0x4e, 0x08, 0x25, 0x2f, 0x82, 0xbc, 0xbb, 0x76, 0x52, 0x3b, 0x49, 0x53, 0xc4, 0x05,
	0x89, 0xdb, 0xce, 0xce, 0x64, 0xfe, 0x33, 0xbf, 0xdd, 0xd9, 0x18, 0xf5, 0x22, 0x3b, 0xfd, 0x08,
	0xdc, 0xe2, 0x57, 0x24, 0x49, 0x29, 0xa7, 0xf8, 0xa9, 0x9b, 0xd2, 0xcf, 0xa1, 0xed, 0x30, 0xe2,
	0x41, 0xc8, 0x6d, 0x22, 0xfd, 0xc6, 0x91, 0x8a, 0x8b, 0x68, 0x4c, 0xdf, 0x87, 0x01, 0xe3, 0x41,
	0xec, 0xcb, 0x5f, 0x18, 0xcf, 0xd7, 0x5d, 0x34, 0xf5, 0x20, 0x55, 0x0e, 0xd3, 0xa5, 0x2c, 0xa2,
	0xcc, 0x72, 0x6c, 0x06, 0xd6, 0xa7, 0x89, 0x03, 0xdc, 0x9e, 0x58, 0x2e, 0x0d, 0x62, 0xe5, 0xef,
	0xfb, 0xd4, 0xa7, 0x62, 0x69, 0xe5, 0x2b, 0xb9, 0x7b, 0xfc, 0xe5, 0x00, 0xf5, 0x67, 0xcc, 0x9f,
	0xa6, 0x60, 0x73, 0x98, 0xd1, 0x98, 0x5e, 0x4a, 0x35, 0xfc, 0x0c, 0x75, 0x18, 0x84, 0x21, 0xa4,
	0xba, 0x36, 0xd4, 0x46, 0xdd, 0xb9, 0xb2, 0xf0, 0x00, 0x75, 0x55, 0x41, 0x17, 0x9e, 0x7e, 0x20,
	0x5c, 0xab, 0x0d, 0xdc, 0x47, 0x6d, 0x1e, 0xf0, 0x10, 0xf4, 0xa6, 0xf0, 0x48, 0x03, 0x63, 0xd4,
	0xf2, 0x80, 0xb9, 0x7a, 0x4b, 0x6c, 0x8a, 0x35, 0x7e, 0x8d, 0xda, 0x49, 0x1a, 0xb8, 0xa0, 0xb7,
	0x87, 0xcd, 0xd1, 0xe3, 0x93, 0x23, 0x22, 0xcb, 0x27, 0x79, 0xf9, 0x44, 0x95, 0x4f, 0xa6, 0x34,
	0x88, 0xcf, 0x5a, 0x37, 0x3f, 0x5f, 0x34, 0xe6, 0x32, 0x1a, 0xeb, 0xe8, 0x50, 0x34, 0x7d, 0xe1,
	0xe9, 0x9d, 0x61, 0x73, 0xd4, 0x9d, 0x17, 0x26, 0x1e, 0xa1, 0x9e, 0xed, 0xba, 0x90, 0x70, 0xf0,
	0xde, 0xa8, 0x88, 0x43, 0xa1, 0x57, 0xdd, 0x16, 0xad, 0x71, 0x9b, 0x67, 0x4c, 0x7f, 0xa4, 0x5a,
	0x13, 0xd6, 0xb1, 0x89, 0x06, 0x9b, 0x50, 0xcc, 0x81, 0x25, 0x34, 0x66, 0x50, 0xb0, 0x7a, 0x9b,
	0x78, 0xff, 0x59, 0x49, 0x56, 0x35, 0x14, 0x25, 0xab, 0x4b, 0x81, 0xea, 0x1c, 0x42, 0xf8, 0x0b,
	0xa8, 0x94, 0x5a, 0x2d, 0x5b, 0xa9, 0xf6, 0x4d, 0x43, 0xf8, 0xce, 0xd1, 0x89, 0xf2, 0x73, 0xc2,
	0x4e, 0x76, 0x5d, 0x6a, 0x49, 0x63, 0x1d, 0x8b, 0x14, 0x2a, 0xb1, 0x94, 0x9c, 0x9b, 0x0f, 0xe5,
	0xcc, 0x83, 0x08, 0x68, 0xc6, 0xd5, 0xa9, 0x15, 0xe6, 0x1a, 0xbd, 0xf6, 0x1d, 0x7a, 0x03, 0x64,
	0xd4, 0xcb, 0xad, 0x76, 0xb3, 0x82, 0xfb, 0x4f, 0x74, 0x53, 0x29, 0xb7, 0xec, 0xe6, 0x5c, 0x34,
	0xb3, 0x3a, 0xbb, 0x3f, 0x6a, 0x46, 0x69, 0x54, 0xb2, 0x14, 0x1a, 0x27, 0xdf, 0xdb, 0xa8, 0x39,
	0x63, 0x3e, 0xce, 0xd0, 0x93, 0xfa, 0x4b, 0xf6, 0x92, 0x6c, 0x7c, 0x64, 0xc9, 0xa6, 0x59, 0x37,
	0x4e, 0x1f, 0x10, 0x5c, 0xc8, 0xe7, 0xb2, 0xf5, 0x47, 0x61, 0x87, 0x6c, 0x2d, 0x78, 0x97, 0xec,
	0xd6, 0x19, 0xcb, 0x65, 0xeb, 0x03, 0xb6, 0x43, 0xb6, 0x16, 0xbc, 0x4b, 0x76, 0xeb, 0xb0, 0x61,
	0x8a, 0x7a, 0xd5, 0x41, 0x1b, 0xef, 0x43, 0x4d, 0x84, 0x1a, 0x93, 0xbd, 0x43, 0xd7, 0x05, 0xab,
	0xb3, 0x30, 0xde, 0x87, 0xd7, 0xbd, 0x82, 0x5b, 0xae, 0x6c, 0x2e, 0x58, 0xbd, 0xaf, 0xe3, 0x7d,
	0x48, 0xdd, 0x2b, 0xb8, 0xe5, 0xfe, 0x9e, 0x4d, 0x6f, 0x16, 0xa6, 0x76, 0xbb, 0x30, 0xb5, 0x5f,
	0x0b, 0x53, 0xfb, 0xba, 0x34, 0x1b, 0xb7, 0x4b, 0xb3, 0xf1, 0x63, 0x69, 0x36, 0xde, 0x8d, 0xfd,
	0x80, 0x7f, 0xc8, 0x1c, 0xe2, 0xd2, 0xc8, 0xca, 0xd3, 0xbe, 0xca, 0xf3, 0x5a, 0x22, 0xaf, 0x75,
	0x65, 0x15, 0x9f, 0x13, 0xd7, 0x09, 0x30, 0xa7, 0x23, 0xfe, 0xd1, 0x4f, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x78, 0x73, 0xd2, 0x5c, 0x65, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateMonoListing(ctx context.Context, in *MsgCreateMonoListing, opts ...grpc.CallOption) (*MsgCreateMonoListingResponse, error)
	UpdateMonoListing(ctx context.Context, in *MsgUpdateMonoListing, opts ...grpc.CallOption) (*MsgUpdateMonoListingResponse, error)
	DeleteMonoListing(ctx context.Context, in *MsgDeleteMonoListing, opts ...grpc.CallOption) (*MsgDeleteMonoListingResponse, error)
	CreateMonoOrder(ctx context.Context, in *MsgCreateMonoOrder, opts ...grpc.CallOption) (*MsgCreateMonoOrderResponse, error)
	UpdateMonoOrder(ctx context.Context, in *MsgUpdateMonoOrder, opts ...grpc.CallOption) (*MsgUpdateMonoOrderResponse, error)
	DeleteMonoOrder(ctx context.Context, in *MsgDeleteMonoOrder, opts ...grpc.CallOption) (*MsgDeleteMonoOrderResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateMonoListing(ctx context.Context, in *MsgCreateMonoListing, opts ...grpc.CallOption) (*MsgCreateMonoListingResponse, error) {
	out := new(MsgCreateMonoListingResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.market.Msg/CreateMonoListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMonoListing(ctx context.Context, in *MsgUpdateMonoListing, opts ...grpc.CallOption) (*MsgUpdateMonoListingResponse, error) {
	out := new(MsgUpdateMonoListingResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.market.Msg/UpdateMonoListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMonoListing(ctx context.Context, in *MsgDeleteMonoListing, opts ...grpc.CallOption) (*MsgDeleteMonoListingResponse, error) {
	out := new(MsgDeleteMonoListingResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.market.Msg/DeleteMonoListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMonoOrder(ctx context.Context, in *MsgCreateMonoOrder, opts ...grpc.CallOption) (*MsgCreateMonoOrderResponse, error) {
	out := new(MsgCreateMonoOrderResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.market.Msg/CreateMonoOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMonoOrder(ctx context.Context, in *MsgUpdateMonoOrder, opts ...grpc.CallOption) (*MsgUpdateMonoOrderResponse, error) {
	out := new(MsgUpdateMonoOrderResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.market.Msg/UpdateMonoOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMonoOrder(ctx context.Context, in *MsgDeleteMonoOrder, opts ...grpc.CallOption) (*MsgDeleteMonoOrderResponse, error) {
	out := new(MsgDeleteMonoOrderResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.market.Msg/DeleteMonoOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateMonoListing(context.Context, *MsgCreateMonoListing) (*MsgCreateMonoListingResponse, error)
	UpdateMonoListing(context.Context, *MsgUpdateMonoListing) (*MsgUpdateMonoListingResponse, error)
	DeleteMonoListing(context.Context, *MsgDeleteMonoListing) (*MsgDeleteMonoListingResponse, error)
	CreateMonoOrder(context.Context, *MsgCreateMonoOrder) (*MsgCreateMonoOrderResponse, error)
	UpdateMonoOrder(context.Context, *MsgUpdateMonoOrder) (*MsgUpdateMonoOrderResponse, error)
	DeleteMonoOrder(context.Context, *MsgDeleteMonoOrder) (*MsgDeleteMonoOrderResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateMonoListing(ctx context.Context, req *MsgCreateMonoListing) (*MsgCreateMonoListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonoListing not implemented")
}
func (*UnimplementedMsgServer) UpdateMonoListing(ctx context.Context, req *MsgUpdateMonoListing) (*MsgUpdateMonoListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonoListing not implemented")
}
func (*UnimplementedMsgServer) DeleteMonoListing(ctx context.Context, req *MsgDeleteMonoListing) (*MsgDeleteMonoListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonoListing not implemented")
}
func (*UnimplementedMsgServer) CreateMonoOrder(ctx context.Context, req *MsgCreateMonoOrder) (*MsgCreateMonoOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonoOrder not implemented")
}
func (*UnimplementedMsgServer) UpdateMonoOrder(ctx context.Context, req *MsgUpdateMonoOrder) (*MsgUpdateMonoOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonoOrder not implemented")
}
func (*UnimplementedMsgServer) DeleteMonoOrder(ctx context.Context, req *MsgDeleteMonoOrder) (*MsgDeleteMonoOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonoOrder not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateMonoListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMonoListing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMonoListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.market.Msg/CreateMonoListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMonoListing(ctx, req.(*MsgCreateMonoListing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMonoListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMonoListing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMonoListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.market.Msg/UpdateMonoListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMonoListing(ctx, req.(*MsgUpdateMonoListing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMonoListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMonoListing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMonoListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.market.Msg/DeleteMonoListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMonoListing(ctx, req.(*MsgDeleteMonoListing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMonoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMonoOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMonoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.market.Msg/CreateMonoOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMonoOrder(ctx, req.(*MsgCreateMonoOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMonoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMonoOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMonoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.market.Msg/UpdateMonoOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMonoOrder(ctx, req.(*MsgUpdateMonoOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMonoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMonoOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMonoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.market.Msg/DeleteMonoOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMonoOrder(ctx, req.(*MsgDeleteMonoOrder))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crowlabs.delta.market.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMonoListing",
			Handler:    _Msg_CreateMonoListing_Handler,
		},
		{
			MethodName: "UpdateMonoListing",
			Handler:    _Msg_UpdateMonoListing_Handler,
		},
		{
			MethodName: "DeleteMonoListing",
			Handler:    _Msg_DeleteMonoListing_Handler,
		},
		{
			MethodName: "CreateMonoOrder",
			Handler:    _Msg_CreateMonoOrder_Handler,
		},
		{
			MethodName: "UpdateMonoOrder",
			Handler:    _Msg_UpdateMonoOrder_Handler,
		},
		{
			MethodName: "DeleteMonoOrder",
			Handler:    _Msg_DeleteMonoOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "market/tx.proto",
}

func (m *MsgCreateMonoListing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoListing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoListing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AcceptedOrderId) > 0 {
		i -= len(m.AcceptedOrderId)
		copy(dAtA[i:], m.AcceptedOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AcceptedOrderId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OrderId) > 0 {
		for iNdEx := len(m.OrderId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderId[iNdEx])
			copy(dAtA[i:], m.OrderId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMonoListingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoListingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoListingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoListing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoListing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoListing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AcceptedOrderId) > 0 {
		i -= len(m.AcceptedOrderId)
		copy(dAtA[i:], m.AcceptedOrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AcceptedOrderId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OrderId) > 0 {
		for iNdEx := len(m.OrderId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderId[iNdEx])
			copy(dAtA[i:], m.OrderId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoListingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoListingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoListingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoListing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoListing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoListing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoListingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoListingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoListingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateMonoOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Timeout) > 0 {
		i -= len(m.Timeout)
		copy(dAtA[i:], m.Timeout)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timeout)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMonoOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Timeout) > 0 {
		i -= len(m.Timeout)
		copy(dAtA[i:], m.Timeout)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timeout)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateMonoListing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.OrderId) > 0 {
		for _, s := range m.OrderId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.AcceptedOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMonoListingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMonoListing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.OrderId) > 0 {
		for _, s := range m.OrderId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.AcceptedOrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMonoListingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteMonoListing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteMonoListingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateMonoOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Timeout)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMonoOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMonoOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Timeout)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMonoOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteMonoOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteMonoOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateMonoListing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoListing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoListing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = append(m.OrderId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMonoListingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoListingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoListingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoListing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoListing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoListing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = append(m.OrderId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoListingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoListingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoListingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoListing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoListing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoListing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoListingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoListingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoListingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMonoOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMonoOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
