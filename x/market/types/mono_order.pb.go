// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/mono_order.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MonoOrder struct {
	OrderId string       `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Price   []types.Coin `protobuf:"bytes,2,rep,name=price,proto3" json:"price"`
	Timeout string       `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Status  string       `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Buyer   string       `protobuf:"bytes,5,opt,name=buyer,proto3" json:"buyer,omitempty"`
}

func (m *MonoOrder) Reset()         { *m = MonoOrder{} }
func (m *MonoOrder) String() string { return proto.CompactTextString(m) }
func (*MonoOrder) ProtoMessage()    {}
func (*MonoOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc57f9b076d7f76a, []int{0}
}
func (m *MonoOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonoOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonoOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonoOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonoOrder.Merge(m, src)
}
func (m *MonoOrder) XXX_Size() int {
	return m.Size()
}
func (m *MonoOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MonoOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MonoOrder proto.InternalMessageInfo

func (m *MonoOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MonoOrder) GetPrice() []types.Coin {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *MonoOrder) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func (m *MonoOrder) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MonoOrder) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func init() {
	proto.RegisterType((*MonoOrder)(nil), "crowlabs.delta.market.MonoOrder")
}

func init() { proto.RegisterFile("market/mono_order.proto", fileDescriptor_fc57f9b076d7f76a) }

var fileDescriptor_fc57f9b076d7f76a = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x63, 0xda, 0x14, 0xd5, 0x6c, 0x51, 0x01, 0xd3, 0xc1, 0x54, 0x4c, 0x65, 0xc0, 0x56,
	0x41, 0x5c, 0xa0, 0x9d, 0x18, 0x10, 0x52, 0x47, 0x16, 0x64, 0x27, 0x56, 0x88, 0x68, 0xf2, 0x22,
	0xdb, 0x01, 0x7a, 0x0b, 0x0e, 0xc1, 0x61, 0x3a, 0x76, 0x64, 0x42, 0x28, 0xb9, 0x08, 0xb2, 0x9d,
	0x6e, 0xfe, 0xfd, 0x7e, 0x7d, 0x4f, 0xef, 0xc3, 0xe7, 0xa5, 0xd0, 0x6f, 0xca, 0xf2, 0x12, 0x2a,
	0x78, 0x01, 0x9d, 0x29, 0xcd, 0x6a, 0x0d, 0x16, 0x92, 0xd3, 0x54, 0xc3, 0xc7, 0x46, 0x48, 0xc3,
	0x32, 0xb5, 0xb1, 0x82, 0x85, 0xde, 0x74, 0x92, 0x43, 0x0e, 0xbe, 0xc1, 0xdd, 0x2b, 0x94, 0xa7,
	0x34, 0x05, 0x53, 0x82, 0xe1, 0x52, 0x18, 0xc5, 0xdf, 0x17, 0x52, 0x59, 0xb1, 0xe0, 0x29, 0x14,
	0x55, 0x98, 0x5f, 0x7d, 0x23, 0x3c, 0x7e, 0x84, 0x0a, 0x9e, 0xdc, 0x82, 0x84, 0xe0, 0x63, 0xbf,
	0xe9, 0x21, 0x23, 0x68, 0x86, 0xe6, 0xe3, 0xf5, 0x21, 0x26, 0xf7, 0x38, 0xae, 0x75, 0x91, 0x2a,
	0x72, 0x34, 0x1b, 0xcc, 0x4f, 0x6e, 0x2f, 0x58, 0xe0, 0x32, 0xc7, 0x65, 0x3d, 0x97, 0xad, 0xa0,
	0xa8, 0x96, 0xc3, 0xdd, 0xef, 0x65, 0xb4, 0x0e, 0x6d, 0x07, 0xb4, 0x45, 0xa9, 0xa0, 0xb1, 0x64,
	0x10, 0x80, 0x7d, 0x4c, 0xce, 0xf0, 0xc8, 0x58, 0x61, 0x1b, 0x43, 0x86, 0x7e, 0xd0, 0xa7, 0x64,
	0x82, 0x63, 0xd9, 0x6c, 0x95, 0x26, 0xb1, 0xff, 0x0e, 0x61, 0xb9, 0xda, 0xb5, 0x14, 0xed, 0x5b,
	0x8a, 0xfe, 0x5a, 0x8a, 0xbe, 0x3a, 0x1a, 0xed, 0x3b, 0x1a, 0xfd, 0x74, 0x34, 0x7a, 0xbe, 0xce,
	0x0b, 0xfb, 0xda, 0x48, 0x96, 0x42, 0xc9, 0x9d, 0x98, 0x1b, 0x67, 0x86, 0x7b, 0x33, 0xfc, 0x93,
	0xf7, 0x0e, 0xed, 0xb6, 0x56, 0x46, 0x8e, 0xfc, 0xc9, 0x77, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x24, 0x26, 0xf6, 0xb5, 0x5a, 0x01, 0x00, 0x00,
}

func (m *MonoOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonoOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonoOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintMonoOrder(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMonoOrder(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Timeout) > 0 {
		i -= len(m.Timeout)
		copy(dAtA[i:], m.Timeout)
		i = encodeVarintMonoOrder(dAtA, i, uint64(len(m.Timeout)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMonoOrder(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintMonoOrder(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonoOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonoOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MonoOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovMonoOrder(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovMonoOrder(uint64(l))
		}
	}
	l = len(m.Timeout)
	if l > 0 {
		n += 1 + l + sovMonoOrder(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMonoOrder(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovMonoOrder(uint64(l))
	}
	return n
}

func sovMonoOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonoOrder(x uint64) (n int) {
	return sovMonoOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MonoOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonoOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonoOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonoOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonoOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonoOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonoOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonoOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonoOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonoOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonoOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonoOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonoOrder = fmt.Errorf("proto: unexpected end of group")
)
