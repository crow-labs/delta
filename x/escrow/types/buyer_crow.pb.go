// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/buyer_crow.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BuyerCrow struct {
	CrowId      string `protobuf:"bytes,1,opt,name=crowId,proto3" json:"crowId,omitempty"`
	BuyerId     string `protobuf:"bytes,2,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
	BuyerCrowId string `protobuf:"bytes,3,opt,name=buyerCrowId,proto3" json:"buyerCrowId,omitempty"`
}

func (m *BuyerCrow) Reset()         { *m = BuyerCrow{} }
func (m *BuyerCrow) String() string { return proto.CompactTextString(m) }
func (*BuyerCrow) ProtoMessage()    {}
func (*BuyerCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed1a5d3e2421f3fe, []int{0}
}
func (m *BuyerCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyerCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyerCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyerCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyerCrow.Merge(m, src)
}
func (m *BuyerCrow) XXX_Size() int {
	return m.Size()
}
func (m *BuyerCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyerCrow.DiscardUnknown(m)
}

var xxx_messageInfo_BuyerCrow proto.InternalMessageInfo

func (m *BuyerCrow) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *BuyerCrow) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

func (m *BuyerCrow) GetBuyerCrowId() string {
	if m != nil {
		return m.BuyerCrowId
	}
	return ""
}

func init() {
	proto.RegisterType((*BuyerCrow)(nil), "crowlabs.delta.escrow.BuyerCrow")
}

func init() { proto.RegisterFile("escrow/buyer_crow.proto", fileDescriptor_ed1a5d3e2421f3fe) }

var fileDescriptor_ed1a5d3e2421f3fe = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x2d, 0x4e, 0x2e,
	0xca, 0x2f, 0xd7, 0x4f, 0x2a, 0xad, 0x4c, 0x2d, 0x8a, 0x07, 0x31, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b,
	0xf2, 0x85, 0x44, 0x41, 0xec, 0x9c, 0xc4, 0xa4, 0x62, 0xbd, 0x94, 0xd4, 0x9c, 0x92, 0x44, 0x3d,
	0x88, 0x3a, 0xa5, 0x78, 0x2e, 0x4e, 0x27, 0x90, 0x52, 0xe7, 0xa2, 0xfc, 0x72, 0x21, 0x31, 0x2e,
	0x36, 0x90, 0xa0, 0x67, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x94, 0x27, 0x24, 0xc1,
	0xc5, 0x0e, 0x36, 0xcf, 0x33, 0x45, 0x82, 0x09, 0x2c, 0x01, 0xe3, 0x0a, 0x29, 0x70, 0x71, 0x27,
	0xc1, 0xb4, 0x7b, 0xa6, 0x48, 0x30, 0x83, 0x65, 0x91, 0x85, 0x9c, 0x9c, 0x4f, 0x3c, 0x92, 0x63,
	0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96,
	0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x33, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39,
	0x3f, 0x57, 0x1f, 0x64, 0x91, 0x2e, 0xc8, 0x75, 0xfa, 0x60, 0xd7, 0xe9, 0x57, 0xe8, 0x43, 0xfd,
	0x51, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0xf6, 0x83, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x65, 0xd5, 0x9f, 0x7b, 0xde, 0x00, 0x00, 0x00,
}

func (m *BuyerCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyerCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyerCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyerCrowId) > 0 {
		i -= len(m.BuyerCrowId)
		copy(dAtA[i:], m.BuyerCrowId)
		i = encodeVarintBuyerCrow(dAtA, i, uint64(len(m.BuyerCrowId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuyerId) > 0 {
		i -= len(m.BuyerId)
		copy(dAtA[i:], m.BuyerId)
		i = encodeVarintBuyerCrow(dAtA, i, uint64(len(m.BuyerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintBuyerCrow(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBuyerCrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovBuyerCrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BuyerCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovBuyerCrow(uint64(l))
	}
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovBuyerCrow(uint64(l))
	}
	l = len(m.BuyerCrowId)
	if l > 0 {
		n += 1 + l + sovBuyerCrow(uint64(l))
	}
	return n
}

func sovBuyerCrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBuyerCrow(x uint64) (n int) {
	return sovBuyerCrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BuyerCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuyerCrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyerCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyerCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyerCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyerCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyerCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyerCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyerCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyerCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyerCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyerCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyerCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuyerCrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuyerCrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuyerCrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuyerCrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuyerCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuyerCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBuyerCrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBuyerCrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBuyerCrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBuyerCrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuyerCrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBuyerCrow = fmt.Errorf("proto: unexpected end of group")
)
