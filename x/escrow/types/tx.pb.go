// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateBuyerMonoCrow struct {
	Buyer       string       `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	BuyerCrowId string       `protobuf:"bytes,2,opt,name=buyerCrowId,proto3" json:"buyerCrowId,omitempty"`
	Deposit     []types.Coin `protobuf:"bytes,3,rep,name=deposit,proto3" json:"deposit"`
	Collateral  []types.Coin `protobuf:"bytes,4,rep,name=collateral,proto3" json:"collateral"`
	Status      string       `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgCreateBuyerMonoCrow) Reset()         { *m = MsgCreateBuyerMonoCrow{} }
func (m *MsgCreateBuyerMonoCrow) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBuyerMonoCrow) ProtoMessage()    {}
func (*MsgCreateBuyerMonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{0}
}
func (m *MsgCreateBuyerMonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBuyerMonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBuyerMonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBuyerMonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBuyerMonoCrow.Merge(m, src)
}
func (m *MsgCreateBuyerMonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBuyerMonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBuyerMonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBuyerMonoCrow proto.InternalMessageInfo

func (m *MsgCreateBuyerMonoCrow) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgCreateBuyerMonoCrow) GetBuyerCrowId() string {
	if m != nil {
		return m.BuyerCrowId
	}
	return ""
}

func (m *MsgCreateBuyerMonoCrow) GetDeposit() []types.Coin {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *MsgCreateBuyerMonoCrow) GetCollateral() []types.Coin {
	if m != nil {
		return m.Collateral
	}
	return nil
}

func (m *MsgCreateBuyerMonoCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgCreateBuyerMonoCrowResponse struct {
}

func (m *MsgCreateBuyerMonoCrowResponse) Reset()         { *m = MsgCreateBuyerMonoCrowResponse{} }
func (m *MsgCreateBuyerMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBuyerMonoCrowResponse) ProtoMessage()    {}
func (*MsgCreateBuyerMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{1}
}
func (m *MsgCreateBuyerMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBuyerMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBuyerMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBuyerMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBuyerMonoCrowResponse.Merge(m, src)
}
func (m *MsgCreateBuyerMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBuyerMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBuyerMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBuyerMonoCrowResponse proto.InternalMessageInfo

type MsgUpdateBuyerMonoCrow struct {
	Buyer       string       `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	BuyerCrowId string       `protobuf:"bytes,2,opt,name=buyerCrowId,proto3" json:"buyerCrowId,omitempty"`
	Deposit     []types.Coin `protobuf:"bytes,3,rep,name=deposit,proto3" json:"deposit"`
	Collateral  []types.Coin `protobuf:"bytes,4,rep,name=collateral,proto3" json:"collateral"`
	Status      string       `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgUpdateBuyerMonoCrow) Reset()         { *m = MsgUpdateBuyerMonoCrow{} }
func (m *MsgUpdateBuyerMonoCrow) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBuyerMonoCrow) ProtoMessage()    {}
func (*MsgUpdateBuyerMonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{2}
}
func (m *MsgUpdateBuyerMonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBuyerMonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBuyerMonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBuyerMonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBuyerMonoCrow.Merge(m, src)
}
func (m *MsgUpdateBuyerMonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBuyerMonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBuyerMonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBuyerMonoCrow proto.InternalMessageInfo

func (m *MsgUpdateBuyerMonoCrow) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgUpdateBuyerMonoCrow) GetBuyerCrowId() string {
	if m != nil {
		return m.BuyerCrowId
	}
	return ""
}

func (m *MsgUpdateBuyerMonoCrow) GetDeposit() []types.Coin {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *MsgUpdateBuyerMonoCrow) GetCollateral() []types.Coin {
	if m != nil {
		return m.Collateral
	}
	return nil
}

func (m *MsgUpdateBuyerMonoCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgUpdateBuyerMonoCrowResponse struct {
}

func (m *MsgUpdateBuyerMonoCrowResponse) Reset()         { *m = MsgUpdateBuyerMonoCrowResponse{} }
func (m *MsgUpdateBuyerMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBuyerMonoCrowResponse) ProtoMessage()    {}
func (*MsgUpdateBuyerMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{3}
}
func (m *MsgUpdateBuyerMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBuyerMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBuyerMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBuyerMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBuyerMonoCrowResponse.Merge(m, src)
}
func (m *MsgUpdateBuyerMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBuyerMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBuyerMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBuyerMonoCrowResponse proto.InternalMessageInfo

type MsgDeleteBuyerMonoCrow struct {
	Buyer       string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	BuyerCrowId string `protobuf:"bytes,2,opt,name=buyerCrowId,proto3" json:"buyerCrowId,omitempty"`
}

func (m *MsgDeleteBuyerMonoCrow) Reset()         { *m = MsgDeleteBuyerMonoCrow{} }
func (m *MsgDeleteBuyerMonoCrow) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBuyerMonoCrow) ProtoMessage()    {}
func (*MsgDeleteBuyerMonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{4}
}
func (m *MsgDeleteBuyerMonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBuyerMonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBuyerMonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBuyerMonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBuyerMonoCrow.Merge(m, src)
}
func (m *MsgDeleteBuyerMonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBuyerMonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBuyerMonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBuyerMonoCrow proto.InternalMessageInfo

func (m *MsgDeleteBuyerMonoCrow) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgDeleteBuyerMonoCrow) GetBuyerCrowId() string {
	if m != nil {
		return m.BuyerCrowId
	}
	return ""
}

type MsgDeleteBuyerMonoCrowResponse struct {
}

func (m *MsgDeleteBuyerMonoCrowResponse) Reset()         { *m = MsgDeleteBuyerMonoCrowResponse{} }
func (m *MsgDeleteBuyerMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBuyerMonoCrowResponse) ProtoMessage()    {}
func (*MsgDeleteBuyerMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{5}
}
func (m *MsgDeleteBuyerMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBuyerMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBuyerMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBuyerMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBuyerMonoCrowResponse.Merge(m, src)
}
func (m *MsgDeleteBuyerMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBuyerMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBuyerMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBuyerMonoCrowResponse proto.InternalMessageInfo

type MsgCreateSellerMonoCrow struct {
	Seller       string       `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	SellerCrowId string       `protobuf:"bytes,2,opt,name=sellerCrowId,proto3" json:"sellerCrowId,omitempty"`
	Collateral   []types.Coin `protobuf:"bytes,3,rep,name=collateral,proto3" json:"collateral"`
	Status       string       `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgCreateSellerMonoCrow) Reset()         { *m = MsgCreateSellerMonoCrow{} }
func (m *MsgCreateSellerMonoCrow) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSellerMonoCrow) ProtoMessage()    {}
func (*MsgCreateSellerMonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{6}
}
func (m *MsgCreateSellerMonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSellerMonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSellerMonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSellerMonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSellerMonoCrow.Merge(m, src)
}
func (m *MsgCreateSellerMonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSellerMonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSellerMonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSellerMonoCrow proto.InternalMessageInfo

func (m *MsgCreateSellerMonoCrow) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgCreateSellerMonoCrow) GetSellerCrowId() string {
	if m != nil {
		return m.SellerCrowId
	}
	return ""
}

func (m *MsgCreateSellerMonoCrow) GetCollateral() []types.Coin {
	if m != nil {
		return m.Collateral
	}
	return nil
}

func (m *MsgCreateSellerMonoCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgCreateSellerMonoCrowResponse struct {
}

func (m *MsgCreateSellerMonoCrowResponse) Reset()         { *m = MsgCreateSellerMonoCrowResponse{} }
func (m *MsgCreateSellerMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSellerMonoCrowResponse) ProtoMessage()    {}
func (*MsgCreateSellerMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{7}
}
func (m *MsgCreateSellerMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSellerMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSellerMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSellerMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSellerMonoCrowResponse.Merge(m, src)
}
func (m *MsgCreateSellerMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSellerMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSellerMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSellerMonoCrowResponse proto.InternalMessageInfo

type MsgUpdateSellerMonoCrow struct {
	Seller       string       `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	SellerCrowId string       `protobuf:"bytes,2,opt,name=sellerCrowId,proto3" json:"sellerCrowId,omitempty"`
	Collateral   []types.Coin `protobuf:"bytes,3,rep,name=collateral,proto3" json:"collateral"`
	Status       string       `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgUpdateSellerMonoCrow) Reset()         { *m = MsgUpdateSellerMonoCrow{} }
func (m *MsgUpdateSellerMonoCrow) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSellerMonoCrow) ProtoMessage()    {}
func (*MsgUpdateSellerMonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{8}
}
func (m *MsgUpdateSellerMonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSellerMonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSellerMonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSellerMonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSellerMonoCrow.Merge(m, src)
}
func (m *MsgUpdateSellerMonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSellerMonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSellerMonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSellerMonoCrow proto.InternalMessageInfo

func (m *MsgUpdateSellerMonoCrow) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgUpdateSellerMonoCrow) GetSellerCrowId() string {
	if m != nil {
		return m.SellerCrowId
	}
	return ""
}

func (m *MsgUpdateSellerMonoCrow) GetCollateral() []types.Coin {
	if m != nil {
		return m.Collateral
	}
	return nil
}

func (m *MsgUpdateSellerMonoCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgUpdateSellerMonoCrowResponse struct {
}

func (m *MsgUpdateSellerMonoCrowResponse) Reset()         { *m = MsgUpdateSellerMonoCrowResponse{} }
func (m *MsgUpdateSellerMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSellerMonoCrowResponse) ProtoMessage()    {}
func (*MsgUpdateSellerMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{9}
}
func (m *MsgUpdateSellerMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSellerMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSellerMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSellerMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSellerMonoCrowResponse.Merge(m, src)
}
func (m *MsgUpdateSellerMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSellerMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSellerMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSellerMonoCrowResponse proto.InternalMessageInfo

type MsgDeleteSellerMonoCrow struct {
	Seller       string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	SellerCrowId string `protobuf:"bytes,2,opt,name=sellerCrowId,proto3" json:"sellerCrowId,omitempty"`
}

func (m *MsgDeleteSellerMonoCrow) Reset()         { *m = MsgDeleteSellerMonoCrow{} }
func (m *MsgDeleteSellerMonoCrow) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteSellerMonoCrow) ProtoMessage()    {}
func (*MsgDeleteSellerMonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{10}
}
func (m *MsgDeleteSellerMonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteSellerMonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteSellerMonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteSellerMonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteSellerMonoCrow.Merge(m, src)
}
func (m *MsgDeleteSellerMonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteSellerMonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteSellerMonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteSellerMonoCrow proto.InternalMessageInfo

func (m *MsgDeleteSellerMonoCrow) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgDeleteSellerMonoCrow) GetSellerCrowId() string {
	if m != nil {
		return m.SellerCrowId
	}
	return ""
}

type MsgDeleteSellerMonoCrowResponse struct {
}

func (m *MsgDeleteSellerMonoCrowResponse) Reset()         { *m = MsgDeleteSellerMonoCrowResponse{} }
func (m *MsgDeleteSellerMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteSellerMonoCrowResponse) ProtoMessage()    {}
func (*MsgDeleteSellerMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{11}
}
func (m *MsgDeleteSellerMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteSellerMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteSellerMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteSellerMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteSellerMonoCrowResponse.Merge(m, src)
}
func (m *MsgDeleteSellerMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteSellerMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteSellerMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteSellerMonoCrowResponse proto.InternalMessageInfo

type MsgCreateMonoCrow struct {
	Seller       string   `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	CrowId       string   `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	WhitelistId  string   `protobuf:"bytes,3,opt,name=whitelistId,proto3" json:"whitelistId,omitempty"`
	SellerCrowId string   `protobuf:"bytes,4,opt,name=sellerCrowId,proto3" json:"sellerCrowId,omitempty"`
	BuyerCrowId  string   `protobuf:"bytes,5,opt,name=buyerCrowId,proto3" json:"buyerCrowId,omitempty"`
	DisputeId    []string `protobuf:"bytes,6,rep,name=disputeId,proto3" json:"disputeId,omitempty"`
	Timeout      []string `protobuf:"bytes,7,rep,name=timeout,proto3" json:"timeout,omitempty"`
	Status       string   `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgCreateMonoCrow) Reset()         { *m = MsgCreateMonoCrow{} }
func (m *MsgCreateMonoCrow) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoCrow) ProtoMessage()    {}
func (*MsgCreateMonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{12}
}
func (m *MsgCreateMonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoCrow.Merge(m, src)
}
func (m *MsgCreateMonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoCrow proto.InternalMessageInfo

func (m *MsgCreateMonoCrow) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgCreateMonoCrow) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgCreateMonoCrow) GetWhitelistId() string {
	if m != nil {
		return m.WhitelistId
	}
	return ""
}

func (m *MsgCreateMonoCrow) GetSellerCrowId() string {
	if m != nil {
		return m.SellerCrowId
	}
	return ""
}

func (m *MsgCreateMonoCrow) GetBuyerCrowId() string {
	if m != nil {
		return m.BuyerCrowId
	}
	return ""
}

func (m *MsgCreateMonoCrow) GetDisputeId() []string {
	if m != nil {
		return m.DisputeId
	}
	return nil
}

func (m *MsgCreateMonoCrow) GetTimeout() []string {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *MsgCreateMonoCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgCreateMonoCrowResponse struct {
}

func (m *MsgCreateMonoCrowResponse) Reset()         { *m = MsgCreateMonoCrowResponse{} }
func (m *MsgCreateMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoCrowResponse) ProtoMessage()    {}
func (*MsgCreateMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{13}
}
func (m *MsgCreateMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoCrowResponse.Merge(m, src)
}
func (m *MsgCreateMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoCrowResponse proto.InternalMessageInfo

type MsgUpdateMonoCrow struct {
	Seller       string   `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	CrowId       string   `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	WhitelistId  string   `protobuf:"bytes,3,opt,name=whitelistId,proto3" json:"whitelistId,omitempty"`
	SellerCrowId string   `protobuf:"bytes,4,opt,name=sellerCrowId,proto3" json:"sellerCrowId,omitempty"`
	BuyerCrowId  string   `protobuf:"bytes,5,opt,name=buyerCrowId,proto3" json:"buyerCrowId,omitempty"`
	DisputeId    []string `protobuf:"bytes,6,rep,name=disputeId,proto3" json:"disputeId,omitempty"`
	Timeout      []string `protobuf:"bytes,7,rep,name=timeout,proto3" json:"timeout,omitempty"`
	Status       string   `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgUpdateMonoCrow) Reset()         { *m = MsgUpdateMonoCrow{} }
func (m *MsgUpdateMonoCrow) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoCrow) ProtoMessage()    {}
func (*MsgUpdateMonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{14}
}
func (m *MsgUpdateMonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoCrow.Merge(m, src)
}
func (m *MsgUpdateMonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoCrow proto.InternalMessageInfo

func (m *MsgUpdateMonoCrow) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgUpdateMonoCrow) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgUpdateMonoCrow) GetWhitelistId() string {
	if m != nil {
		return m.WhitelistId
	}
	return ""
}

func (m *MsgUpdateMonoCrow) GetSellerCrowId() string {
	if m != nil {
		return m.SellerCrowId
	}
	return ""
}

func (m *MsgUpdateMonoCrow) GetBuyerCrowId() string {
	if m != nil {
		return m.BuyerCrowId
	}
	return ""
}

func (m *MsgUpdateMonoCrow) GetDisputeId() []string {
	if m != nil {
		return m.DisputeId
	}
	return nil
}

func (m *MsgUpdateMonoCrow) GetTimeout() []string {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *MsgUpdateMonoCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgUpdateMonoCrowResponse struct {
}

func (m *MsgUpdateMonoCrowResponse) Reset()         { *m = MsgUpdateMonoCrowResponse{} }
func (m *MsgUpdateMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoCrowResponse) ProtoMessage()    {}
func (*MsgUpdateMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{15}
}
func (m *MsgUpdateMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoCrowResponse.Merge(m, src)
}
func (m *MsgUpdateMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoCrowResponse proto.InternalMessageInfo

type MsgDeleteMonoCrow struct {
	Seller string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	CrowId string `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
}

func (m *MsgDeleteMonoCrow) Reset()         { *m = MsgDeleteMonoCrow{} }
func (m *MsgDeleteMonoCrow) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoCrow) ProtoMessage()    {}
func (*MsgDeleteMonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{16}
}
func (m *MsgDeleteMonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoCrow.Merge(m, src)
}
func (m *MsgDeleteMonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoCrow proto.InternalMessageInfo

func (m *MsgDeleteMonoCrow) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgDeleteMonoCrow) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

type MsgDeleteMonoCrowResponse struct {
}

func (m *MsgDeleteMonoCrowResponse) Reset()         { *m = MsgDeleteMonoCrowResponse{} }
func (m *MsgDeleteMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoCrowResponse) ProtoMessage()    {}
func (*MsgDeleteMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{17}
}
func (m *MsgDeleteMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoCrowResponse.Merge(m, src)
}
func (m *MsgDeleteMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoCrowResponse proto.InternalMessageInfo

type MsgCreateMonoDispute struct {
	Plaintiff string `protobuf:"bytes,1,opt,name=plaintiff,proto3" json:"plaintiff,omitempty"`
	DisputeId string `protobuf:"bytes,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Desc      string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Evidence  string `protobuf:"bytes,5,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *MsgCreateMonoDispute) Reset()         { *m = MsgCreateMonoDispute{} }
func (m *MsgCreateMonoDispute) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoDispute) ProtoMessage()    {}
func (*MsgCreateMonoDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{18}
}
func (m *MsgCreateMonoDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoDispute.Merge(m, src)
}
func (m *MsgCreateMonoDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoDispute proto.InternalMessageInfo

func (m *MsgCreateMonoDispute) GetPlaintiff() string {
	if m != nil {
		return m.Plaintiff
	}
	return ""
}

func (m *MsgCreateMonoDispute) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *MsgCreateMonoDispute) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreateMonoDispute) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgCreateMonoDispute) GetEvidence() string {
	if m != nil {
		return m.Evidence
	}
	return ""
}

type MsgCreateMonoDisputeResponse struct {
}

func (m *MsgCreateMonoDisputeResponse) Reset()         { *m = MsgCreateMonoDisputeResponse{} }
func (m *MsgCreateMonoDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoDisputeResponse) ProtoMessage()    {}
func (*MsgCreateMonoDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{19}
}
func (m *MsgCreateMonoDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoDisputeResponse.Merge(m, src)
}
func (m *MsgCreateMonoDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoDisputeResponse proto.InternalMessageInfo

type MsgUpdateMonoDispute struct {
	Plaintiff string `protobuf:"bytes,1,opt,name=plaintiff,proto3" json:"plaintiff,omitempty"`
	DisputeId string `protobuf:"bytes,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Desc      string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Evidence  string `protobuf:"bytes,5,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *MsgUpdateMonoDispute) Reset()         { *m = MsgUpdateMonoDispute{} }
func (m *MsgUpdateMonoDispute) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoDispute) ProtoMessage()    {}
func (*MsgUpdateMonoDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{20}
}
func (m *MsgUpdateMonoDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoDispute.Merge(m, src)
}
func (m *MsgUpdateMonoDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoDispute proto.InternalMessageInfo

func (m *MsgUpdateMonoDispute) GetPlaintiff() string {
	if m != nil {
		return m.Plaintiff
	}
	return ""
}

func (m *MsgUpdateMonoDispute) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *MsgUpdateMonoDispute) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgUpdateMonoDispute) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgUpdateMonoDispute) GetEvidence() string {
	if m != nil {
		return m.Evidence
	}
	return ""
}

type MsgUpdateMonoDisputeResponse struct {
}

func (m *MsgUpdateMonoDisputeResponse) Reset()         { *m = MsgUpdateMonoDisputeResponse{} }
func (m *MsgUpdateMonoDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoDisputeResponse) ProtoMessage()    {}
func (*MsgUpdateMonoDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{21}
}
func (m *MsgUpdateMonoDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoDisputeResponse.Merge(m, src)
}
func (m *MsgUpdateMonoDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoDisputeResponse proto.InternalMessageInfo

type MsgDeleteMonoDispute struct {
	Plaintiff string `protobuf:"bytes,1,opt,name=plaintiff,proto3" json:"plaintiff,omitempty"`
	DisputeId string `protobuf:"bytes,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
}

func (m *MsgDeleteMonoDispute) Reset()         { *m = MsgDeleteMonoDispute{} }
func (m *MsgDeleteMonoDispute) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoDispute) ProtoMessage()    {}
func (*MsgDeleteMonoDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{22}
}
func (m *MsgDeleteMonoDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoDispute.Merge(m, src)
}
func (m *MsgDeleteMonoDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoDispute proto.InternalMessageInfo

func (m *MsgDeleteMonoDispute) GetPlaintiff() string {
	if m != nil {
		return m.Plaintiff
	}
	return ""
}

func (m *MsgDeleteMonoDispute) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

type MsgDeleteMonoDisputeResponse struct {
}

func (m *MsgDeleteMonoDisputeResponse) Reset()         { *m = MsgDeleteMonoDisputeResponse{} }
func (m *MsgDeleteMonoDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoDisputeResponse) ProtoMessage()    {}
func (*MsgDeleteMonoDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{23}
}
func (m *MsgDeleteMonoDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoDisputeResponse.Merge(m, src)
}
func (m *MsgDeleteMonoDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoDisputeResponse proto.InternalMessageInfo

type MsgCreateMonoRebutal struct {
	Defendant  string `protobuf:"bytes,1,opt,name=defendant,proto3" json:"defendant,omitempty"`
	RebuttalId string `protobuf:"bytes,2,opt,name=rebuttalId,proto3" json:"rebuttalId,omitempty"`
	Desc       string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Evidence   string `protobuf:"bytes,4,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *MsgCreateMonoRebutal) Reset()         { *m = MsgCreateMonoRebutal{} }
func (m *MsgCreateMonoRebutal) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoRebutal) ProtoMessage()    {}
func (*MsgCreateMonoRebutal) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{24}
}
func (m *MsgCreateMonoRebutal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoRebutal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoRebutal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoRebutal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoRebutal.Merge(m, src)
}
func (m *MsgCreateMonoRebutal) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoRebutal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoRebutal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoRebutal proto.InternalMessageInfo

func (m *MsgCreateMonoRebutal) GetDefendant() string {
	if m != nil {
		return m.Defendant
	}
	return ""
}

func (m *MsgCreateMonoRebutal) GetRebuttalId() string {
	if m != nil {
		return m.RebuttalId
	}
	return ""
}

func (m *MsgCreateMonoRebutal) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgCreateMonoRebutal) GetEvidence() string {
	if m != nil {
		return m.Evidence
	}
	return ""
}

type MsgCreateMonoRebutalResponse struct {
}

func (m *MsgCreateMonoRebutalResponse) Reset()         { *m = MsgCreateMonoRebutalResponse{} }
func (m *MsgCreateMonoRebutalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMonoRebutalResponse) ProtoMessage()    {}
func (*MsgCreateMonoRebutalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{25}
}
func (m *MsgCreateMonoRebutalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMonoRebutalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMonoRebutalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMonoRebutalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMonoRebutalResponse.Merge(m, src)
}
func (m *MsgCreateMonoRebutalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMonoRebutalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMonoRebutalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMonoRebutalResponse proto.InternalMessageInfo

type MsgUpdateMonoRebutal struct {
	Defendant  string `protobuf:"bytes,1,opt,name=defendant,proto3" json:"defendant,omitempty"`
	RebuttalId string `protobuf:"bytes,2,opt,name=rebuttalId,proto3" json:"rebuttalId,omitempty"`
	Desc       string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Evidence   string `protobuf:"bytes,4,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *MsgUpdateMonoRebutal) Reset()         { *m = MsgUpdateMonoRebutal{} }
func (m *MsgUpdateMonoRebutal) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoRebutal) ProtoMessage()    {}
func (*MsgUpdateMonoRebutal) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{26}
}
func (m *MsgUpdateMonoRebutal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoRebutal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoRebutal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoRebutal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoRebutal.Merge(m, src)
}
func (m *MsgUpdateMonoRebutal) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoRebutal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoRebutal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoRebutal proto.InternalMessageInfo

func (m *MsgUpdateMonoRebutal) GetDefendant() string {
	if m != nil {
		return m.Defendant
	}
	return ""
}

func (m *MsgUpdateMonoRebutal) GetRebuttalId() string {
	if m != nil {
		return m.RebuttalId
	}
	return ""
}

func (m *MsgUpdateMonoRebutal) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgUpdateMonoRebutal) GetEvidence() string {
	if m != nil {
		return m.Evidence
	}
	return ""
}

type MsgUpdateMonoRebutalResponse struct {
}

func (m *MsgUpdateMonoRebutalResponse) Reset()         { *m = MsgUpdateMonoRebutalResponse{} }
func (m *MsgUpdateMonoRebutalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMonoRebutalResponse) ProtoMessage()    {}
func (*MsgUpdateMonoRebutalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{27}
}
func (m *MsgUpdateMonoRebutalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMonoRebutalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMonoRebutalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMonoRebutalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMonoRebutalResponse.Merge(m, src)
}
func (m *MsgUpdateMonoRebutalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMonoRebutalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMonoRebutalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMonoRebutalResponse proto.InternalMessageInfo

type MsgDeleteMonoRebutal struct {
	Defendant  string `protobuf:"bytes,1,opt,name=defendant,proto3" json:"defendant,omitempty"`
	RebuttalId string `protobuf:"bytes,2,opt,name=rebuttalId,proto3" json:"rebuttalId,omitempty"`
}

func (m *MsgDeleteMonoRebutal) Reset()         { *m = MsgDeleteMonoRebutal{} }
func (m *MsgDeleteMonoRebutal) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoRebutal) ProtoMessage()    {}
func (*MsgDeleteMonoRebutal) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{28}
}
func (m *MsgDeleteMonoRebutal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoRebutal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoRebutal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoRebutal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoRebutal.Merge(m, src)
}
func (m *MsgDeleteMonoRebutal) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoRebutal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoRebutal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoRebutal proto.InternalMessageInfo

func (m *MsgDeleteMonoRebutal) GetDefendant() string {
	if m != nil {
		return m.Defendant
	}
	return ""
}

func (m *MsgDeleteMonoRebutal) GetRebuttalId() string {
	if m != nil {
		return m.RebuttalId
	}
	return ""
}

type MsgDeleteMonoRebutalResponse struct {
}

func (m *MsgDeleteMonoRebutalResponse) Reset()         { *m = MsgDeleteMonoRebutalResponse{} }
func (m *MsgDeleteMonoRebutalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMonoRebutalResponse) ProtoMessage()    {}
func (*MsgDeleteMonoRebutalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{29}
}
func (m *MsgDeleteMonoRebutalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMonoRebutalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMonoRebutalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMonoRebutalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMonoRebutalResponse.Merge(m, src)
}
func (m *MsgDeleteMonoRebutalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMonoRebutalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMonoRebutalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMonoRebutalResponse proto.InternalMessageInfo

type MsgCreateVote struct {
	Voter            string       `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	VoteId           string       `protobuf:"bytes,2,opt,name=voteId,proto3" json:"voteId,omitempty"`
	BuyerGuilty      bool         `protobuf:"varint,3,opt,name=buyerGuilty,proto3" json:"buyerGuilty,omitempty"`
	SellerGuilty     bool         `protobuf:"varint,4,opt,name=sellerGuilty,proto3" json:"sellerGuilty,omitempty"`
	RefundToBuyer    []types.Coin `protobuf:"bytes,5,rep,name=refundToBuyer,proto3" json:"refundToBuyer"`
	SendToSeller     []types.Coin `protobuf:"bytes,6,rep,name=sendToSeller,proto3" json:"sendToSeller"`
	BuyerPunishment  string       `protobuf:"bytes,7,opt,name=buyerPunishment,proto3" json:"buyerPunishment,omitempty"`
	SellerPunishment string       `protobuf:"bytes,8,opt,name=sellerPunishment,proto3" json:"sellerPunishment,omitempty"`
}

func (m *MsgCreateVote) Reset()         { *m = MsgCreateVote{} }
func (m *MsgCreateVote) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVote) ProtoMessage()    {}
func (*MsgCreateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{30}
}
func (m *MsgCreateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVote.Merge(m, src)
}
func (m *MsgCreateVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVote proto.InternalMessageInfo

func (m *MsgCreateVote) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *MsgCreateVote) GetVoteId() string {
	if m != nil {
		return m.VoteId
	}
	return ""
}

func (m *MsgCreateVote) GetBuyerGuilty() bool {
	if m != nil {
		return m.BuyerGuilty
	}
	return false
}

func (m *MsgCreateVote) GetSellerGuilty() bool {
	if m != nil {
		return m.SellerGuilty
	}
	return false
}

func (m *MsgCreateVote) GetRefundToBuyer() []types.Coin {
	if m != nil {
		return m.RefundToBuyer
	}
	return nil
}

func (m *MsgCreateVote) GetSendToSeller() []types.Coin {
	if m != nil {
		return m.SendToSeller
	}
	return nil
}

func (m *MsgCreateVote) GetBuyerPunishment() string {
	if m != nil {
		return m.BuyerPunishment
	}
	return ""
}

func (m *MsgCreateVote) GetSellerPunishment() string {
	if m != nil {
		return m.SellerPunishment
	}
	return ""
}

type MsgCreateVoteResponse struct {
}

func (m *MsgCreateVoteResponse) Reset()         { *m = MsgCreateVoteResponse{} }
func (m *MsgCreateVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVoteResponse) ProtoMessage()    {}
func (*MsgCreateVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{31}
}
func (m *MsgCreateVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVoteResponse.Merge(m, src)
}
func (m *MsgCreateVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVoteResponse proto.InternalMessageInfo

type MsgUpdateVote struct {
	Voter            string       `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	VoteId           string       `protobuf:"bytes,2,opt,name=voteId,proto3" json:"voteId,omitempty"`
	BuyerGuilty      bool         `protobuf:"varint,3,opt,name=buyerGuilty,proto3" json:"buyerGuilty,omitempty"`
	SellerGuilty     bool         `protobuf:"varint,4,opt,name=sellerGuilty,proto3" json:"sellerGuilty,omitempty"`
	RefundToBuyer    []types.Coin `protobuf:"bytes,5,rep,name=refundToBuyer,proto3" json:"refundToBuyer"`
	SendToSeller     []types.Coin `protobuf:"bytes,6,rep,name=sendToSeller,proto3" json:"sendToSeller"`
	BuyerPunishment  string       `protobuf:"bytes,7,opt,name=buyerPunishment,proto3" json:"buyerPunishment,omitempty"`
	SellerPunishment string       `protobuf:"bytes,8,opt,name=sellerPunishment,proto3" json:"sellerPunishment,omitempty"`
}

func (m *MsgUpdateVote) Reset()         { *m = MsgUpdateVote{} }
func (m *MsgUpdateVote) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVote) ProtoMessage()    {}
func (*MsgUpdateVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{32}
}
func (m *MsgUpdateVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVote.Merge(m, src)
}
func (m *MsgUpdateVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVote proto.InternalMessageInfo

func (m *MsgUpdateVote) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *MsgUpdateVote) GetVoteId() string {
	if m != nil {
		return m.VoteId
	}
	return ""
}

func (m *MsgUpdateVote) GetBuyerGuilty() bool {
	if m != nil {
		return m.BuyerGuilty
	}
	return false
}

func (m *MsgUpdateVote) GetSellerGuilty() bool {
	if m != nil {
		return m.SellerGuilty
	}
	return false
}

func (m *MsgUpdateVote) GetRefundToBuyer() []types.Coin {
	if m != nil {
		return m.RefundToBuyer
	}
	return nil
}

func (m *MsgUpdateVote) GetSendToSeller() []types.Coin {
	if m != nil {
		return m.SendToSeller
	}
	return nil
}

func (m *MsgUpdateVote) GetBuyerPunishment() string {
	if m != nil {
		return m.BuyerPunishment
	}
	return ""
}

func (m *MsgUpdateVote) GetSellerPunishment() string {
	if m != nil {
		return m.SellerPunishment
	}
	return ""
}

type MsgUpdateVoteResponse struct {
}

func (m *MsgUpdateVoteResponse) Reset()         { *m = MsgUpdateVoteResponse{} }
func (m *MsgUpdateVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVoteResponse) ProtoMessage()    {}
func (*MsgUpdateVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{33}
}
func (m *MsgUpdateVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVoteResponse.Merge(m, src)
}
func (m *MsgUpdateVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVoteResponse proto.InternalMessageInfo

type MsgDeleteVote struct {
	Voter  string `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	VoteId string `protobuf:"bytes,2,opt,name=voteId,proto3" json:"voteId,omitempty"`
}

func (m *MsgDeleteVote) Reset()         { *m = MsgDeleteVote{} }
func (m *MsgDeleteVote) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteVote) ProtoMessage()    {}
func (*MsgDeleteVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{34}
}
func (m *MsgDeleteVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteVote.Merge(m, src)
}
func (m *MsgDeleteVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteVote proto.InternalMessageInfo

func (m *MsgDeleteVote) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *MsgDeleteVote) GetVoteId() string {
	if m != nil {
		return m.VoteId
	}
	return ""
}

type MsgDeleteVoteResponse struct {
}

func (m *MsgDeleteVoteResponse) Reset()         { *m = MsgDeleteVoteResponse{} }
func (m *MsgDeleteVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteVoteResponse) ProtoMessage()    {}
func (*MsgDeleteVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{35}
}
func (m *MsgDeleteVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteVoteResponse.Merge(m, src)
}
func (m *MsgDeleteVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteVoteResponse proto.InternalMessageInfo

type MsgCreateVerdict struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VerdictId     string   `protobuf:"bytes,2,opt,name=verdictId,proto3" json:"verdictId,omitempty"`
	VoteIds       []string `protobuf:"bytes,3,rep,name=voteIds,proto3" json:"voteIds,omitempty"`
	ResultingVote *Vote    `protobuf:"bytes,4,opt,name=resultingVote,proto3" json:"resultingVote,omitempty"`
}

func (m *MsgCreateVerdict) Reset()         { *m = MsgCreateVerdict{} }
func (m *MsgCreateVerdict) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVerdict) ProtoMessage()    {}
func (*MsgCreateVerdict) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{36}
}
func (m *MsgCreateVerdict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVerdict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVerdict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVerdict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVerdict.Merge(m, src)
}
func (m *MsgCreateVerdict) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVerdict) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVerdict.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVerdict proto.InternalMessageInfo

func (m *MsgCreateVerdict) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateVerdict) GetVerdictId() string {
	if m != nil {
		return m.VerdictId
	}
	return ""
}

func (m *MsgCreateVerdict) GetVoteIds() []string {
	if m != nil {
		return m.VoteIds
	}
	return nil
}

func (m *MsgCreateVerdict) GetResultingVote() *Vote {
	if m != nil {
		return m.ResultingVote
	}
	return nil
}

type MsgCreateVerdictResponse struct {
}

func (m *MsgCreateVerdictResponse) Reset()         { *m = MsgCreateVerdictResponse{} }
func (m *MsgCreateVerdictResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVerdictResponse) ProtoMessage()    {}
func (*MsgCreateVerdictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{37}
}
func (m *MsgCreateVerdictResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVerdictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVerdictResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVerdictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVerdictResponse.Merge(m, src)
}
func (m *MsgCreateVerdictResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVerdictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVerdictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVerdictResponse proto.InternalMessageInfo

type MsgUpdateVerdict struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VerdictId     string   `protobuf:"bytes,2,opt,name=verdictId,proto3" json:"verdictId,omitempty"`
	VoteIds       []string `protobuf:"bytes,3,rep,name=voteIds,proto3" json:"voteIds,omitempty"`
	ResultingVote *Vote    `protobuf:"bytes,4,opt,name=resultingVote,proto3" json:"resultingVote,omitempty"`
}

func (m *MsgUpdateVerdict) Reset()         { *m = MsgUpdateVerdict{} }
func (m *MsgUpdateVerdict) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVerdict) ProtoMessage()    {}
func (*MsgUpdateVerdict) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{38}
}
func (m *MsgUpdateVerdict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVerdict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVerdict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVerdict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVerdict.Merge(m, src)
}
func (m *MsgUpdateVerdict) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVerdict) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVerdict.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVerdict proto.InternalMessageInfo

func (m *MsgUpdateVerdict) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateVerdict) GetVerdictId() string {
	if m != nil {
		return m.VerdictId
	}
	return ""
}

func (m *MsgUpdateVerdict) GetVoteIds() []string {
	if m != nil {
		return m.VoteIds
	}
	return nil
}

func (m *MsgUpdateVerdict) GetResultingVote() *Vote {
	if m != nil {
		return m.ResultingVote
	}
	return nil
}

type MsgUpdateVerdictResponse struct {
}

func (m *MsgUpdateVerdictResponse) Reset()         { *m = MsgUpdateVerdictResponse{} }
func (m *MsgUpdateVerdictResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVerdictResponse) ProtoMessage()    {}
func (*MsgUpdateVerdictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{39}
}
func (m *MsgUpdateVerdictResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVerdictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVerdictResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVerdictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVerdictResponse.Merge(m, src)
}
func (m *MsgUpdateVerdictResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVerdictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVerdictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVerdictResponse proto.InternalMessageInfo

type MsgDeleteVerdict struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VerdictId string `protobuf:"bytes,2,opt,name=verdictId,proto3" json:"verdictId,omitempty"`
}

func (m *MsgDeleteVerdict) Reset()         { *m = MsgDeleteVerdict{} }
func (m *MsgDeleteVerdict) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteVerdict) ProtoMessage()    {}
func (*MsgDeleteVerdict) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{40}
}
func (m *MsgDeleteVerdict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteVerdict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteVerdict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteVerdict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteVerdict.Merge(m, src)
}
func (m *MsgDeleteVerdict) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteVerdict) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteVerdict.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteVerdict proto.InternalMessageInfo

func (m *MsgDeleteVerdict) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteVerdict) GetVerdictId() string {
	if m != nil {
		return m.VerdictId
	}
	return ""
}

type MsgDeleteVerdictResponse struct {
}

func (m *MsgDeleteVerdictResponse) Reset()         { *m = MsgDeleteVerdictResponse{} }
func (m *MsgDeleteVerdictResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteVerdictResponse) ProtoMessage()    {}
func (*MsgDeleteVerdictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{41}
}
func (m *MsgDeleteVerdictResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteVerdictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteVerdictResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteVerdictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteVerdictResponse.Merge(m, src)
}
func (m *MsgDeleteVerdictResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteVerdictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteVerdictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteVerdictResponse proto.InternalMessageInfo

type MsgBeginCrow struct {
	Seller     string       `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	CrowId     string       `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	Collateral []types.Coin `protobuf:"bytes,3,rep,name=collateral,proto3" json:"collateral"`
}

func (m *MsgBeginCrow) Reset()         { *m = MsgBeginCrow{} }
func (m *MsgBeginCrow) String() string { return proto.CompactTextString(m) }
func (*MsgBeginCrow) ProtoMessage()    {}
func (*MsgBeginCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{42}
}
func (m *MsgBeginCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBeginCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBeginCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBeginCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBeginCrow.Merge(m, src)
}
func (m *MsgBeginCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgBeginCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBeginCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBeginCrow proto.InternalMessageInfo

func (m *MsgBeginCrow) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgBeginCrow) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgBeginCrow) GetCollateral() []types.Coin {
	if m != nil {
		return m.Collateral
	}
	return nil
}

type MsgBeginCrowResponse struct {
}

func (m *MsgBeginCrowResponse) Reset()         { *m = MsgBeginCrowResponse{} }
func (m *MsgBeginCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBeginCrowResponse) ProtoMessage()    {}
func (*MsgBeginCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{43}
}
func (m *MsgBeginCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBeginCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBeginCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBeginCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBeginCrowResponse.Merge(m, src)
}
func (m *MsgBeginCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBeginCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBeginCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBeginCrowResponse proto.InternalMessageInfo

type MsgJoinCrow struct {
	Buyer      string       `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	CrowId     string       `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	Deposit    []types.Coin `protobuf:"bytes,3,rep,name=deposit,proto3" json:"deposit"`
	Collateral []types.Coin `protobuf:"bytes,4,rep,name=collateral,proto3" json:"collateral"`
}

func (m *MsgJoinCrow) Reset()         { *m = MsgJoinCrow{} }
func (m *MsgJoinCrow) String() string { return proto.CompactTextString(m) }
func (*MsgJoinCrow) ProtoMessage()    {}
func (*MsgJoinCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{44}
}
func (m *MsgJoinCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinCrow.Merge(m, src)
}
func (m *MsgJoinCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinCrow proto.InternalMessageInfo

func (m *MsgJoinCrow) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgJoinCrow) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgJoinCrow) GetDeposit() []types.Coin {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *MsgJoinCrow) GetCollateral() []types.Coin {
	if m != nil {
		return m.Collateral
	}
	return nil
}

type MsgJoinCrowResponse struct {
}

func (m *MsgJoinCrowResponse) Reset()         { *m = MsgJoinCrowResponse{} }
func (m *MsgJoinCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinCrowResponse) ProtoMessage()    {}
func (*MsgJoinCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{45}
}
func (m *MsgJoinCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinCrowResponse.Merge(m, src)
}
func (m *MsgJoinCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinCrowResponse proto.InternalMessageInfo

type MsgSellerRaiseDispute struct {
	Seller   string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	CrowId   string `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Desc     string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Evidence string `protobuf:"bytes,5,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *MsgSellerRaiseDispute) Reset()         { *m = MsgSellerRaiseDispute{} }
func (m *MsgSellerRaiseDispute) String() string { return proto.CompactTextString(m) }
func (*MsgSellerRaiseDispute) ProtoMessage()    {}
func (*MsgSellerRaiseDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{46}
}
func (m *MsgSellerRaiseDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellerRaiseDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellerRaiseDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellerRaiseDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellerRaiseDispute.Merge(m, src)
}
func (m *MsgSellerRaiseDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellerRaiseDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellerRaiseDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellerRaiseDispute proto.InternalMessageInfo

func (m *MsgSellerRaiseDispute) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgSellerRaiseDispute) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgSellerRaiseDispute) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgSellerRaiseDispute) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgSellerRaiseDispute) GetEvidence() string {
	if m != nil {
		return m.Evidence
	}
	return ""
}

type MsgSellerRaiseDisputeResponse struct {
	DisputeId string `protobuf:"bytes,1,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
}

func (m *MsgSellerRaiseDisputeResponse) Reset()         { *m = MsgSellerRaiseDisputeResponse{} }
func (m *MsgSellerRaiseDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSellerRaiseDisputeResponse) ProtoMessage()    {}
func (*MsgSellerRaiseDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{47}
}
func (m *MsgSellerRaiseDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellerRaiseDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellerRaiseDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellerRaiseDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellerRaiseDisputeResponse.Merge(m, src)
}
func (m *MsgSellerRaiseDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellerRaiseDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellerRaiseDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellerRaiseDisputeResponse proto.InternalMessageInfo

func (m *MsgSellerRaiseDisputeResponse) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

type MsgBuyerRaiseDispute struct {
	Buyer    string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	CrowId   string `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Desc     string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Evidence string `protobuf:"bytes,5,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *MsgBuyerRaiseDispute) Reset()         { *m = MsgBuyerRaiseDispute{} }
func (m *MsgBuyerRaiseDispute) String() string { return proto.CompactTextString(m) }
func (*MsgBuyerRaiseDispute) ProtoMessage()    {}
func (*MsgBuyerRaiseDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{48}
}
func (m *MsgBuyerRaiseDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyerRaiseDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyerRaiseDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyerRaiseDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyerRaiseDispute.Merge(m, src)
}
func (m *MsgBuyerRaiseDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyerRaiseDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyerRaiseDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyerRaiseDispute proto.InternalMessageInfo

func (m *MsgBuyerRaiseDispute) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgBuyerRaiseDispute) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgBuyerRaiseDispute) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgBuyerRaiseDispute) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgBuyerRaiseDispute) GetEvidence() string {
	if m != nil {
		return m.Evidence
	}
	return ""
}

type MsgBuyerRaiseDisputeResponse struct {
	DisputeId string `protobuf:"bytes,1,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
}

func (m *MsgBuyerRaiseDisputeResponse) Reset()         { *m = MsgBuyerRaiseDisputeResponse{} }
func (m *MsgBuyerRaiseDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyerRaiseDisputeResponse) ProtoMessage()    {}
func (*MsgBuyerRaiseDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{49}
}
func (m *MsgBuyerRaiseDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyerRaiseDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyerRaiseDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyerRaiseDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyerRaiseDisputeResponse.Merge(m, src)
}
func (m *MsgBuyerRaiseDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyerRaiseDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyerRaiseDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyerRaiseDisputeResponse proto.InternalMessageInfo

func (m *MsgBuyerRaiseDisputeResponse) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

type MsgSellerDisputeRebuttal struct {
	Seller   string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	CrowId   string `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	Desc     string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Evidence string `protobuf:"bytes,4,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *MsgSellerDisputeRebuttal) Reset()         { *m = MsgSellerDisputeRebuttal{} }
func (m *MsgSellerDisputeRebuttal) String() string { return proto.CompactTextString(m) }
func (*MsgSellerDisputeRebuttal) ProtoMessage()    {}
func (*MsgSellerDisputeRebuttal) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{50}
}
func (m *MsgSellerDisputeRebuttal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellerDisputeRebuttal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellerDisputeRebuttal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellerDisputeRebuttal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellerDisputeRebuttal.Merge(m, src)
}
func (m *MsgSellerDisputeRebuttal) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellerDisputeRebuttal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellerDisputeRebuttal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellerDisputeRebuttal proto.InternalMessageInfo

func (m *MsgSellerDisputeRebuttal) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgSellerDisputeRebuttal) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgSellerDisputeRebuttal) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgSellerDisputeRebuttal) GetEvidence() string {
	if m != nil {
		return m.Evidence
	}
	return ""
}

type MsgSellerDisputeRebuttalResponse struct {
}

func (m *MsgSellerDisputeRebuttalResponse) Reset()         { *m = MsgSellerDisputeRebuttalResponse{} }
func (m *MsgSellerDisputeRebuttalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSellerDisputeRebuttalResponse) ProtoMessage()    {}
func (*MsgSellerDisputeRebuttalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{51}
}
func (m *MsgSellerDisputeRebuttalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellerDisputeRebuttalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellerDisputeRebuttalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellerDisputeRebuttalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellerDisputeRebuttalResponse.Merge(m, src)
}
func (m *MsgSellerDisputeRebuttalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellerDisputeRebuttalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellerDisputeRebuttalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellerDisputeRebuttalResponse proto.InternalMessageInfo

type MsgBuyerDisputeRebuttal struct {
	Buyer    string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	CrowId   string `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
	Desc     string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Evidence string `protobuf:"bytes,4,opt,name=evidence,proto3" json:"evidence,omitempty"`
}

func (m *MsgBuyerDisputeRebuttal) Reset()         { *m = MsgBuyerDisputeRebuttal{} }
func (m *MsgBuyerDisputeRebuttal) String() string { return proto.CompactTextString(m) }
func (*MsgBuyerDisputeRebuttal) ProtoMessage()    {}
func (*MsgBuyerDisputeRebuttal) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{52}
}
func (m *MsgBuyerDisputeRebuttal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyerDisputeRebuttal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyerDisputeRebuttal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyerDisputeRebuttal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyerDisputeRebuttal.Merge(m, src)
}
func (m *MsgBuyerDisputeRebuttal) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyerDisputeRebuttal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyerDisputeRebuttal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyerDisputeRebuttal proto.InternalMessageInfo

func (m *MsgBuyerDisputeRebuttal) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgBuyerDisputeRebuttal) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MsgBuyerDisputeRebuttal) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MsgBuyerDisputeRebuttal) GetEvidence() string {
	if m != nil {
		return m.Evidence
	}
	return ""
}

type MsgBuyerDisputeRebuttalResponse struct {
}

func (m *MsgBuyerDisputeRebuttalResponse) Reset()         { *m = MsgBuyerDisputeRebuttalResponse{} }
func (m *MsgBuyerDisputeRebuttalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyerDisputeRebuttalResponse) ProtoMessage()    {}
func (*MsgBuyerDisputeRebuttalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{53}
}
func (m *MsgBuyerDisputeRebuttalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyerDisputeRebuttalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyerDisputeRebuttalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyerDisputeRebuttalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyerDisputeRebuttalResponse.Merge(m, src)
}
func (m *MsgBuyerDisputeRebuttalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyerDisputeRebuttalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyerDisputeRebuttalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyerDisputeRebuttalResponse proto.InternalMessageInfo

type MsgVoteOnDispute struct {
	Voter            string       `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	DisputeId        string       `protobuf:"bytes,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	BuyerGuilty      bool         `protobuf:"varint,3,opt,name=buyerGuilty,proto3" json:"buyerGuilty,omitempty"`
	SellerGuilty     bool         `protobuf:"varint,4,opt,name=sellerGuilty,proto3" json:"sellerGuilty,omitempty"`
	RefundToBuyer    []types.Coin `protobuf:"bytes,5,rep,name=refundToBuyer,proto3" json:"refundToBuyer"`
	SendToSeller     []types.Coin `protobuf:"bytes,6,rep,name=sendToSeller,proto3" json:"sendToSeller"`
	BuyerPunishment  string       `protobuf:"bytes,7,opt,name=buyerPunishment,proto3" json:"buyerPunishment,omitempty"`
	SellerPunishment string       `protobuf:"bytes,8,opt,name=sellerPunishment,proto3" json:"sellerPunishment,omitempty"`
}

func (m *MsgVoteOnDispute) Reset()         { *m = MsgVoteOnDispute{} }
func (m *MsgVoteOnDispute) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnDispute) ProtoMessage()    {}
func (*MsgVoteOnDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{54}
}
func (m *MsgVoteOnDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnDispute.Merge(m, src)
}
func (m *MsgVoteOnDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnDispute proto.InternalMessageInfo

func (m *MsgVoteOnDispute) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *MsgVoteOnDispute) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *MsgVoteOnDispute) GetBuyerGuilty() bool {
	if m != nil {
		return m.BuyerGuilty
	}
	return false
}

func (m *MsgVoteOnDispute) GetSellerGuilty() bool {
	if m != nil {
		return m.SellerGuilty
	}
	return false
}

func (m *MsgVoteOnDispute) GetRefundToBuyer() []types.Coin {
	if m != nil {
		return m.RefundToBuyer
	}
	return nil
}

func (m *MsgVoteOnDispute) GetSendToSeller() []types.Coin {
	if m != nil {
		return m.SendToSeller
	}
	return nil
}

func (m *MsgVoteOnDispute) GetBuyerPunishment() string {
	if m != nil {
		return m.BuyerPunishment
	}
	return ""
}

func (m *MsgVoteOnDispute) GetSellerPunishment() string {
	if m != nil {
		return m.SellerPunishment
	}
	return ""
}

type MsgVoteOnDisputeResponse struct {
	VoteId string `protobuf:"bytes,1,opt,name=voteId,proto3" json:"voteId,omitempty"`
}

func (m *MsgVoteOnDisputeResponse) Reset()         { *m = MsgVoteOnDisputeResponse{} }
func (m *MsgVoteOnDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnDisputeResponse) ProtoMessage()    {}
func (*MsgVoteOnDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{55}
}
func (m *MsgVoteOnDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnDisputeResponse.Merge(m, src)
}
func (m *MsgVoteOnDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnDisputeResponse proto.InternalMessageInfo

func (m *MsgVoteOnDisputeResponse) GetVoteId() string {
	if m != nil {
		return m.VoteId
	}
	return ""
}

type MsgReleaseCrow struct {
	Buyer  string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	CrowId string `protobuf:"bytes,2,opt,name=crowId,proto3" json:"crowId,omitempty"`
}

func (m *MsgReleaseCrow) Reset()         { *m = MsgReleaseCrow{} }
func (m *MsgReleaseCrow) String() string { return proto.CompactTextString(m) }
func (*MsgReleaseCrow) ProtoMessage()    {}
func (*MsgReleaseCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{56}
}
func (m *MsgReleaseCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReleaseCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReleaseCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReleaseCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReleaseCrow.Merge(m, src)
}
func (m *MsgReleaseCrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgReleaseCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReleaseCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReleaseCrow proto.InternalMessageInfo

func (m *MsgReleaseCrow) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgReleaseCrow) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

type MsgReleaseCrowResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgReleaseCrowResponse) Reset()         { *m = MsgReleaseCrowResponse{} }
func (m *MsgReleaseCrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReleaseCrowResponse) ProtoMessage()    {}
func (*MsgReleaseCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e01f3e45c7c056c, []int{57}
}
func (m *MsgReleaseCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReleaseCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReleaseCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReleaseCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReleaseCrowResponse.Merge(m, src)
}
func (m *MsgReleaseCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReleaseCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReleaseCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReleaseCrowResponse proto.InternalMessageInfo

func (m *MsgReleaseCrowResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgCreateBuyerMonoCrow)(nil), "crowlabs.delta.escrow.MsgCreateBuyerMonoCrow")
	proto.RegisterType((*MsgCreateBuyerMonoCrowResponse)(nil), "crowlabs.delta.escrow.MsgCreateBuyerMonoCrowResponse")
	proto.RegisterType((*MsgUpdateBuyerMonoCrow)(nil), "crowlabs.delta.escrow.MsgUpdateBuyerMonoCrow")
	proto.RegisterType((*MsgUpdateBuyerMonoCrowResponse)(nil), "crowlabs.delta.escrow.MsgUpdateBuyerMonoCrowResponse")
	proto.RegisterType((*MsgDeleteBuyerMonoCrow)(nil), "crowlabs.delta.escrow.MsgDeleteBuyerMonoCrow")
	proto.RegisterType((*MsgDeleteBuyerMonoCrowResponse)(nil), "crowlabs.delta.escrow.MsgDeleteBuyerMonoCrowResponse")
	proto.RegisterType((*MsgCreateSellerMonoCrow)(nil), "crowlabs.delta.escrow.MsgCreateSellerMonoCrow")
	proto.RegisterType((*MsgCreateSellerMonoCrowResponse)(nil), "crowlabs.delta.escrow.MsgCreateSellerMonoCrowResponse")
	proto.RegisterType((*MsgUpdateSellerMonoCrow)(nil), "crowlabs.delta.escrow.MsgUpdateSellerMonoCrow")
	proto.RegisterType((*MsgUpdateSellerMonoCrowResponse)(nil), "crowlabs.delta.escrow.MsgUpdateSellerMonoCrowResponse")
	proto.RegisterType((*MsgDeleteSellerMonoCrow)(nil), "crowlabs.delta.escrow.MsgDeleteSellerMonoCrow")
	proto.RegisterType((*MsgDeleteSellerMonoCrowResponse)(nil), "crowlabs.delta.escrow.MsgDeleteSellerMonoCrowResponse")
	proto.RegisterType((*MsgCreateMonoCrow)(nil), "crowlabs.delta.escrow.MsgCreateMonoCrow")
	proto.RegisterType((*MsgCreateMonoCrowResponse)(nil), "crowlabs.delta.escrow.MsgCreateMonoCrowResponse")
	proto.RegisterType((*MsgUpdateMonoCrow)(nil), "crowlabs.delta.escrow.MsgUpdateMonoCrow")
	proto.RegisterType((*MsgUpdateMonoCrowResponse)(nil), "crowlabs.delta.escrow.MsgUpdateMonoCrowResponse")
	proto.RegisterType((*MsgDeleteMonoCrow)(nil), "crowlabs.delta.escrow.MsgDeleteMonoCrow")
	proto.RegisterType((*MsgDeleteMonoCrowResponse)(nil), "crowlabs.delta.escrow.MsgDeleteMonoCrowResponse")
	proto.RegisterType((*MsgCreateMonoDispute)(nil), "crowlabs.delta.escrow.MsgCreateMonoDispute")
	proto.RegisterType((*MsgCreateMonoDisputeResponse)(nil), "crowlabs.delta.escrow.MsgCreateMonoDisputeResponse")
	proto.RegisterType((*MsgUpdateMonoDispute)(nil), "crowlabs.delta.escrow.MsgUpdateMonoDispute")
	proto.RegisterType((*MsgUpdateMonoDisputeResponse)(nil), "crowlabs.delta.escrow.MsgUpdateMonoDisputeResponse")
	proto.RegisterType((*MsgDeleteMonoDispute)(nil), "crowlabs.delta.escrow.MsgDeleteMonoDispute")
	proto.RegisterType((*MsgDeleteMonoDisputeResponse)(nil), "crowlabs.delta.escrow.MsgDeleteMonoDisputeResponse")
	proto.RegisterType((*MsgCreateMonoRebutal)(nil), "crowlabs.delta.escrow.MsgCreateMonoRebutal")
	proto.RegisterType((*MsgCreateMonoRebutalResponse)(nil), "crowlabs.delta.escrow.MsgCreateMonoRebutalResponse")
	proto.RegisterType((*MsgUpdateMonoRebutal)(nil), "crowlabs.delta.escrow.MsgUpdateMonoRebutal")
	proto.RegisterType((*MsgUpdateMonoRebutalResponse)(nil), "crowlabs.delta.escrow.MsgUpdateMonoRebutalResponse")
	proto.RegisterType((*MsgDeleteMonoRebutal)(nil), "crowlabs.delta.escrow.MsgDeleteMonoRebutal")
	proto.RegisterType((*MsgDeleteMonoRebutalResponse)(nil), "crowlabs.delta.escrow.MsgDeleteMonoRebutalResponse")
	proto.RegisterType((*MsgCreateVote)(nil), "crowlabs.delta.escrow.MsgCreateVote")
	proto.RegisterType((*MsgCreateVoteResponse)(nil), "crowlabs.delta.escrow.MsgCreateVoteResponse")
	proto.RegisterType((*MsgUpdateVote)(nil), "crowlabs.delta.escrow.MsgUpdateVote")
	proto.RegisterType((*MsgUpdateVoteResponse)(nil), "crowlabs.delta.escrow.MsgUpdateVoteResponse")
	proto.RegisterType((*MsgDeleteVote)(nil), "crowlabs.delta.escrow.MsgDeleteVote")
	proto.RegisterType((*MsgDeleteVoteResponse)(nil), "crowlabs.delta.escrow.MsgDeleteVoteResponse")
	proto.RegisterType((*MsgCreateVerdict)(nil), "crowlabs.delta.escrow.MsgCreateVerdict")
	proto.RegisterType((*MsgCreateVerdictResponse)(nil), "crowlabs.delta.escrow.MsgCreateVerdictResponse")
	proto.RegisterType((*MsgUpdateVerdict)(nil), "crowlabs.delta.escrow.MsgUpdateVerdict")
	proto.RegisterType((*MsgUpdateVerdictResponse)(nil), "crowlabs.delta.escrow.MsgUpdateVerdictResponse")
	proto.RegisterType((*MsgDeleteVerdict)(nil), "crowlabs.delta.escrow.MsgDeleteVerdict")
	proto.RegisterType((*MsgDeleteVerdictResponse)(nil), "crowlabs.delta.escrow.MsgDeleteVerdictResponse")
	proto.RegisterType((*MsgBeginCrow)(nil), "crowlabs.delta.escrow.MsgBeginCrow")
	proto.RegisterType((*MsgBeginCrowResponse)(nil), "crowlabs.delta.escrow.MsgBeginCrowResponse")
	proto.RegisterType((*MsgJoinCrow)(nil), "crowlabs.delta.escrow.MsgJoinCrow")
	proto.RegisterType((*MsgJoinCrowResponse)(nil), "crowlabs.delta.escrow.MsgJoinCrowResponse")
	proto.RegisterType((*MsgSellerRaiseDispute)(nil), "crowlabs.delta.escrow.MsgSellerRaiseDispute")
	proto.RegisterType((*MsgSellerRaiseDisputeResponse)(nil), "crowlabs.delta.escrow.MsgSellerRaiseDisputeResponse")
	proto.RegisterType((*MsgBuyerRaiseDispute)(nil), "crowlabs.delta.escrow.MsgBuyerRaiseDispute")
	proto.RegisterType((*MsgBuyerRaiseDisputeResponse)(nil), "crowlabs.delta.escrow.MsgBuyerRaiseDisputeResponse")
	proto.RegisterType((*MsgSellerDisputeRebuttal)(nil), "crowlabs.delta.escrow.MsgSellerDisputeRebuttal")
	proto.RegisterType((*MsgSellerDisputeRebuttalResponse)(nil), "crowlabs.delta.escrow.MsgSellerDisputeRebuttalResponse")
	proto.RegisterType((*MsgBuyerDisputeRebuttal)(nil), "crowlabs.delta.escrow.MsgBuyerDisputeRebuttal")
	proto.RegisterType((*MsgBuyerDisputeRebuttalResponse)(nil), "crowlabs.delta.escrow.MsgBuyerDisputeRebuttalResponse")
	proto.RegisterType((*MsgVoteOnDispute)(nil), "crowlabs.delta.escrow.MsgVoteOnDispute")
	proto.RegisterType((*MsgVoteOnDisputeResponse)(nil), "crowlabs.delta.escrow.MsgVoteOnDisputeResponse")
	proto.RegisterType((*MsgReleaseCrow)(nil), "crowlabs.delta.escrow.MsgReleaseCrow")
	proto.RegisterType((*MsgReleaseCrowResponse)(nil), "crowlabs.delta.escrow.MsgReleaseCrowResponse")
}

func init() { proto.RegisterFile("escrow/tx.proto", fileDescriptor_8e01f3e45c7c056c) }

var fileDescriptor_8e01f3e45c7c056c = []byte{
	// 1619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcf, 0x8f, 0x14, 0xc5,
	0x17, 0xdf, 0x66, 0x66, 0x97, 0xdd, 0xb7, 0xfc, 0x6c, 0x76, 0x97, 0xd9, 0x06, 0x86, 0xfd, 0xce,
	0x17, 0xc3, 0xc8, 0x4a, 0x0f, 0x2c, 0x8a, 0x31, 0x11, 0x8d, 0xbb, 0x18, 0x03, 0xc9, 0x46, 0x32,
	0x82, 0x07, 0x12, 0x83, 0x3d, 0x33, 0xb5, 0x43, 0x27, 0xbd, 0xdd, 0x93, 0xe9, 0x1a, 0x16, 0x24,
	0xd1, 0x98, 0x78, 0x32, 0x31, 0xf1, 0xe8, 0x7f, 0xe0, 0xcd, 0xab, 0xff, 0x02, 0x47, 0x8e, 0x9e,
	0x8c, 0x01, 0xbd, 0x7a, 0xf5, 0xe0, 0xc5, 0xd4, 0x8f, 0xae, 0xa9, 0xea, 0xae, 0xe9, 0xae, 0x66,
	0xd7, 0x80, 0x81, 0xdb, 0x54, 0xf5, 0xab, 0xfa, 0x7c, 0xde, 0xe7, 0x55, 0x57, 0xbf, 0xf7, 0x32,
	0x70, 0x18, 0xc5, 0xdd, 0x61, 0xb4, 0xd3, 0xc2, 0xf7, 0xdd, 0xc1, 0x30, 0xc2, 0x91, 0xbd, 0x48,
	0x86, 0x81, 0xd7, 0x89, 0xdd, 0x1e, 0x0a, 0xb0, 0xe7, 0xb2, 0xe7, 0xce, 0x49, 0x6e, 0xd7, 0x19,
	0x3d, 0x40, 0xc3, 0x3b, 0xdb, 0x51, 0x18, 0xdd, 0x21, 0x63, 0xb6, 0xc8, 0x39, 0xc5, 0x9f, 0xc6,
	0x28, 0x08, 0x34, 0x8f, 0x97, 0xf8, 0xe3, 0xf4, 0xfc, 0xb2, 0x3c, 0xdf, 0xf3, 0xe3, 0xc1, 0x08,
	0x23, 0xdd, 0xa3, 0x21, 0xea, 0x8c, 0xb0, 0x17, 0xf0, 0x47, 0x0b, 0xfc, 0xd1, 0x3d, 0x34, 0xec,
	0xf9, 0x5d, 0xcc, 0x67, 0xeb, 0xdd, 0x28, 0xde, 0x8e, 0xe2, 0x56, 0xc7, 0x8b, 0x51, 0xeb, 0xde,
	0xc5, 0x0e, 0xc2, 0xde, 0xc5, 0x56, 0x37, 0xf2, 0xc3, 0x64, 0x55, 0x3f, 0xea, 0x47, 0xf4, 0x67,
	0x8b, 0xfc, 0xe2, 0xb3, 0x47, 0x93, 0xbd, 0xa2, 0x04, 0xb9, 0xf1, 0xbb, 0x05, 0x4b, 0x9b, 0x71,
	0x7f, 0x63, 0x88, 0x3c, 0x8c, 0xd6, 0x89, 0xbb, 0x9b, 0x51, 0x18, 0x6d, 0x0c, 0xa3, 0x1d, 0x7b,
	0x01, 0xa6, 0xa9, 0xff, 0x35, 0x6b, 0xc5, 0x6a, 0xce, 0xb5, 0xd9, 0xc0, 0x5e, 0x81, 0x79, 0xfa,
	0x83, 0x98, 0x5c, 0xeb, 0xd5, 0xf6, 0xd1, 0x67, 0xf2, 0x94, 0xfd, 0x0e, 0xec, 0xef, 0xa1, 0x41,
	0x14, 0xfb, 0xb8, 0x56, 0x59, 0xa9, 0x34, 0xe7, 0xd7, 0x96, 0x5d, 0xc6, 0xd6, 0x25, 0x6c, 0x5d,
	0xce, 0xd6, 0xdd, 0x88, 0xfc, 0x70, 0xbd, 0xfa, 0xe8, 0xd7, 0xd3, 0x53, 0xed, 0xc4, 0xde, 0x7e,
	0x1f, 0xa0, 0x1b, 0x05, 0x81, 0x87, 0xd1, 0xd0, 0x0b, 0x6a, 0x55, 0xb3, 0xd5, 0xd2, 0x12, 0x7b,
	0x09, 0x66, 0x62, 0xec, 0xe1, 0x51, 0x5c, 0x9b, 0xa6, 0xc4, 0xf8, 0xa8, 0xb1, 0x02, 0x75, 0xbd,
	0x97, 0x6d, 0x14, 0x0f, 0xa2, 0x30, 0x46, 0x89, 0x10, 0xb7, 0x06, 0xbd, 0x97, 0x40, 0x08, 0x8d,
	0x97, 0x42, 0x88, 0x1b, 0x54, 0x87, 0xab, 0x28, 0x40, 0x7b, 0xa4, 0x03, 0xc7, 0xd4, 0xec, 0x28,
	0x30, 0x7f, 0xb2, 0xe0, 0xb8, 0x88, 0xcf, 0x27, 0xf4, 0xb5, 0x12, 0xa8, 0xc4, 0x13, 0x3a, 0xc3,
	0x61, 0xf9, 0xc8, 0x6e, 0xc0, 0x01, 0xf6, 0x4b, 0x01, 0x56, 0xe6, 0x52, 0x32, 0x56, 0x76, 0x23,
	0x63, 0x55, 0x91, 0xf1, 0x7f, 0x70, 0x7a, 0x02, 0xdf, 0xb4, 0x4f, 0x4c, 0xea, 0xff, 0x8e, 0x4f,
	0x3a, 0xbe, 0xc2, 0xa7, 0x5b, 0xd4, 0x25, 0x16, 0xc9, 0xbd, 0x73, 0x89, 0x23, 0xeb, 0xb6, 0x15,
	0xc8, 0x7f, 0x5b, 0x70, 0x54, 0x28, 0x5e, 0x08, 0xba, 0x04, 0x33, 0x5d, 0x19, 0x8e, 0x8f, 0xc8,
	0x59, 0xdd, 0xb9, 0xeb, 0x63, 0x14, 0xf8, 0x31, 0xbe, 0xd6, 0xab, 0x55, 0xd8, 0x59, 0x95, 0xa6,
	0x32, 0x74, 0xab, 0x9a, 0x08, 0xa4, 0x4e, 0xfc, 0x74, 0xf6, 0xcd, 0x3f, 0x09, 0x73, 0xfc, 0x82,
	0xbf, 0xd6, 0xab, 0xcd, 0xac, 0x54, 0x9a, 0x73, 0xed, 0xf1, 0x84, 0x5d, 0x83, 0xfd, 0xd8, 0xdf,
	0x46, 0xd1, 0x08, 0xd7, 0xf6, 0xd3, 0x67, 0xc9, 0x50, 0x0a, 0xcd, 0xac, 0x12, 0x9a, 0x13, 0xb0,
	0x9c, 0x71, 0x3e, 0x2d, 0x0d, 0x0b, 0xdc, 0x4b, 0x2a, 0x8d, 0xea, 0xbc, 0x90, 0x66, 0x83, 0x2a,
	0xc3, 0x0e, 0xd6, 0xb3, 0x2a, 0xc3, 0x11, 0xd4, 0x4d, 0x04, 0xc2, 0x0f, 0x16, 0x2c, 0x28, 0xa1,
	0xb9, 0xca, 0x7c, 0x21, 0x7e, 0x0e, 0x02, 0xcf, 0x0f, 0xb1, 0xbf, 0xb5, 0xc5, 0x81, 0xc6, 0x13,
	0xaa, 0x0a, 0x0c, 0x4e, 0x52, 0x61, 0x01, 0xa6, 0xb1, 0x8f, 0x03, 0xc4, 0xa3, 0xc0, 0x06, 0xb6,
	0x0d, 0xd5, 0x1e, 0x8a, 0xbb, 0x5c, 0x77, 0xfa, 0xdb, 0x76, 0x60, 0x16, 0xdd, 0xf3, 0x7b, 0x28,
	0xec, 0x22, 0x2e, 0xb6, 0x18, 0x37, 0xea, 0x70, 0x52, 0xc7, 0x2c, 0x4d, 0x7d, 0x2c, 0xdd, 0x8b,
	0x46, 0x3d, 0xc3, 0x4c, 0x50, 0x6f, 0x53, 0xe6, 0xe3, 0x90, 0xec, 0x01, 0x73, 0x8e, 0x99, 0xd9,
	0x53, 0x60, 0x7e, 0x93, 0x8e, 0x74, 0x9b, 0xe5, 0x69, 0x74, 0x5b, 0xb4, 0x85, 0xc2, 0x9e, 0x17,
	0xe2, 0x04, 0x54, 0x4c, 0xd8, 0x75, 0x00, 0x9a, 0xd0, 0x61, 0x2f, 0x10, 0xa8, 0xd2, 0x8c, 0x90,
	0xa6, 0x32, 0x41, 0x9a, 0x6a, 0x41, 0x54, 0x39, 0x8b, 0x34, 0xcd, 0xb1, 0x76, 0xcf, 0x93, 0x66,
	0x86, 0x85, 0xa0, 0x79, 0x33, 0x15, 0xc1, 0x3d, 0x61, 0x99, 0x89, 0x61, 0x1a, 0xf5, 0x8f, 0x7d,
	0x70, 0x50, 0xa8, 0xf7, 0x69, 0x84, 0x11, 0x39, 0xaf, 0x24, 0x1b, 0x16, 0x39, 0x0d, 0x1d, 0x90,
	0xab, 0x80, 0xfc, 0x18, 0x5f, 0x05, 0x6c, 0x24, 0xae, 0xb7, 0x8f, 0x46, 0x7e, 0x80, 0x1f, 0x50,
	0x31, 0x66, 0xdb, 0xf2, 0xd4, 0xf8, 0x92, 0xe4, 0x26, 0x55, 0x6a, 0xa2, 0xcc, 0xd9, 0x1f, 0xc2,
	0xc1, 0x21, 0xda, 0x1a, 0x85, 0xbd, 0x9b, 0x11, 0x4d, 0x87, 0x6a, 0xd3, 0x66, 0x1f, 0x71, 0x75,
	0x95, 0xbd, 0x41, 0xa0, 0xc8, 0x90, 0x7d, 0x32, 0xe9, 0x65, 0x6a, 0xb0, 0x8b, 0xb2, 0xc8, 0x6e,
	0xc2, 0x61, 0x4a, 0xff, 0xc6, 0x28, 0xf4, 0xe3, 0xbb, 0xdb, 0x28, 0x24, 0x17, 0x2f, 0x71, 0x39,
	0x3d, 0x6d, 0x9f, 0x83, 0x23, 0xcc, 0x0b, 0xc9, 0x94, 0x5d, 0xc5, 0x99, 0xf9, 0xc6, 0x71, 0x58,
	0x54, 0x64, 0x4e, 0x07, 0x80, 0x9d, 0x8b, 0x57, 0x01, 0xf8, 0x97, 0x03, 0x30, 0x96, 0x59, 0x04,
	0xe0, 0x0a, 0xd5, 0x9f, 0xbd, 0x21, 0xe5, 0xf5, 0xe7, 0xfb, 0x8e, 0x97, 0x8b, 0x7d, 0x7f, 0xb4,
	0xe0, 0xc8, 0x38, 0xe4, 0xac, 0x56, 0x25, 0x5f, 0xf3, 0x2e, 0x99, 0x88, 0x92, 0xdd, 0x93, 0x21,
	0x79, 0xcd, 0x79, 0x41, 0x3b, 0xbe, 0x8a, 0xc5, 0x04, 0x59, 0xc7, 0xf0, 0x62, 0x9a, 0xdf, 0xce,
	0xb5, 0x93, 0xa1, 0xfd, 0x01, 0x89, 0x5c, 0x3c, 0x0a, 0xb0, 0x1f, 0xf6, 0x09, 0x3e, 0x0d, 0xef,
	0xfc, 0xda, 0x09, 0x57, 0x5b, 0xc7, 0xbb, 0x94, 0xa2, 0xba, 0xa2, 0xe1, 0x40, 0x2d, 0x4d, 0x34,
	0xed, 0x05, 0xd7, 0xed, 0xc5, 0xf7, 0x42, 0x21, 0x2a, 0xbc, 0xb8, 0x4e, 0x9d, 0xe0, 0x41, 0xda,
	0x9d, 0x13, 0x1c, 0x47, 0xd9, 0x4b, 0xe0, 0x7c, 0x05, 0x07, 0x36, 0xe3, 0xfe, 0x3a, 0xea, 0xfb,
	0xe1, 0x33, 0xa5, 0x9c, 0xbb, 0xad, 0x64, 0x1a, 0x4b, 0xf4, 0x23, 0x22, 0x08, 0x08, 0x62, 0x3f,
	0x5b, 0x30, 0xbf, 0x19, 0xf7, 0xaf, 0x47, 0x9c, 0x98, 0xbe, 0x70, 0x9d, 0x44, 0xeb, 0x39, 0x96,
	0xed, 0x8d, 0x45, 0x38, 0x26, 0x11, 0x17, 0x0e, 0x7d, 0x67, 0xd1, 0xf7, 0x8e, 0x5d, 0x19, 0x6d,
	0xcf, 0x8f, 0x51, 0x92, 0xf1, 0x94, 0xd5, 0x7c, 0x6f, 0xf2, 0xb3, 0x2b, 0x70, 0x4a, 0x4b, 0x27,
	0x21, 0xac, 0xa6, 0x5a, 0x56, 0x3a, 0xd5, 0xfa, 0x96, 0xe5, 0x28, 0xf4, 0x16, 0x55, 0xbc, 0x29,
	0x17, 0xa8, 0xbd, 0xf1, 0xe5, 0x5d, 0x9a, 0x33, 0x64, 0xb8, 0x18, 0xba, 0xf2, 0x05, 0x7d, 0x3f,
	0x98, 0x12, 0x62, 0x25, 0xcb, 0x47, 0x4a, 0xc7, 0xa6, 0x6c, 0x8e, 0xd5, 0x80, 0x95, 0x49, 0xd8,
	0xe2, 0xe4, 0xec, 0xd0, 0x8a, 0x9d, 0x7a, 0x97, 0xa6, 0x57, 0x4e, 0xec, 0xb2, 0xe4, 0x58, 0x4d,
	0xaf, 0x03, 0x16, 0xdc, 0xfe, 0xdc, 0x47, 0x2f, 0x2a, 0x72, 0x9f, 0x7d, 0x1c, 0x4a, 0x47, 0x40,
	0xf3, 0x3d, 0xca, 0x2f, 0x3a, 0x5e, 0x65, 0x05, 0x66, 0x59, 0xc1, 0x1a, 0x3d, 0xac, 0x8a, 0xde,
	0xe2, 0x98, 0x8f, 0xbf, 0xf8, 0x96, 0xf2, 0xc5, 0x7f, 0x0f, 0x0e, 0x6d, 0xc6, 0xfd, 0x36, 0x0a,
	0x90, 0x17, 0xa3, 0xf2, 0xb7, 0x69, 0xe3, 0x02, 0x6d, 0x27, 0x4a, 0xeb, 0x65, 0x44, 0x5e, 0xd1,
	0x5b, 0x72, 0x45, 0xbf, 0xf6, 0xd7, 0x32, 0x54, 0x36, 0xe3, 0xbe, 0xfd, 0x10, 0x8e, 0xe9, 0xda,
	0xd2, 0xe7, 0x27, 0x7c, 0x25, 0xf5, 0xfd, 0x5d, 0xe7, 0xad, 0x52, 0xe6, 0x82, 0xdc, 0x43, 0x38,
	0xa6, 0x6b, 0x05, 0xe7, 0x80, 0x6b, 0xcc, 0xf3, 0xc0, 0x73, 0x5a, 0xb0, 0x04, 0x5c, 0xd7, 0x7f,
	0xcd, 0x01, 0xd7, 0x98, 0xe7, 0x81, 0xe7, 0xf4, 0x62, 0xed, 0x2f, 0x61, 0x41, 0xdb, 0x87, 0x75,
	0x8b, 0x84, 0x54, 0xed, 0x9d, 0xcb, 0xe5, 0xec, 0x65, 0x7c, 0x6d, 0xcf, 0xd4, 0x2d, 0xd2, 0xd2,
	0x1c, 0x3f, 0xaf, 0xc7, 0x49, 0xf0, 0xb5, 0x0d, 0x4e, 0xb7, 0x48, 0x4e, 0x73, 0xfc, 0xbc, 0x4e,
	0xa7, 0x1d, 0xc0, 0xa1, 0x54, 0x97, 0xb3, 0x59, 0xa4, 0xa4, 0xc0, 0xbc, 0x60, 0x6a, 0x29, 0xa3,
	0xa5, 0x1a, 0x87, 0xcd, 0x22, 0xdd, 0x4c, 0xd0, 0xf4, 0xfd, 0x38, 0x82, 0x96, 0x6a, 0xc6, 0x35,
	0x8b, 0x54, 0x32, 0x41, 0xd3, 0xf7, 0xe6, 0xec, 0x11, 0x1c, 0xcd, 0xf6, 0xe5, 0x56, 0x4d, 0x24,
	0xe2, 0xc6, 0xce, 0xa5, 0x12, 0xc6, 0x32, 0x6c, 0xb6, 0xa7, 0xb6, 0x6a, 0xa2, 0x95, 0x01, 0xec,
	0xc4, 0x9e, 0x18, 0x81, 0xcd, 0x36, 0xc4, 0x56, 0x4d, 0x44, 0x33, 0x80, 0x9d, 0xd8, 0x16, 0x53,
	0x45, 0x4e, 0xba, 0x38, 0x46, 0x22, 0x73, 0x63, 0x33, 0x91, 0x53, 0x9d, 0x1c, 0x55, 0x64, 0x03,
	0xd8, 0x8c, 0xb1, 0x99, 0xc8, 0x1a, 0xd8, 0x6c, 0xcf, 0xca, 0x48, 0x64, 0x03, 0xd8, 0x89, 0x7d,
	0x2b, 0xfb, 0x73, 0x00, 0xa9, 0x67, 0x75, 0xa6, 0x48, 0x30, 0x62, 0xe5, 0xbc, 0x61, 0x62, 0x25,
	0x23, 0x48, 0x4d, 0x99, 0x33, 0x45, 0xda, 0x14, 0x21, 0x64, 0x3b, 0x0f, 0x04, 0x41, 0x6a, 0x3b,
	0x9c, 0x29, 0x92, 0xa1, 0x08, 0x21, 0xdb, 0x83, 0xb0, 0x7d, 0x38, 0xa8, 0xf6, 0x1f, 0xce, 0x16,
	0x4a, 0xc0, 0x0c, 0x9d, 0x96, 0xa1, 0xa1, 0x0c, 0xa5, 0x36, 0x09, 0xce, 0x16, 0x6a, 0x51, 0x0c,
	0xa5, 0xad, 0xe6, 0x09, 0x94, 0x5a, 0xca, 0x9f, 0x2d, 0x14, 0xa5, 0x18, 0x4a, 0x5b, 0xd0, 0xdb,
	0x9f, 0xc1, 0xdc, 0xb8, 0x9a, 0xff, 0xff, 0xe4, 0xd5, 0xc2, 0xc8, 0x59, 0x35, 0x30, 0x12, 0xdb,
	0xdf, 0x86, 0x59, 0x51, 0x92, 0x37, 0x26, 0x2f, 0x4c, 0x6c, 0x9c, 0x73, 0xc5, 0x36, 0x62, 0xef,
	0xfb, 0x60, 0x6b, 0xaa, 0xe3, 0x9c, 0xf3, 0x93, 0xb5, 0x76, 0xde, 0x2c, 0x63, 0x2d, 0x5f, 0x09,
	0xd9, 0x42, 0x36, 0x4f, 0x97, 0xb4, 0x71, 0xde, 0x95, 0x30, 0xb9, 0x2c, 0xfd, 0xda, 0x82, 0x45,
	0x7d, 0xd9, 0xd9, 0x2a, 0x72, 0x23, 0xb5, 0xc0, 0x79, 0xbb, 0xe4, 0x02, 0x39, 0x55, 0xd2, 0x56,
	0x96, 0x6e, 0x81, 0x43, 0x69, 0x02, 0x97, 0xcb, 0xd9, 0xcb, 0xaf, 0x86, 0x5a, 0x3c, 0xe6, 0xbc,
	0x1a, 0x8a, 0x61, 0xde, 0xab, 0xa1, 0x2f, 0x8f, 0xba, 0x30, 0x2f, 0xd7, 0x40, 0xaf, 0x4d, 0x5e,
	0x2f, 0x99, 0x39, 0xe7, 0x8d, 0xcc, 0x12, 0x90, 0xf5, 0x8d, 0x47, 0x4f, 0xea, 0xd6, 0xe3, 0x27,
	0x75, 0xeb, 0xb7, 0x27, 0x75, 0xeb, 0xfb, 0xa7, 0xf5, 0xa9, 0xc7, 0x4f, 0xeb, 0x53, 0xbf, 0x3c,
	0xad, 0x4f, 0xdd, 0x7e, 0xbd, 0xef, 0xe3, 0xbb, 0xa3, 0x8e, 0xdb, 0x8d, 0xb6, 0x5b, 0x64, 0x87,
	0xf3, 0x64, 0xcf, 0x16, 0xdd, 0xb3, 0x75, 0xbf, 0x95, 0xfc, 0xab, 0xe9, 0xc1, 0x00, 0xc5, 0x9d,
	0x19, 0xfa, 0xc7, 0x9e, 0x4b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x6c, 0xa5, 0x9d, 0xec,
	0x24, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateBuyerMonoCrow(ctx context.Context, in *MsgCreateBuyerMonoCrow, opts ...grpc.CallOption) (*MsgCreateBuyerMonoCrowResponse, error)
	UpdateBuyerMonoCrow(ctx context.Context, in *MsgUpdateBuyerMonoCrow, opts ...grpc.CallOption) (*MsgUpdateBuyerMonoCrowResponse, error)
	DeleteBuyerMonoCrow(ctx context.Context, in *MsgDeleteBuyerMonoCrow, opts ...grpc.CallOption) (*MsgDeleteBuyerMonoCrowResponse, error)
	CreateSellerMonoCrow(ctx context.Context, in *MsgCreateSellerMonoCrow, opts ...grpc.CallOption) (*MsgCreateSellerMonoCrowResponse, error)
	UpdateSellerMonoCrow(ctx context.Context, in *MsgUpdateSellerMonoCrow, opts ...grpc.CallOption) (*MsgUpdateSellerMonoCrowResponse, error)
	DeleteSellerMonoCrow(ctx context.Context, in *MsgDeleteSellerMonoCrow, opts ...grpc.CallOption) (*MsgDeleteSellerMonoCrowResponse, error)
	CreateMonoCrow(ctx context.Context, in *MsgCreateMonoCrow, opts ...grpc.CallOption) (*MsgCreateMonoCrowResponse, error)
	UpdateMonoCrow(ctx context.Context, in *MsgUpdateMonoCrow, opts ...grpc.CallOption) (*MsgUpdateMonoCrowResponse, error)
	DeleteMonoCrow(ctx context.Context, in *MsgDeleteMonoCrow, opts ...grpc.CallOption) (*MsgDeleteMonoCrowResponse, error)
	CreateMonoDispute(ctx context.Context, in *MsgCreateMonoDispute, opts ...grpc.CallOption) (*MsgCreateMonoDisputeResponse, error)
	UpdateMonoDispute(ctx context.Context, in *MsgUpdateMonoDispute, opts ...grpc.CallOption) (*MsgUpdateMonoDisputeResponse, error)
	DeleteMonoDispute(ctx context.Context, in *MsgDeleteMonoDispute, opts ...grpc.CallOption) (*MsgDeleteMonoDisputeResponse, error)
	CreateMonoRebutal(ctx context.Context, in *MsgCreateMonoRebutal, opts ...grpc.CallOption) (*MsgCreateMonoRebutalResponse, error)
	UpdateMonoRebutal(ctx context.Context, in *MsgUpdateMonoRebutal, opts ...grpc.CallOption) (*MsgUpdateMonoRebutalResponse, error)
	DeleteMonoRebutal(ctx context.Context, in *MsgDeleteMonoRebutal, opts ...grpc.CallOption) (*MsgDeleteMonoRebutalResponse, error)
	CreateVote(ctx context.Context, in *MsgCreateVote, opts ...grpc.CallOption) (*MsgCreateVoteResponse, error)
	UpdateVote(ctx context.Context, in *MsgUpdateVote, opts ...grpc.CallOption) (*MsgUpdateVoteResponse, error)
	DeleteVote(ctx context.Context, in *MsgDeleteVote, opts ...grpc.CallOption) (*MsgDeleteVoteResponse, error)
	CreateVerdict(ctx context.Context, in *MsgCreateVerdict, opts ...grpc.CallOption) (*MsgCreateVerdictResponse, error)
	UpdateVerdict(ctx context.Context, in *MsgUpdateVerdict, opts ...grpc.CallOption) (*MsgUpdateVerdictResponse, error)
	DeleteVerdict(ctx context.Context, in *MsgDeleteVerdict, opts ...grpc.CallOption) (*MsgDeleteVerdictResponse, error)
	BeginCrow(ctx context.Context, in *MsgBeginCrow, opts ...grpc.CallOption) (*MsgBeginCrowResponse, error)
	JoinCrow(ctx context.Context, in *MsgJoinCrow, opts ...grpc.CallOption) (*MsgJoinCrowResponse, error)
	SellerRaiseDispute(ctx context.Context, in *MsgSellerRaiseDispute, opts ...grpc.CallOption) (*MsgSellerRaiseDisputeResponse, error)
	BuyerRaiseDispute(ctx context.Context, in *MsgBuyerRaiseDispute, opts ...grpc.CallOption) (*MsgBuyerRaiseDisputeResponse, error)
	SellerDisputeRebuttal(ctx context.Context, in *MsgSellerDisputeRebuttal, opts ...grpc.CallOption) (*MsgSellerDisputeRebuttalResponse, error)
	BuyerDisputeRebuttal(ctx context.Context, in *MsgBuyerDisputeRebuttal, opts ...grpc.CallOption) (*MsgBuyerDisputeRebuttalResponse, error)
	VoteOnDispute(ctx context.Context, in *MsgVoteOnDispute, opts ...grpc.CallOption) (*MsgVoteOnDisputeResponse, error)
	ReleaseCrow(ctx context.Context, in *MsgReleaseCrow, opts ...grpc.CallOption) (*MsgReleaseCrowResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateBuyerMonoCrow(ctx context.Context, in *MsgCreateBuyerMonoCrow, opts ...grpc.CallOption) (*MsgCreateBuyerMonoCrowResponse, error) {
	out := new(MsgCreateBuyerMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/CreateBuyerMonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBuyerMonoCrow(ctx context.Context, in *MsgUpdateBuyerMonoCrow, opts ...grpc.CallOption) (*MsgUpdateBuyerMonoCrowResponse, error) {
	out := new(MsgUpdateBuyerMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/UpdateBuyerMonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteBuyerMonoCrow(ctx context.Context, in *MsgDeleteBuyerMonoCrow, opts ...grpc.CallOption) (*MsgDeleteBuyerMonoCrowResponse, error) {
	out := new(MsgDeleteBuyerMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/DeleteBuyerMonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSellerMonoCrow(ctx context.Context, in *MsgCreateSellerMonoCrow, opts ...grpc.CallOption) (*MsgCreateSellerMonoCrowResponse, error) {
	out := new(MsgCreateSellerMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/CreateSellerMonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSellerMonoCrow(ctx context.Context, in *MsgUpdateSellerMonoCrow, opts ...grpc.CallOption) (*MsgUpdateSellerMonoCrowResponse, error) {
	out := new(MsgUpdateSellerMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/UpdateSellerMonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteSellerMonoCrow(ctx context.Context, in *MsgDeleteSellerMonoCrow, opts ...grpc.CallOption) (*MsgDeleteSellerMonoCrowResponse, error) {
	out := new(MsgDeleteSellerMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/DeleteSellerMonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMonoCrow(ctx context.Context, in *MsgCreateMonoCrow, opts ...grpc.CallOption) (*MsgCreateMonoCrowResponse, error) {
	out := new(MsgCreateMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/CreateMonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMonoCrow(ctx context.Context, in *MsgUpdateMonoCrow, opts ...grpc.CallOption) (*MsgUpdateMonoCrowResponse, error) {
	out := new(MsgUpdateMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/UpdateMonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMonoCrow(ctx context.Context, in *MsgDeleteMonoCrow, opts ...grpc.CallOption) (*MsgDeleteMonoCrowResponse, error) {
	out := new(MsgDeleteMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/DeleteMonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMonoDispute(ctx context.Context, in *MsgCreateMonoDispute, opts ...grpc.CallOption) (*MsgCreateMonoDisputeResponse, error) {
	out := new(MsgCreateMonoDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/CreateMonoDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMonoDispute(ctx context.Context, in *MsgUpdateMonoDispute, opts ...grpc.CallOption) (*MsgUpdateMonoDisputeResponse, error) {
	out := new(MsgUpdateMonoDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/UpdateMonoDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMonoDispute(ctx context.Context, in *MsgDeleteMonoDispute, opts ...grpc.CallOption) (*MsgDeleteMonoDisputeResponse, error) {
	out := new(MsgDeleteMonoDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/DeleteMonoDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMonoRebutal(ctx context.Context, in *MsgCreateMonoRebutal, opts ...grpc.CallOption) (*MsgCreateMonoRebutalResponse, error) {
	out := new(MsgCreateMonoRebutalResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/CreateMonoRebutal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMonoRebutal(ctx context.Context, in *MsgUpdateMonoRebutal, opts ...grpc.CallOption) (*MsgUpdateMonoRebutalResponse, error) {
	out := new(MsgUpdateMonoRebutalResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/UpdateMonoRebutal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteMonoRebutal(ctx context.Context, in *MsgDeleteMonoRebutal, opts ...grpc.CallOption) (*MsgDeleteMonoRebutalResponse, error) {
	out := new(MsgDeleteMonoRebutalResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/DeleteMonoRebutal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateVote(ctx context.Context, in *MsgCreateVote, opts ...grpc.CallOption) (*MsgCreateVoteResponse, error) {
	out := new(MsgCreateVoteResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/CreateVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVote(ctx context.Context, in *MsgUpdateVote, opts ...grpc.CallOption) (*MsgUpdateVoteResponse, error) {
	out := new(MsgUpdateVoteResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/UpdateVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteVote(ctx context.Context, in *MsgDeleteVote, opts ...grpc.CallOption) (*MsgDeleteVoteResponse, error) {
	out := new(MsgDeleteVoteResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/DeleteVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateVerdict(ctx context.Context, in *MsgCreateVerdict, opts ...grpc.CallOption) (*MsgCreateVerdictResponse, error) {
	out := new(MsgCreateVerdictResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/CreateVerdict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVerdict(ctx context.Context, in *MsgUpdateVerdict, opts ...grpc.CallOption) (*MsgUpdateVerdictResponse, error) {
	out := new(MsgUpdateVerdictResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/UpdateVerdict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteVerdict(ctx context.Context, in *MsgDeleteVerdict, opts ...grpc.CallOption) (*MsgDeleteVerdictResponse, error) {
	out := new(MsgDeleteVerdictResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/DeleteVerdict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BeginCrow(ctx context.Context, in *MsgBeginCrow, opts ...grpc.CallOption) (*MsgBeginCrowResponse, error) {
	out := new(MsgBeginCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/BeginCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinCrow(ctx context.Context, in *MsgJoinCrow, opts ...grpc.CallOption) (*MsgJoinCrowResponse, error) {
	out := new(MsgJoinCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/JoinCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellerRaiseDispute(ctx context.Context, in *MsgSellerRaiseDispute, opts ...grpc.CallOption) (*MsgSellerRaiseDisputeResponse, error) {
	out := new(MsgSellerRaiseDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/SellerRaiseDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyerRaiseDispute(ctx context.Context, in *MsgBuyerRaiseDispute, opts ...grpc.CallOption) (*MsgBuyerRaiseDisputeResponse, error) {
	out := new(MsgBuyerRaiseDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/BuyerRaiseDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellerDisputeRebuttal(ctx context.Context, in *MsgSellerDisputeRebuttal, opts ...grpc.CallOption) (*MsgSellerDisputeRebuttalResponse, error) {
	out := new(MsgSellerDisputeRebuttalResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/SellerDisputeRebuttal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyerDisputeRebuttal(ctx context.Context, in *MsgBuyerDisputeRebuttal, opts ...grpc.CallOption) (*MsgBuyerDisputeRebuttalResponse, error) {
	out := new(MsgBuyerDisputeRebuttalResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/BuyerDisputeRebuttal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteOnDispute(ctx context.Context, in *MsgVoteOnDispute, opts ...grpc.CallOption) (*MsgVoteOnDisputeResponse, error) {
	out := new(MsgVoteOnDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/VoteOnDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReleaseCrow(ctx context.Context, in *MsgReleaseCrow, opts ...grpc.CallOption) (*MsgReleaseCrowResponse, error) {
	out := new(MsgReleaseCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Msg/ReleaseCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateBuyerMonoCrow(context.Context, *MsgCreateBuyerMonoCrow) (*MsgCreateBuyerMonoCrowResponse, error)
	UpdateBuyerMonoCrow(context.Context, *MsgUpdateBuyerMonoCrow) (*MsgUpdateBuyerMonoCrowResponse, error)
	DeleteBuyerMonoCrow(context.Context, *MsgDeleteBuyerMonoCrow) (*MsgDeleteBuyerMonoCrowResponse, error)
	CreateSellerMonoCrow(context.Context, *MsgCreateSellerMonoCrow) (*MsgCreateSellerMonoCrowResponse, error)
	UpdateSellerMonoCrow(context.Context, *MsgUpdateSellerMonoCrow) (*MsgUpdateSellerMonoCrowResponse, error)
	DeleteSellerMonoCrow(context.Context, *MsgDeleteSellerMonoCrow) (*MsgDeleteSellerMonoCrowResponse, error)
	CreateMonoCrow(context.Context, *MsgCreateMonoCrow) (*MsgCreateMonoCrowResponse, error)
	UpdateMonoCrow(context.Context, *MsgUpdateMonoCrow) (*MsgUpdateMonoCrowResponse, error)
	DeleteMonoCrow(context.Context, *MsgDeleteMonoCrow) (*MsgDeleteMonoCrowResponse, error)
	CreateMonoDispute(context.Context, *MsgCreateMonoDispute) (*MsgCreateMonoDisputeResponse, error)
	UpdateMonoDispute(context.Context, *MsgUpdateMonoDispute) (*MsgUpdateMonoDisputeResponse, error)
	DeleteMonoDispute(context.Context, *MsgDeleteMonoDispute) (*MsgDeleteMonoDisputeResponse, error)
	CreateMonoRebutal(context.Context, *MsgCreateMonoRebutal) (*MsgCreateMonoRebutalResponse, error)
	UpdateMonoRebutal(context.Context, *MsgUpdateMonoRebutal) (*MsgUpdateMonoRebutalResponse, error)
	DeleteMonoRebutal(context.Context, *MsgDeleteMonoRebutal) (*MsgDeleteMonoRebutalResponse, error)
	CreateVote(context.Context, *MsgCreateVote) (*MsgCreateVoteResponse, error)
	UpdateVote(context.Context, *MsgUpdateVote) (*MsgUpdateVoteResponse, error)
	DeleteVote(context.Context, *MsgDeleteVote) (*MsgDeleteVoteResponse, error)
	CreateVerdict(context.Context, *MsgCreateVerdict) (*MsgCreateVerdictResponse, error)
	UpdateVerdict(context.Context, *MsgUpdateVerdict) (*MsgUpdateVerdictResponse, error)
	DeleteVerdict(context.Context, *MsgDeleteVerdict) (*MsgDeleteVerdictResponse, error)
	BeginCrow(context.Context, *MsgBeginCrow) (*MsgBeginCrowResponse, error)
	JoinCrow(context.Context, *MsgJoinCrow) (*MsgJoinCrowResponse, error)
	SellerRaiseDispute(context.Context, *MsgSellerRaiseDispute) (*MsgSellerRaiseDisputeResponse, error)
	BuyerRaiseDispute(context.Context, *MsgBuyerRaiseDispute) (*MsgBuyerRaiseDisputeResponse, error)
	SellerDisputeRebuttal(context.Context, *MsgSellerDisputeRebuttal) (*MsgSellerDisputeRebuttalResponse, error)
	BuyerDisputeRebuttal(context.Context, *MsgBuyerDisputeRebuttal) (*MsgBuyerDisputeRebuttalResponse, error)
	VoteOnDispute(context.Context, *MsgVoteOnDispute) (*MsgVoteOnDisputeResponse, error)
	ReleaseCrow(context.Context, *MsgReleaseCrow) (*MsgReleaseCrowResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateBuyerMonoCrow(ctx context.Context, req *MsgCreateBuyerMonoCrow) (*MsgCreateBuyerMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuyerMonoCrow not implemented")
}
func (*UnimplementedMsgServer) UpdateBuyerMonoCrow(ctx context.Context, req *MsgUpdateBuyerMonoCrow) (*MsgUpdateBuyerMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyerMonoCrow not implemented")
}
func (*UnimplementedMsgServer) DeleteBuyerMonoCrow(ctx context.Context, req *MsgDeleteBuyerMonoCrow) (*MsgDeleteBuyerMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuyerMonoCrow not implemented")
}
func (*UnimplementedMsgServer) CreateSellerMonoCrow(ctx context.Context, req *MsgCreateSellerMonoCrow) (*MsgCreateSellerMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSellerMonoCrow not implemented")
}
func (*UnimplementedMsgServer) UpdateSellerMonoCrow(ctx context.Context, req *MsgUpdateSellerMonoCrow) (*MsgUpdateSellerMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSellerMonoCrow not implemented")
}
func (*UnimplementedMsgServer) DeleteSellerMonoCrow(ctx context.Context, req *MsgDeleteSellerMonoCrow) (*MsgDeleteSellerMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSellerMonoCrow not implemented")
}
func (*UnimplementedMsgServer) CreateMonoCrow(ctx context.Context, req *MsgCreateMonoCrow) (*MsgCreateMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonoCrow not implemented")
}
func (*UnimplementedMsgServer) UpdateMonoCrow(ctx context.Context, req *MsgUpdateMonoCrow) (*MsgUpdateMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonoCrow not implemented")
}
func (*UnimplementedMsgServer) DeleteMonoCrow(ctx context.Context, req *MsgDeleteMonoCrow) (*MsgDeleteMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonoCrow not implemented")
}
func (*UnimplementedMsgServer) CreateMonoDispute(ctx context.Context, req *MsgCreateMonoDispute) (*MsgCreateMonoDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonoDispute not implemented")
}
func (*UnimplementedMsgServer) UpdateMonoDispute(ctx context.Context, req *MsgUpdateMonoDispute) (*MsgUpdateMonoDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonoDispute not implemented")
}
func (*UnimplementedMsgServer) DeleteMonoDispute(ctx context.Context, req *MsgDeleteMonoDispute) (*MsgDeleteMonoDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonoDispute not implemented")
}
func (*UnimplementedMsgServer) CreateMonoRebutal(ctx context.Context, req *MsgCreateMonoRebutal) (*MsgCreateMonoRebutalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonoRebutal not implemented")
}
func (*UnimplementedMsgServer) UpdateMonoRebutal(ctx context.Context, req *MsgUpdateMonoRebutal) (*MsgUpdateMonoRebutalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonoRebutal not implemented")
}
func (*UnimplementedMsgServer) DeleteMonoRebutal(ctx context.Context, req *MsgDeleteMonoRebutal) (*MsgDeleteMonoRebutalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonoRebutal not implemented")
}
func (*UnimplementedMsgServer) CreateVote(ctx context.Context, req *MsgCreateVote) (*MsgCreateVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVote not implemented")
}
func (*UnimplementedMsgServer) UpdateVote(ctx context.Context, req *MsgUpdateVote) (*MsgUpdateVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVote not implemented")
}
func (*UnimplementedMsgServer) DeleteVote(ctx context.Context, req *MsgDeleteVote) (*MsgDeleteVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVote not implemented")
}
func (*UnimplementedMsgServer) CreateVerdict(ctx context.Context, req *MsgCreateVerdict) (*MsgCreateVerdictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVerdict not implemented")
}
func (*UnimplementedMsgServer) UpdateVerdict(ctx context.Context, req *MsgUpdateVerdict) (*MsgUpdateVerdictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVerdict not implemented")
}
func (*UnimplementedMsgServer) DeleteVerdict(ctx context.Context, req *MsgDeleteVerdict) (*MsgDeleteVerdictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVerdict not implemented")
}
func (*UnimplementedMsgServer) BeginCrow(ctx context.Context, req *MsgBeginCrow) (*MsgBeginCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginCrow not implemented")
}
func (*UnimplementedMsgServer) JoinCrow(ctx context.Context, req *MsgJoinCrow) (*MsgJoinCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCrow not implemented")
}
func (*UnimplementedMsgServer) SellerRaiseDispute(ctx context.Context, req *MsgSellerRaiseDispute) (*MsgSellerRaiseDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerRaiseDispute not implemented")
}
func (*UnimplementedMsgServer) BuyerRaiseDispute(ctx context.Context, req *MsgBuyerRaiseDispute) (*MsgBuyerRaiseDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyerRaiseDispute not implemented")
}
func (*UnimplementedMsgServer) SellerDisputeRebuttal(ctx context.Context, req *MsgSellerDisputeRebuttal) (*MsgSellerDisputeRebuttalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerDisputeRebuttal not implemented")
}
func (*UnimplementedMsgServer) BuyerDisputeRebuttal(ctx context.Context, req *MsgBuyerDisputeRebuttal) (*MsgBuyerDisputeRebuttalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyerDisputeRebuttal not implemented")
}
func (*UnimplementedMsgServer) VoteOnDispute(ctx context.Context, req *MsgVoteOnDispute) (*MsgVoteOnDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOnDispute not implemented")
}
func (*UnimplementedMsgServer) ReleaseCrow(ctx context.Context, req *MsgReleaseCrow) (*MsgReleaseCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCrow not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateBuyerMonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBuyerMonoCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBuyerMonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/CreateBuyerMonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBuyerMonoCrow(ctx, req.(*MsgCreateBuyerMonoCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBuyerMonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBuyerMonoCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBuyerMonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/UpdateBuyerMonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBuyerMonoCrow(ctx, req.(*MsgUpdateBuyerMonoCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteBuyerMonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteBuyerMonoCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteBuyerMonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/DeleteBuyerMonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteBuyerMonoCrow(ctx, req.(*MsgDeleteBuyerMonoCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSellerMonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSellerMonoCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSellerMonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/CreateSellerMonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSellerMonoCrow(ctx, req.(*MsgCreateSellerMonoCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSellerMonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSellerMonoCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSellerMonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/UpdateSellerMonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSellerMonoCrow(ctx, req.(*MsgUpdateSellerMonoCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteSellerMonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteSellerMonoCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteSellerMonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/DeleteSellerMonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteSellerMonoCrow(ctx, req.(*MsgDeleteSellerMonoCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMonoCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/CreateMonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMonoCrow(ctx, req.(*MsgCreateMonoCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMonoCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/UpdateMonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMonoCrow(ctx, req.(*MsgUpdateMonoCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMonoCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/DeleteMonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMonoCrow(ctx, req.(*MsgDeleteMonoCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMonoDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMonoDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMonoDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/CreateMonoDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMonoDispute(ctx, req.(*MsgCreateMonoDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMonoDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMonoDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMonoDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/UpdateMonoDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMonoDispute(ctx, req.(*MsgUpdateMonoDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMonoDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMonoDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMonoDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/DeleteMonoDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMonoDispute(ctx, req.(*MsgDeleteMonoDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMonoRebutal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMonoRebutal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMonoRebutal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/CreateMonoRebutal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMonoRebutal(ctx, req.(*MsgCreateMonoRebutal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMonoRebutal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMonoRebutal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMonoRebutal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/UpdateMonoRebutal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMonoRebutal(ctx, req.(*MsgUpdateMonoRebutal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteMonoRebutal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMonoRebutal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteMonoRebutal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/DeleteMonoRebutal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteMonoRebutal(ctx, req.(*MsgDeleteMonoRebutal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/CreateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVote(ctx, req.(*MsgCreateVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/UpdateVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVote(ctx, req.(*MsgUpdateVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/DeleteVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteVote(ctx, req.(*MsgDeleteVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateVerdict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVerdict)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVerdict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/CreateVerdict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVerdict(ctx, req.(*MsgCreateVerdict))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVerdict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVerdict)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVerdict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/UpdateVerdict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVerdict(ctx, req.(*MsgUpdateVerdict))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteVerdict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteVerdict)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteVerdict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/DeleteVerdict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteVerdict(ctx, req.(*MsgDeleteVerdict))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BeginCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBeginCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BeginCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/BeginCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BeginCrow(ctx, req.(*MsgBeginCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/JoinCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinCrow(ctx, req.(*MsgJoinCrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellerRaiseDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellerRaiseDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellerRaiseDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/SellerRaiseDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellerRaiseDispute(ctx, req.(*MsgSellerRaiseDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyerRaiseDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyerRaiseDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyerRaiseDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/BuyerRaiseDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyerRaiseDispute(ctx, req.(*MsgBuyerRaiseDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellerDisputeRebuttal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellerDisputeRebuttal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellerDisputeRebuttal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/SellerDisputeRebuttal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellerDisputeRebuttal(ctx, req.(*MsgSellerDisputeRebuttal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyerDisputeRebuttal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyerDisputeRebuttal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyerDisputeRebuttal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/BuyerDisputeRebuttal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyerDisputeRebuttal(ctx, req.(*MsgBuyerDisputeRebuttal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteOnDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteOnDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteOnDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/VoteOnDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteOnDispute(ctx, req.(*MsgVoteOnDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReleaseCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReleaseCrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReleaseCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Msg/ReleaseCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReleaseCrow(ctx, req.(*MsgReleaseCrow))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crowlabs.delta.escrow.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBuyerMonoCrow",
			Handler:    _Msg_CreateBuyerMonoCrow_Handler,
		},
		{
			MethodName: "UpdateBuyerMonoCrow",
			Handler:    _Msg_UpdateBuyerMonoCrow_Handler,
		},
		{
			MethodName: "DeleteBuyerMonoCrow",
			Handler:    _Msg_DeleteBuyerMonoCrow_Handler,
		},
		{
			MethodName: "CreateSellerMonoCrow",
			Handler:    _Msg_CreateSellerMonoCrow_Handler,
		},
		{
			MethodName: "UpdateSellerMonoCrow",
			Handler:    _Msg_UpdateSellerMonoCrow_Handler,
		},
		{
			MethodName: "DeleteSellerMonoCrow",
			Handler:    _Msg_DeleteSellerMonoCrow_Handler,
		},
		{
			MethodName: "CreateMonoCrow",
			Handler:    _Msg_CreateMonoCrow_Handler,
		},
		{
			MethodName: "UpdateMonoCrow",
			Handler:    _Msg_UpdateMonoCrow_Handler,
		},
		{
			MethodName: "DeleteMonoCrow",
			Handler:    _Msg_DeleteMonoCrow_Handler,
		},
		{
			MethodName: "CreateMonoDispute",
			Handler:    _Msg_CreateMonoDispute_Handler,
		},
		{
			MethodName: "UpdateMonoDispute",
			Handler:    _Msg_UpdateMonoDispute_Handler,
		},
		{
			MethodName: "DeleteMonoDispute",
			Handler:    _Msg_DeleteMonoDispute_Handler,
		},
		{
			MethodName: "CreateMonoRebutal",
			Handler:    _Msg_CreateMonoRebutal_Handler,
		},
		{
			MethodName: "UpdateMonoRebutal",
			Handler:    _Msg_UpdateMonoRebutal_Handler,
		},
		{
			MethodName: "DeleteMonoRebutal",
			Handler:    _Msg_DeleteMonoRebutal_Handler,
		},
		{
			MethodName: "CreateVote",
			Handler:    _Msg_CreateVote_Handler,
		},
		{
			MethodName: "UpdateVote",
			Handler:    _Msg_UpdateVote_Handler,
		},
		{
			MethodName: "DeleteVote",
			Handler:    _Msg_DeleteVote_Handler,
		},
		{
			MethodName: "CreateVerdict",
			Handler:    _Msg_CreateVerdict_Handler,
		},
		{
			MethodName: "UpdateVerdict",
			Handler:    _Msg_UpdateVerdict_Handler,
		},
		{
			MethodName: "DeleteVerdict",
			Handler:    _Msg_DeleteVerdict_Handler,
		},
		{
			MethodName: "BeginCrow",
			Handler:    _Msg_BeginCrow_Handler,
		},
		{
			MethodName: "JoinCrow",
			Handler:    _Msg_JoinCrow_Handler,
		},
		{
			MethodName: "SellerRaiseDispute",
			Handler:    _Msg_SellerRaiseDispute_Handler,
		},
		{
			MethodName: "BuyerRaiseDispute",
			Handler:    _Msg_BuyerRaiseDispute_Handler,
		},
		{
			MethodName: "SellerDisputeRebuttal",
			Handler:    _Msg_SellerDisputeRebuttal_Handler,
		},
		{
			MethodName: "BuyerDisputeRebuttal",
			Handler:    _Msg_BuyerDisputeRebuttal_Handler,
		},
		{
			MethodName: "VoteOnDispute",
			Handler:    _Msg_VoteOnDispute_Handler,
		},
		{
			MethodName: "ReleaseCrow",
			Handler:    _Msg_ReleaseCrow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "escrow/tx.proto",
}

func (m *MsgCreateBuyerMonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBuyerMonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBuyerMonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Collateral) > 0 {
		for iNdEx := len(m.Collateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BuyerCrowId) > 0 {
		i -= len(m.BuyerCrowId)
		copy(dAtA[i:], m.BuyerCrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerCrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateBuyerMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBuyerMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBuyerMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBuyerMonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBuyerMonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBuyerMonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Collateral) > 0 {
		for iNdEx := len(m.Collateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BuyerCrowId) > 0 {
		i -= len(m.BuyerCrowId)
		copy(dAtA[i:], m.BuyerCrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerCrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBuyerMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBuyerMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBuyerMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBuyerMonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBuyerMonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBuyerMonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyerCrowId) > 0 {
		i -= len(m.BuyerCrowId)
		copy(dAtA[i:], m.BuyerCrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerCrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBuyerMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBuyerMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBuyerMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateSellerMonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSellerMonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSellerMonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Collateral) > 0 {
		for iNdEx := len(m.Collateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SellerCrowId) > 0 {
		i -= len(m.SellerCrowId)
		copy(dAtA[i:], m.SellerCrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerCrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSellerMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSellerMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSellerMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSellerMonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSellerMonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSellerMonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Collateral) > 0 {
		for iNdEx := len(m.Collateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SellerCrowId) > 0 {
		i -= len(m.SellerCrowId)
		copy(dAtA[i:], m.SellerCrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerCrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSellerMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSellerMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSellerMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteSellerMonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteSellerMonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteSellerMonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerCrowId) > 0 {
		i -= len(m.SellerCrowId)
		copy(dAtA[i:], m.SellerCrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerCrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteSellerMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteSellerMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteSellerMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateMonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Timeout) > 0 {
		for iNdEx := len(m.Timeout) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Timeout[iNdEx])
			copy(dAtA[i:], m.Timeout[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Timeout[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DisputeId) > 0 {
		for iNdEx := len(m.DisputeId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisputeId[iNdEx])
			copy(dAtA[i:], m.DisputeId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BuyerCrowId) > 0 {
		i -= len(m.BuyerCrowId)
		copy(dAtA[i:], m.BuyerCrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerCrowId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SellerCrowId) > 0 {
		i -= len(m.SellerCrowId)
		copy(dAtA[i:], m.SellerCrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerCrowId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WhitelistId) > 0 {
		i -= len(m.WhitelistId)
		copy(dAtA[i:], m.WhitelistId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WhitelistId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Timeout) > 0 {
		for iNdEx := len(m.Timeout) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Timeout[iNdEx])
			copy(dAtA[i:], m.Timeout[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Timeout[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DisputeId) > 0 {
		for iNdEx := len(m.DisputeId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisputeId[iNdEx])
			copy(dAtA[i:], m.DisputeId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BuyerCrowId) > 0 {
		i -= len(m.BuyerCrowId)
		copy(dAtA[i:], m.BuyerCrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerCrowId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SellerCrowId) > 0 {
		i -= len(m.SellerCrowId)
		copy(dAtA[i:], m.SellerCrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerCrowId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WhitelistId) > 0 {
		i -= len(m.WhitelistId)
		copy(dAtA[i:], m.WhitelistId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WhitelistId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateMonoDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Plaintiff) > 0 {
		i -= len(m.Plaintiff)
		copy(dAtA[i:], m.Plaintiff)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Plaintiff)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMonoDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Plaintiff) > 0 {
		i -= len(m.Plaintiff)
		copy(dAtA[i:], m.Plaintiff)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Plaintiff)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Plaintiff) > 0 {
		i -= len(m.Plaintiff)
		copy(dAtA[i:], m.Plaintiff)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Plaintiff)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateMonoRebutal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoRebutal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoRebutal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RebuttalId) > 0 {
		i -= len(m.RebuttalId)
		copy(dAtA[i:], m.RebuttalId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RebuttalId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Defendant) > 0 {
		i -= len(m.Defendant)
		copy(dAtA[i:], m.Defendant)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Defendant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMonoRebutalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMonoRebutalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMonoRebutalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoRebutal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoRebutal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoRebutal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RebuttalId) > 0 {
		i -= len(m.RebuttalId)
		copy(dAtA[i:], m.RebuttalId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RebuttalId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Defendant) > 0 {
		i -= len(m.Defendant)
		copy(dAtA[i:], m.Defendant)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Defendant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMonoRebutalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMonoRebutalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMonoRebutalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoRebutal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoRebutal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoRebutal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RebuttalId) > 0 {
		i -= len(m.RebuttalId)
		copy(dAtA[i:], m.RebuttalId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RebuttalId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Defendant) > 0 {
		i -= len(m.Defendant)
		copy(dAtA[i:], m.Defendant)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Defendant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMonoRebutalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMonoRebutalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMonoRebutalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerPunishment) > 0 {
		i -= len(m.SellerPunishment)
		copy(dAtA[i:], m.SellerPunishment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerPunishment)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BuyerPunishment) > 0 {
		i -= len(m.BuyerPunishment)
		copy(dAtA[i:], m.BuyerPunishment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerPunishment)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SendToSeller) > 0 {
		for iNdEx := len(m.SendToSeller) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SendToSeller[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RefundToBuyer) > 0 {
		for iNdEx := len(m.RefundToBuyer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RefundToBuyer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.SellerGuilty {
		i--
		if m.SellerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BuyerGuilty {
		i--
		if m.BuyerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.VoteId) > 0 {
		i -= len(m.VoteId)
		copy(dAtA[i:], m.VoteId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerPunishment) > 0 {
		i -= len(m.SellerPunishment)
		copy(dAtA[i:], m.SellerPunishment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerPunishment)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BuyerPunishment) > 0 {
		i -= len(m.BuyerPunishment)
		copy(dAtA[i:], m.BuyerPunishment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerPunishment)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SendToSeller) > 0 {
		for iNdEx := len(m.SendToSeller) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SendToSeller[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RefundToBuyer) > 0 {
		for iNdEx := len(m.RefundToBuyer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RefundToBuyer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.SellerGuilty {
		i--
		if m.SellerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BuyerGuilty {
		i--
		if m.BuyerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.VoteId) > 0 {
		i -= len(m.VoteId)
		copy(dAtA[i:], m.VoteId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteId) > 0 {
		i -= len(m.VoteId)
		copy(dAtA[i:], m.VoteId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateVerdict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVerdict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVerdict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResultingVote != nil {
		{
			size, err := m.ResultingVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.VoteIds) > 0 {
		for iNdEx := len(m.VoteIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VoteIds[iNdEx])
			copy(dAtA[i:], m.VoteIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.VoteIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.VerdictId) > 0 {
		i -= len(m.VerdictId)
		copy(dAtA[i:], m.VerdictId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerdictId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVerdictResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVerdictResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVerdictResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVerdict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVerdict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVerdict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResultingVote != nil {
		{
			size, err := m.ResultingVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.VoteIds) > 0 {
		for iNdEx := len(m.VoteIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VoteIds[iNdEx])
			copy(dAtA[i:], m.VoteIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.VoteIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.VerdictId) > 0 {
		i -= len(m.VerdictId)
		copy(dAtA[i:], m.VerdictId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerdictId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVerdictResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVerdictResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVerdictResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteVerdict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteVerdict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteVerdict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerdictId) > 0 {
		i -= len(m.VerdictId)
		copy(dAtA[i:], m.VerdictId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerdictId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteVerdictResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteVerdictResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteVerdictResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBeginCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBeginCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBeginCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Collateral) > 0 {
		for iNdEx := len(m.Collateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBeginCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBeginCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBeginCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgJoinCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Collateral) > 0 {
		for iNdEx := len(m.Collateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSellerRaiseDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellerRaiseDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellerRaiseDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellerRaiseDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellerRaiseDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellerRaiseDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyerRaiseDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyerRaiseDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyerRaiseDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyerRaiseDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyerRaiseDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyerRaiseDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellerDisputeRebuttal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellerDisputeRebuttal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellerDisputeRebuttal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellerDisputeRebuttalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellerDisputeRebuttalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellerDisputeRebuttalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBuyerDisputeRebuttal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyerDisputeRebuttal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyerDisputeRebuttal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyerDisputeRebuttalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyerDisputeRebuttalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyerDisputeRebuttalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerPunishment) > 0 {
		i -= len(m.SellerPunishment)
		copy(dAtA[i:], m.SellerPunishment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerPunishment)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BuyerPunishment) > 0 {
		i -= len(m.BuyerPunishment)
		copy(dAtA[i:], m.BuyerPunishment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerPunishment)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SendToSeller) > 0 {
		for iNdEx := len(m.SendToSeller) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SendToSeller[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RefundToBuyer) > 0 {
		for iNdEx := len(m.RefundToBuyer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RefundToBuyer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.SellerGuilty {
		i--
		if m.SellerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BuyerGuilty {
		i--
		if m.BuyerGuilty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteId) > 0 {
		i -= len(m.VoteId)
		copy(dAtA[i:], m.VoteId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReleaseCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReleaseCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReleaseCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReleaseCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReleaseCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReleaseCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateBuyerMonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerCrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Collateral) > 0 {
		for _, e := range m.Collateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateBuyerMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateBuyerMonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerCrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Collateral) > 0 {
		for _, e := range m.Collateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateBuyerMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteBuyerMonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerCrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteBuyerMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateSellerMonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerCrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Collateral) > 0 {
		for _, e := range m.Collateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSellerMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSellerMonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerCrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Collateral) > 0 {
		for _, e := range m.Collateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSellerMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteSellerMonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerCrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteSellerMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateMonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WhitelistId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerCrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerCrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DisputeId) > 0 {
		for _, s := range m.DisputeId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Timeout) > 0 {
		for _, s := range m.Timeout {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WhitelistId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerCrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BuyerCrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DisputeId) > 0 {
		for _, s := range m.DisputeId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Timeout) > 0 {
		for _, s := range m.Timeout {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteMonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateMonoDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Plaintiff)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMonoDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMonoDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Plaintiff)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMonoDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteMonoDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Plaintiff)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteMonoDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateMonoRebutal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Defendant)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RebuttalId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateMonoRebutalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMonoRebutal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Defendant)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RebuttalId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMonoRebutalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteMonoRebutal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Defendant)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RebuttalId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteMonoRebutalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoteId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BuyerGuilty {
		n += 2
	}
	if m.SellerGuilty {
		n += 2
	}
	if len(m.RefundToBuyer) > 0 {
		for _, e := range m.RefundToBuyer {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.SendToSeller) > 0 {
		for _, e := range m.SendToSeller {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.BuyerPunishment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerPunishment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoteId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BuyerGuilty {
		n += 2
	}
	if m.SellerGuilty {
		n += 2
	}
	if len(m.RefundToBuyer) > 0 {
		for _, e := range m.RefundToBuyer {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.SendToSeller) > 0 {
		for _, e := range m.SendToSeller {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.BuyerPunishment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerPunishment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoteId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateVerdict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerdictId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.VoteIds) > 0 {
		for _, s := range m.VoteIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ResultingVote != nil {
		l = m.ResultingVote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateVerdictResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateVerdict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerdictId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.VoteIds) > 0 {
		for _, s := range m.VoteIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ResultingVote != nil {
		l = m.ResultingVote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateVerdictResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteVerdict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerdictId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteVerdictResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBeginCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Collateral) > 0 {
		for _, e := range m.Collateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgBeginCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgJoinCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Collateral) > 0 {
		for _, e := range m.Collateral {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgJoinCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSellerRaiseDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSellerRaiseDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBuyerRaiseDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBuyerRaiseDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSellerDisputeRebuttal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSellerDisputeRebuttalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBuyerDisputeRebuttal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBuyerDisputeRebuttalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteOnDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BuyerGuilty {
		n += 2
	}
	if m.SellerGuilty {
		n += 2
	}
	if len(m.RefundToBuyer) > 0 {
		for _, e := range m.RefundToBuyer {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.SendToSeller) > 0 {
		for _, e := range m.SendToSeller {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.BuyerPunishment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerPunishment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteOnDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoteId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReleaseCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReleaseCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateBuyerMonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBuyerMonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBuyerMonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = append(m.Collateral, types.Coin{})
			if err := m.Collateral[len(m.Collateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBuyerMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBuyerMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBuyerMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBuyerMonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBuyerMonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBuyerMonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = append(m.Collateral, types.Coin{})
			if err := m.Collateral[len(m.Collateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBuyerMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBuyerMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBuyerMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBuyerMonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBuyerMonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBuyerMonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBuyerMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBuyerMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBuyerMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSellerMonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSellerMonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSellerMonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = append(m.Collateral, types.Coin{})
			if err := m.Collateral[len(m.Collateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSellerMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSellerMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSellerMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSellerMonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSellerMonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSellerMonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = append(m.Collateral, types.Coin{})
			if err := m.Collateral[len(m.Collateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSellerMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSellerMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSellerMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteSellerMonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteSellerMonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteSellerMonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteSellerMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteSellerMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteSellerMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = append(m.DisputeId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = append(m.Timeout, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = append(m.DisputeId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = append(m.Timeout, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMonoDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plaintiff", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plaintiff = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMonoDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plaintiff", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plaintiff = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plaintiff", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plaintiff = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMonoRebutal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoRebutal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoRebutal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defendant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defendant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebuttalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RebuttalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMonoRebutalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMonoRebutalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMonoRebutalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoRebutal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoRebutal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoRebutal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defendant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defendant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebuttalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RebuttalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMonoRebutalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMonoRebutalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMonoRebutalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoRebutal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoRebutal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoRebutal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defendant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defendant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebuttalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RebuttalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMonoRebutalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMonoRebutalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMonoRebutalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerGuilty = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellerGuilty = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundToBuyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundToBuyer = append(m.RefundToBuyer, types.Coin{})
			if err := m.RefundToBuyer[len(m.RefundToBuyer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendToSeller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendToSeller = append(m.SendToSeller, types.Coin{})
			if err := m.SendToSeller[len(m.SendToSeller)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerGuilty = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellerGuilty = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundToBuyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundToBuyer = append(m.RefundToBuyer, types.Coin{})
			if err := m.RefundToBuyer[len(m.RefundToBuyer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendToSeller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendToSeller = append(m.SendToSeller, types.Coin{})
			if err := m.SendToSeller[len(m.SendToSeller)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVerdict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVerdict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVerdict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerdictId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerdictId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteIds = append(m.VoteIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultingVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResultingVote == nil {
				m.ResultingVote = &Vote{}
			}
			if err := m.ResultingVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVerdictResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVerdictResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVerdictResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVerdict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVerdict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVerdict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerdictId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerdictId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteIds = append(m.VoteIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultingVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResultingVote == nil {
				m.ResultingVote = &Vote{}
			}
			if err := m.ResultingVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVerdictResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVerdictResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVerdictResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteVerdict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteVerdict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteVerdict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerdictId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerdictId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteVerdictResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteVerdictResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteVerdictResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBeginCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBeginCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBeginCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = append(m.Collateral, types.Coin{})
			if err := m.Collateral[len(m.Collateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBeginCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBeginCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBeginCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = append(m.Collateral, types.Coin{})
			if err := m.Collateral[len(m.Collateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellerRaiseDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellerRaiseDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellerRaiseDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellerRaiseDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellerRaiseDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellerRaiseDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyerRaiseDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyerRaiseDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyerRaiseDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyerRaiseDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyerRaiseDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyerRaiseDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellerDisputeRebuttal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellerDisputeRebuttal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellerDisputeRebuttal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellerDisputeRebuttalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellerDisputeRebuttalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellerDisputeRebuttalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyerDisputeRebuttal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyerDisputeRebuttal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyerDisputeRebuttal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyerDisputeRebuttalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyerDisputeRebuttalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyerDisputeRebuttalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerGuilty = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerGuilty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellerGuilty = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundToBuyer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundToBuyer = append(m.RefundToBuyer, types.Coin{})
			if err := m.RefundToBuyer[len(m.RefundToBuyer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendToSeller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendToSeller = append(m.SendToSeller, types.Coin{})
			if err := m.SendToSeller[len(m.SendToSeller)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerPunishment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerPunishment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReleaseCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReleaseCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReleaseCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReleaseCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReleaseCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReleaseCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
