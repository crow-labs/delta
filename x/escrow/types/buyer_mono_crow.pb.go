// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/buyer_mono_crow.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BuyerMonoCrow struct {
	BuyerCrowId string       `protobuf:"bytes,1,opt,name=buyerCrowId,proto3" json:"buyerCrowId,omitempty"`
	Deposit     []types.Coin `protobuf:"bytes,2,rep,name=deposit,proto3" json:"deposit"`
	Collateral  []types.Coin `protobuf:"bytes,3,rep,name=collateral,proto3" json:"collateral"`
	Status      string       `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Buyer       string       `protobuf:"bytes,5,opt,name=buyer,proto3" json:"buyer,omitempty"`
}

func (m *BuyerMonoCrow) Reset()         { *m = BuyerMonoCrow{} }
func (m *BuyerMonoCrow) String() string { return proto.CompactTextString(m) }
func (*BuyerMonoCrow) ProtoMessage()    {}
func (*BuyerMonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_5aad5c142d53149b, []int{0}
}
func (m *BuyerMonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyerMonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyerMonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyerMonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyerMonoCrow.Merge(m, src)
}
func (m *BuyerMonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *BuyerMonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyerMonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_BuyerMonoCrow proto.InternalMessageInfo

func (m *BuyerMonoCrow) GetBuyerCrowId() string {
	if m != nil {
		return m.BuyerCrowId
	}
	return ""
}

func (m *BuyerMonoCrow) GetDeposit() []types.Coin {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *BuyerMonoCrow) GetCollateral() []types.Coin {
	if m != nil {
		return m.Collateral
	}
	return nil
}

func (m *BuyerMonoCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *BuyerMonoCrow) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func init() {
	proto.RegisterType((*BuyerMonoCrow)(nil), "crowlabs.delta.escrow.BuyerMonoCrow")
}

func init() { proto.RegisterFile("escrow/buyer_mono_crow.proto", fileDescriptor_5aad5c142d53149b) }

var fileDescriptor_5aad5c142d53149b = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x3f, 0x4b, 0xc4, 0x30,
	0x18, 0xc6, 0x1b, 0xef, 0x8f, 0x98, 0xc3, 0x25, 0x9c, 0x52, 0x0f, 0x89, 0x87, 0xd3, 0x39, 0x98,
	0x70, 0x3a, 0x39, 0x09, 0xed, 0xe4, 0xe0, 0x72, 0xa3, 0xcb, 0x91, 0xb4, 0xa1, 0x16, 0xda, 0xbe,
	0xa5, 0x49, 0x3d, 0xef, 0x5b, 0xf8, 0xb1, 0x6e, 0xbc, 0x51, 0x10, 0x44, 0xda, 0x2f, 0x22, 0x49,
	0x2b, 0xdc, 0xe8, 0x96, 0xe7, 0xcd, 0xf3, 0xf2, 0x7b, 0xf9, 0xe1, 0x4b, 0xa5, 0xa3, 0x0a, 0x36,
	0x5c, 0xd6, 0x5b, 0x55, 0xad, 0x73, 0x28, 0x60, 0x6d, 0x33, 0x2b, 0x2b, 0x30, 0x40, 0xce, 0xec,
	0x3b, 0x13, 0x52, 0xb3, 0x58, 0x65, 0x46, 0xb0, 0xae, 0x3c, 0x9b, 0x26, 0x90, 0x80, 0x6b, 0x70,
	0xfb, 0xea, 0xca, 0x33, 0x1a, 0x81, 0xce, 0x41, 0x73, 0x29, 0xb4, 0xe2, 0x6f, 0x4b, 0xa9, 0x8c,
	0x58, 0xf2, 0x08, 0xd2, 0xa2, 0xfb, 0xbf, 0xfe, 0x42, 0xf8, 0x34, 0xb0, 0x98, 0x67, 0x28, 0x20,
	0xac, 0x60, 0x43, 0xe6, 0x78, 0xe2, 0xb8, 0x36, 0x3c, 0xc5, 0x3e, 0x9a, 0xa3, 0xc5, 0xc9, 0xea,
	0x70, 0x44, 0x1e, 0xf0, 0x71, 0xac, 0x4a, 0xd0, 0xa9, 0xf1, 0x8f, 0xe6, 0x83, 0xc5, 0xe4, 0xee,
	0x82, 0x75, 0x14, 0x66, 0x29, 0xac, 0xa7, 0xb0, 0x10, 0xd2, 0x22, 0x18, 0xee, 0xbe, 0xaf, 0xbc,
	0xd5, 0x5f, 0x9f, 0x3c, 0x62, 0x1c, 0x41, 0x96, 0x09, 0xa3, 0x2a, 0x91, 0xf9, 0x83, 0xff, 0x6d,
	0x1f, 0xac, 0x90, 0x73, 0x3c, 0xd6, 0x46, 0x98, 0x5a, 0xfb, 0x43, 0x77, 0x58, 0x9f, 0xc8, 0x14,
	0x8f, 0xdc, 0x89, 0xfe, 0xc8, 0x8d, 0xbb, 0x10, 0x84, 0xbb, 0x86, 0xa2, 0x7d, 0x43, 0xd1, 0x4f,
	0x43, 0xd1, 0x47, 0x4b, 0xbd, 0x7d, 0x4b, 0xbd, 0xcf, 0x96, 0x7a, 0x2f, 0x37, 0x49, 0x6a, 0x5e,
	0x6b, 0xc9, 0x22, 0xc8, 0xb9, 0xd5, 0x77, 0x6b, 0x85, 0x72, 0x27, 0x94, 0xbf, 0xf3, 0xde, 0xbf,
	0xd9, 0x96, 0x4a, 0xcb, 0xb1, 0x33, 0x75, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x11, 0x29,
	0xe3, 0x96, 0x01, 0x00, 0x00,
}

func (m *BuyerMonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyerMonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyerMonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintBuyerMonoCrow(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBuyerMonoCrow(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Collateral) > 0 {
		for iNdEx := len(m.Collateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuyerMonoCrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBuyerMonoCrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BuyerCrowId) > 0 {
		i -= len(m.BuyerCrowId)
		copy(dAtA[i:], m.BuyerCrowId)
		i = encodeVarintBuyerMonoCrow(dAtA, i, uint64(len(m.BuyerCrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBuyerMonoCrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovBuyerMonoCrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BuyerMonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BuyerCrowId)
	if l > 0 {
		n += 1 + l + sovBuyerMonoCrow(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovBuyerMonoCrow(uint64(l))
		}
	}
	if len(m.Collateral) > 0 {
		for _, e := range m.Collateral {
			l = e.Size()
			n += 1 + l + sovBuyerMonoCrow(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBuyerMonoCrow(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovBuyerMonoCrow(uint64(l))
	}
	return n
}

func sovBuyerMonoCrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBuyerMonoCrow(x uint64) (n int) {
	return sovBuyerMonoCrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BuyerMonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuyerMonoCrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyerMonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyerMonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyerMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyerMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyerMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyerMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuyerMonoCrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuyerMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyerMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuyerMonoCrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuyerMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = append(m.Collateral, types.Coin{})
			if err := m.Collateral[len(m.Collateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyerMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyerMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyerMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuyerMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuyerMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBuyerMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuyerMonoCrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuyerMonoCrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuyerMonoCrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuyerMonoCrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuyerMonoCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuyerMonoCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBuyerMonoCrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBuyerMonoCrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBuyerMonoCrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBuyerMonoCrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuyerMonoCrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBuyerMonoCrow = fmt.Errorf("proto: unexpected end of group")
)
