// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/seller_crow.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SellerCrow struct {
	CrowId       string `protobuf:"bytes,1,opt,name=crowId,proto3" json:"crowId,omitempty"`
	SellerId     string `protobuf:"bytes,2,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
	SellerCrowId string `protobuf:"bytes,3,opt,name=sellerCrowId,proto3" json:"sellerCrowId,omitempty"`
}

func (m *SellerCrow) Reset()         { *m = SellerCrow{} }
func (m *SellerCrow) String() string { return proto.CompactTextString(m) }
func (*SellerCrow) ProtoMessage()    {}
func (*SellerCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_3083347f6b40d858, []int{0}
}
func (m *SellerCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SellerCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SellerCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SellerCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellerCrow.Merge(m, src)
}
func (m *SellerCrow) XXX_Size() int {
	return m.Size()
}
func (m *SellerCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_SellerCrow.DiscardUnknown(m)
}

var xxx_messageInfo_SellerCrow proto.InternalMessageInfo

func (m *SellerCrow) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *SellerCrow) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

func (m *SellerCrow) GetSellerCrowId() string {
	if m != nil {
		return m.SellerCrowId
	}
	return ""
}

func init() {
	proto.RegisterType((*SellerCrow)(nil), "crowlabs.delta.escrow.SellerCrow")
}

func init() { proto.RegisterFile("escrow/seller_crow.proto", fileDescriptor_3083347f6b40d858) }

var fileDescriptor_3083347f6b40d858 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0x2d, 0x4e, 0x2e,
	0xca, 0x2f, 0xd7, 0x2f, 0x4e, 0xcd, 0xc9, 0x49, 0x2d, 0x8a, 0x07, 0xb1, 0xf5, 0x0a, 0x8a, 0xf2,
	0x4b, 0xf2, 0x85, 0x44, 0x41, 0xec, 0x9c, 0xc4, 0xa4, 0x62, 0xbd, 0x94, 0xd4, 0x9c, 0x92, 0x44,
	0x3d, 0x88, 0x42, 0xa5, 0x14, 0x2e, 0xae, 0x60, 0xb0, 0x5a, 0xe7, 0xa2, 0xfc, 0x72, 0x21, 0x31,
	0x2e, 0x36, 0x90, 0xa8, 0x67, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x94, 0x27, 0x24,
	0xc5, 0xc5, 0x01, 0x31, 0xd1, 0x33, 0x45, 0x82, 0x09, 0x2c, 0x03, 0xe7, 0x0b, 0x29, 0x71, 0xf1,
	0x14, 0xc3, 0x4d, 0xf0, 0x4c, 0x91, 0x60, 0x06, 0xcb, 0xa3, 0x88, 0x39, 0x39, 0x9f, 0x78, 0x24,
	0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78,
	0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x66, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e,
	0x72, 0x7e, 0xae, 0x3e, 0xc8, 0x32, 0x5d, 0x90, 0x13, 0xf5, 0xc1, 0x4e, 0xd4, 0xaf, 0xd0, 0x87,
	0xfa, 0xa6, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec, 0x11, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xfe, 0xa4, 0xdf, 0x99, 0xe4, 0x00, 0x00, 0x00,
}

func (m *SellerCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SellerCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SellerCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerCrowId) > 0 {
		i -= len(m.SellerCrowId)
		copy(dAtA[i:], m.SellerCrowId)
		i = encodeVarintSellerCrow(dAtA, i, uint64(len(m.SellerCrowId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintSellerCrow(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintSellerCrow(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSellerCrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovSellerCrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SellerCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovSellerCrow(uint64(l))
	}
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovSellerCrow(uint64(l))
	}
	l = len(m.SellerCrowId)
	if l > 0 {
		n += 1 + l + sovSellerCrow(uint64(l))
	}
	return n
}

func sovSellerCrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSellerCrow(x uint64) (n int) {
	return sovSellerCrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SellerCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerCrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellerCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellerCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSellerCrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSellerCrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSellerCrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSellerCrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSellerCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSellerCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSellerCrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSellerCrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSellerCrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSellerCrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSellerCrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSellerCrow = fmt.Errorf("proto: unexpected end of group")
)
