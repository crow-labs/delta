// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/mono_crow.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MonoCrow struct {
	CrowId       string   `protobuf:"bytes,1,opt,name=crowId,proto3" json:"crowId,omitempty"`
	WhitelistId  string   `protobuf:"bytes,2,opt,name=whitelistId,proto3" json:"whitelistId,omitempty"`
	SellerCrowId string   `protobuf:"bytes,3,opt,name=sellerCrowId,proto3" json:"sellerCrowId,omitempty"`
	BuyerCrowId  string   `protobuf:"bytes,4,opt,name=buyerCrowId,proto3" json:"buyerCrowId,omitempty"`
	DisputeId    []string `protobuf:"bytes,5,rep,name=disputeId,proto3" json:"disputeId,omitempty"`
	Timeout      []string `protobuf:"bytes,6,rep,name=timeout,proto3" json:"timeout,omitempty"`
	Status       string   `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Seller       string   `protobuf:"bytes,8,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (m *MonoCrow) Reset()         { *m = MonoCrow{} }
func (m *MonoCrow) String() string { return proto.CompactTextString(m) }
func (*MonoCrow) ProtoMessage()    {}
func (*MonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff392b9628a0c133, []int{0}
}
func (m *MonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonoCrow.Merge(m, src)
}
func (m *MonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *MonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_MonoCrow proto.InternalMessageInfo

func (m *MonoCrow) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *MonoCrow) GetWhitelistId() string {
	if m != nil {
		return m.WhitelistId
	}
	return ""
}

func (m *MonoCrow) GetSellerCrowId() string {
	if m != nil {
		return m.SellerCrowId
	}
	return ""
}

func (m *MonoCrow) GetBuyerCrowId() string {
	if m != nil {
		return m.BuyerCrowId
	}
	return ""
}

func (m *MonoCrow) GetDisputeId() []string {
	if m != nil {
		return m.DisputeId
	}
	return nil
}

func (m *MonoCrow) GetTimeout() []string {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *MonoCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MonoCrow) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func init() {
	proto.RegisterType((*MonoCrow)(nil), "crowlabs.delta.escrow.MonoCrow")
}

func init() { proto.RegisterFile("escrow/mono_crow.proto", fileDescriptor_ff392b9628a0c133) }

var fileDescriptor_ff392b9628a0c133 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x63, 0x0a, 0x69, 0x63, 0x98, 0x2c, 0x51, 0x79, 0x40, 0x56, 0xd4, 0xa9, 0x0c, 0x24,
	0x03, 0x37, 0x20, 0x53, 0x06, 0x96, 0x8e, 0x2c, 0x28, 0x69, 0x2c, 0x1a, 0xc9, 0xe9, 0x8b, 0xe2,
	0x67, 0x85, 0xde, 0x82, 0x63, 0x31, 0x76, 0x64, 0x44, 0xc9, 0x0d, 0x38, 0x01, 0xb2, 0x1d, 0xa0,
	0x6c, 0xef, 0xff, 0xde, 0xef, 0xa7, 0xdf, 0x3f, 0x5d, 0x4a, 0xbd, 0xed, 0xa0, 0x4f, 0x1b, 0xd8,
	0xc3, 0xb3, 0x9d, 0x92, 0xb6, 0x03, 0x04, 0x76, 0x6d, 0x67, 0x55, 0x94, 0x3a, 0xa9, 0xa4, 0xc2,
	0x22, 0xf1, 0xb6, 0xd5, 0x17, 0xa1, 0x8b, 0x47, 0xd8, 0x43, 0xd6, 0x41, 0xcf, 0x96, 0x34, 0xb4,
	0x30, 0xaf, 0x38, 0x89, 0xc9, 0x3a, 0xda, 0x4c, 0x8a, 0xc5, 0xf4, 0xb2, 0xdf, 0xd5, 0x28, 0x55,
	0xad, 0x31, 0xaf, 0xf8, 0x99, 0x5b, 0x9e, 0x22, 0xb6, 0xa2, 0x57, 0x5a, 0x2a, 0x25, 0xbb, 0xcc,
	0xbf, 0x9f, 0x39, 0xcb, 0x3f, 0x66, 0xaf, 0x94, 0xe6, 0xf0, 0x6b, 0x39, 0xf7, 0x57, 0x4e, 0x10,
	0xbb, 0xa1, 0x51, 0x55, 0xeb, 0xd6, 0xa0, 0xcc, 0x2b, 0x7e, 0x11, 0xcf, 0xd6, 0xd1, 0xe6, 0x0f,
	0x30, 0x4e, 0xe7, 0x58, 0x37, 0x12, 0x0c, 0xf2, 0xd0, 0xed, 0x7e, 0xa4, 0xcd, 0xad, 0xb1, 0x40,
	0xa3, 0xf9, 0xdc, 0xe7, 0xf6, 0xca, 0x71, 0x97, 0x80, 0x2f, 0x26, 0xee, 0xd4, 0x43, 0xf6, 0x3e,
	0x08, 0x72, 0x1c, 0x04, 0xf9, 0x1c, 0x04, 0x79, 0x1b, 0x45, 0x70, 0x1c, 0x45, 0xf0, 0x31, 0x8a,
	0xe0, 0xe9, 0xf6, 0xa5, 0xc6, 0x9d, 0x29, 0x93, 0x2d, 0x34, 0xa9, 0xfd, 0xfc, 0x9d, 0x6d, 0x2c,
	0x75, 0x8d, 0xa5, 0xaf, 0xe9, 0x54, 0x2d, 0x1e, 0x5a, 0xa9, 0xcb, 0xd0, 0xf5, 0x7a, 0xff, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0xe8, 0xe1, 0x73, 0xb4, 0x71, 0x01, 0x00, 0x00,
}

func (m *MonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintMonoCrow(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMonoCrow(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Timeout) > 0 {
		for iNdEx := len(m.Timeout) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Timeout[iNdEx])
			copy(dAtA[i:], m.Timeout[iNdEx])
			i = encodeVarintMonoCrow(dAtA, i, uint64(len(m.Timeout[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DisputeId) > 0 {
		for iNdEx := len(m.DisputeId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DisputeId[iNdEx])
			copy(dAtA[i:], m.DisputeId[iNdEx])
			i = encodeVarintMonoCrow(dAtA, i, uint64(len(m.DisputeId[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BuyerCrowId) > 0 {
		i -= len(m.BuyerCrowId)
		copy(dAtA[i:], m.BuyerCrowId)
		i = encodeVarintMonoCrow(dAtA, i, uint64(len(m.BuyerCrowId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SellerCrowId) > 0 {
		i -= len(m.SellerCrowId)
		copy(dAtA[i:], m.SellerCrowId)
		i = encodeVarintMonoCrow(dAtA, i, uint64(len(m.SellerCrowId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WhitelistId) > 0 {
		i -= len(m.WhitelistId)
		copy(dAtA[i:], m.WhitelistId)
		i = encodeVarintMonoCrow(dAtA, i, uint64(len(m.WhitelistId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintMonoCrow(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonoCrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonoCrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovMonoCrow(uint64(l))
	}
	l = len(m.WhitelistId)
	if l > 0 {
		n += 1 + l + sovMonoCrow(uint64(l))
	}
	l = len(m.SellerCrowId)
	if l > 0 {
		n += 1 + l + sovMonoCrow(uint64(l))
	}
	l = len(m.BuyerCrowId)
	if l > 0 {
		n += 1 + l + sovMonoCrow(uint64(l))
	}
	if len(m.DisputeId) > 0 {
		for _, s := range m.DisputeId {
			l = len(s)
			n += 1 + l + sovMonoCrow(uint64(l))
		}
	}
	if len(m.Timeout) > 0 {
		for _, s := range m.Timeout {
			l = len(s)
			n += 1 + l + sovMonoCrow(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMonoCrow(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovMonoCrow(uint64(l))
	}
	return n
}

func sovMonoCrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonoCrow(x uint64) (n int) {
	return sovMonoCrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoCrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = append(m.DisputeId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = append(m.Timeout, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoCrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoCrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonoCrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonoCrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonoCrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonoCrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonoCrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonoCrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonoCrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonoCrow = fmt.Errorf("proto: unexpected end of group")
)
