// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetBuyerCrowRequest struct {
	CrowId  string `protobuf:"bytes,1,opt,name=crowId,proto3" json:"crowId,omitempty"`
	BuyerId string `protobuf:"bytes,2,opt,name=buyerId,proto3" json:"buyerId,omitempty"`
}

func (m *QueryGetBuyerCrowRequest) Reset()         { *m = QueryGetBuyerCrowRequest{} }
func (m *QueryGetBuyerCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBuyerCrowRequest) ProtoMessage()    {}
func (*QueryGetBuyerCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{2}
}
func (m *QueryGetBuyerCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBuyerCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBuyerCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBuyerCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBuyerCrowRequest.Merge(m, src)
}
func (m *QueryGetBuyerCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBuyerCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBuyerCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBuyerCrowRequest proto.InternalMessageInfo

func (m *QueryGetBuyerCrowRequest) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *QueryGetBuyerCrowRequest) GetBuyerId() string {
	if m != nil {
		return m.BuyerId
	}
	return ""
}

type QueryGetBuyerCrowResponse struct {
	BuyerCrow BuyerCrow `protobuf:"bytes,1,opt,name=buyerCrow,proto3" json:"buyerCrow"`
}

func (m *QueryGetBuyerCrowResponse) Reset()         { *m = QueryGetBuyerCrowResponse{} }
func (m *QueryGetBuyerCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBuyerCrowResponse) ProtoMessage()    {}
func (*QueryGetBuyerCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{3}
}
func (m *QueryGetBuyerCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBuyerCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBuyerCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBuyerCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBuyerCrowResponse.Merge(m, src)
}
func (m *QueryGetBuyerCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBuyerCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBuyerCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBuyerCrowResponse proto.InternalMessageInfo

func (m *QueryGetBuyerCrowResponse) GetBuyerCrow() BuyerCrow {
	if m != nil {
		return m.BuyerCrow
	}
	return BuyerCrow{}
}

type QueryAllBuyerCrowRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBuyerCrowRequest) Reset()         { *m = QueryAllBuyerCrowRequest{} }
func (m *QueryAllBuyerCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBuyerCrowRequest) ProtoMessage()    {}
func (*QueryAllBuyerCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{4}
}
func (m *QueryAllBuyerCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBuyerCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBuyerCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBuyerCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBuyerCrowRequest.Merge(m, src)
}
func (m *QueryAllBuyerCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBuyerCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBuyerCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBuyerCrowRequest proto.InternalMessageInfo

func (m *QueryAllBuyerCrowRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBuyerCrowResponse struct {
	BuyerCrow  []BuyerCrow         `protobuf:"bytes,1,rep,name=buyerCrow,proto3" json:"buyerCrow"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBuyerCrowResponse) Reset()         { *m = QueryAllBuyerCrowResponse{} }
func (m *QueryAllBuyerCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBuyerCrowResponse) ProtoMessage()    {}
func (*QueryAllBuyerCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{5}
}
func (m *QueryAllBuyerCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBuyerCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBuyerCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBuyerCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBuyerCrowResponse.Merge(m, src)
}
func (m *QueryAllBuyerCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBuyerCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBuyerCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBuyerCrowResponse proto.InternalMessageInfo

func (m *QueryAllBuyerCrowResponse) GetBuyerCrow() []BuyerCrow {
	if m != nil {
		return m.BuyerCrow
	}
	return nil
}

func (m *QueryAllBuyerCrowResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBuyerMonoCrowRequest struct {
	BuyerCrowId string `protobuf:"bytes,1,opt,name=buyerCrowId,proto3" json:"buyerCrowId,omitempty"`
}

func (m *QueryGetBuyerMonoCrowRequest) Reset()         { *m = QueryGetBuyerMonoCrowRequest{} }
func (m *QueryGetBuyerMonoCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBuyerMonoCrowRequest) ProtoMessage()    {}
func (*QueryGetBuyerMonoCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{6}
}
func (m *QueryGetBuyerMonoCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBuyerMonoCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBuyerMonoCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBuyerMonoCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBuyerMonoCrowRequest.Merge(m, src)
}
func (m *QueryGetBuyerMonoCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBuyerMonoCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBuyerMonoCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBuyerMonoCrowRequest proto.InternalMessageInfo

func (m *QueryGetBuyerMonoCrowRequest) GetBuyerCrowId() string {
	if m != nil {
		return m.BuyerCrowId
	}
	return ""
}

type QueryGetBuyerMonoCrowResponse struct {
	BuyerMonoCrow BuyerMonoCrow `protobuf:"bytes,1,opt,name=buyerMonoCrow,proto3" json:"buyerMonoCrow"`
}

func (m *QueryGetBuyerMonoCrowResponse) Reset()         { *m = QueryGetBuyerMonoCrowResponse{} }
func (m *QueryGetBuyerMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBuyerMonoCrowResponse) ProtoMessage()    {}
func (*QueryGetBuyerMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{7}
}
func (m *QueryGetBuyerMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBuyerMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBuyerMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBuyerMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBuyerMonoCrowResponse.Merge(m, src)
}
func (m *QueryGetBuyerMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBuyerMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBuyerMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBuyerMonoCrowResponse proto.InternalMessageInfo

func (m *QueryGetBuyerMonoCrowResponse) GetBuyerMonoCrow() BuyerMonoCrow {
	if m != nil {
		return m.BuyerMonoCrow
	}
	return BuyerMonoCrow{}
}

type QueryAllBuyerMonoCrowRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBuyerMonoCrowRequest) Reset()         { *m = QueryAllBuyerMonoCrowRequest{} }
func (m *QueryAllBuyerMonoCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBuyerMonoCrowRequest) ProtoMessage()    {}
func (*QueryAllBuyerMonoCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{8}
}
func (m *QueryAllBuyerMonoCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBuyerMonoCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBuyerMonoCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBuyerMonoCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBuyerMonoCrowRequest.Merge(m, src)
}
func (m *QueryAllBuyerMonoCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBuyerMonoCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBuyerMonoCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBuyerMonoCrowRequest proto.InternalMessageInfo

func (m *QueryAllBuyerMonoCrowRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBuyerMonoCrowResponse struct {
	BuyerMonoCrow []BuyerMonoCrow     `protobuf:"bytes,1,rep,name=buyerMonoCrow,proto3" json:"buyerMonoCrow"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBuyerMonoCrowResponse) Reset()         { *m = QueryAllBuyerMonoCrowResponse{} }
func (m *QueryAllBuyerMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBuyerMonoCrowResponse) ProtoMessage()    {}
func (*QueryAllBuyerMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{9}
}
func (m *QueryAllBuyerMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBuyerMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBuyerMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBuyerMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBuyerMonoCrowResponse.Merge(m, src)
}
func (m *QueryAllBuyerMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBuyerMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBuyerMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBuyerMonoCrowResponse proto.InternalMessageInfo

func (m *QueryAllBuyerMonoCrowResponse) GetBuyerMonoCrow() []BuyerMonoCrow {
	if m != nil {
		return m.BuyerMonoCrow
	}
	return nil
}

func (m *QueryAllBuyerMonoCrowResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSellerCrowRequest struct {
	CrowId   string `protobuf:"bytes,1,opt,name=crowId,proto3" json:"crowId,omitempty"`
	SellerId string `protobuf:"bytes,2,opt,name=sellerId,proto3" json:"sellerId,omitempty"`
}

func (m *QueryGetSellerCrowRequest) Reset()         { *m = QueryGetSellerCrowRequest{} }
func (m *QueryGetSellerCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSellerCrowRequest) ProtoMessage()    {}
func (*QueryGetSellerCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{10}
}
func (m *QueryGetSellerCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSellerCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSellerCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSellerCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSellerCrowRequest.Merge(m, src)
}
func (m *QueryGetSellerCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSellerCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSellerCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSellerCrowRequest proto.InternalMessageInfo

func (m *QueryGetSellerCrowRequest) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *QueryGetSellerCrowRequest) GetSellerId() string {
	if m != nil {
		return m.SellerId
	}
	return ""
}

type QueryGetSellerCrowResponse struct {
	SellerCrow SellerCrow `protobuf:"bytes,1,opt,name=sellerCrow,proto3" json:"sellerCrow"`
}

func (m *QueryGetSellerCrowResponse) Reset()         { *m = QueryGetSellerCrowResponse{} }
func (m *QueryGetSellerCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSellerCrowResponse) ProtoMessage()    {}
func (*QueryGetSellerCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{11}
}
func (m *QueryGetSellerCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSellerCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSellerCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSellerCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSellerCrowResponse.Merge(m, src)
}
func (m *QueryGetSellerCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSellerCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSellerCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSellerCrowResponse proto.InternalMessageInfo

func (m *QueryGetSellerCrowResponse) GetSellerCrow() SellerCrow {
	if m != nil {
		return m.SellerCrow
	}
	return SellerCrow{}
}

type QueryAllSellerCrowRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSellerCrowRequest) Reset()         { *m = QueryAllSellerCrowRequest{} }
func (m *QueryAllSellerCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSellerCrowRequest) ProtoMessage()    {}
func (*QueryAllSellerCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{12}
}
func (m *QueryAllSellerCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSellerCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSellerCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSellerCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSellerCrowRequest.Merge(m, src)
}
func (m *QueryAllSellerCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSellerCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSellerCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSellerCrowRequest proto.InternalMessageInfo

func (m *QueryAllSellerCrowRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSellerCrowResponse struct {
	SellerCrow []SellerCrow        `protobuf:"bytes,1,rep,name=sellerCrow,proto3" json:"sellerCrow"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSellerCrowResponse) Reset()         { *m = QueryAllSellerCrowResponse{} }
func (m *QueryAllSellerCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSellerCrowResponse) ProtoMessage()    {}
func (*QueryAllSellerCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{13}
}
func (m *QueryAllSellerCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSellerCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSellerCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSellerCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSellerCrowResponse.Merge(m, src)
}
func (m *QueryAllSellerCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSellerCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSellerCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSellerCrowResponse proto.InternalMessageInfo

func (m *QueryAllSellerCrowResponse) GetSellerCrow() []SellerCrow {
	if m != nil {
		return m.SellerCrow
	}
	return nil
}

func (m *QueryAllSellerCrowResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSellerMonoCrowRequest struct {
	SellerCrowId string `protobuf:"bytes,1,opt,name=sellerCrowId,proto3" json:"sellerCrowId,omitempty"`
}

func (m *QueryGetSellerMonoCrowRequest) Reset()         { *m = QueryGetSellerMonoCrowRequest{} }
func (m *QueryGetSellerMonoCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSellerMonoCrowRequest) ProtoMessage()    {}
func (*QueryGetSellerMonoCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{14}
}
func (m *QueryGetSellerMonoCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSellerMonoCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSellerMonoCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSellerMonoCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSellerMonoCrowRequest.Merge(m, src)
}
func (m *QueryGetSellerMonoCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSellerMonoCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSellerMonoCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSellerMonoCrowRequest proto.InternalMessageInfo

func (m *QueryGetSellerMonoCrowRequest) GetSellerCrowId() string {
	if m != nil {
		return m.SellerCrowId
	}
	return ""
}

type QueryGetSellerMonoCrowResponse struct {
	SellerMonoCrow SellerMonoCrow `protobuf:"bytes,1,opt,name=sellerMonoCrow,proto3" json:"sellerMonoCrow"`
}

func (m *QueryGetSellerMonoCrowResponse) Reset()         { *m = QueryGetSellerMonoCrowResponse{} }
func (m *QueryGetSellerMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSellerMonoCrowResponse) ProtoMessage()    {}
func (*QueryGetSellerMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{15}
}
func (m *QueryGetSellerMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSellerMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSellerMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSellerMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSellerMonoCrowResponse.Merge(m, src)
}
func (m *QueryGetSellerMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSellerMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSellerMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSellerMonoCrowResponse proto.InternalMessageInfo

func (m *QueryGetSellerMonoCrowResponse) GetSellerMonoCrow() SellerMonoCrow {
	if m != nil {
		return m.SellerMonoCrow
	}
	return SellerMonoCrow{}
}

type QueryAllSellerMonoCrowRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSellerMonoCrowRequest) Reset()         { *m = QueryAllSellerMonoCrowRequest{} }
func (m *QueryAllSellerMonoCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSellerMonoCrowRequest) ProtoMessage()    {}
func (*QueryAllSellerMonoCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{16}
}
func (m *QueryAllSellerMonoCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSellerMonoCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSellerMonoCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSellerMonoCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSellerMonoCrowRequest.Merge(m, src)
}
func (m *QueryAllSellerMonoCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSellerMonoCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSellerMonoCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSellerMonoCrowRequest proto.InternalMessageInfo

func (m *QueryAllSellerMonoCrowRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSellerMonoCrowResponse struct {
	SellerMonoCrow []SellerMonoCrow    `protobuf:"bytes,1,rep,name=sellerMonoCrow,proto3" json:"sellerMonoCrow"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSellerMonoCrowResponse) Reset()         { *m = QueryAllSellerMonoCrowResponse{} }
func (m *QueryAllSellerMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSellerMonoCrowResponse) ProtoMessage()    {}
func (*QueryAllSellerMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{17}
}
func (m *QueryAllSellerMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSellerMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSellerMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSellerMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSellerMonoCrowResponse.Merge(m, src)
}
func (m *QueryAllSellerMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSellerMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSellerMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSellerMonoCrowResponse proto.InternalMessageInfo

func (m *QueryAllSellerMonoCrowResponse) GetSellerMonoCrow() []SellerMonoCrow {
	if m != nil {
		return m.SellerMonoCrow
	}
	return nil
}

func (m *QueryAllSellerMonoCrowResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCrowRequest struct {
	OrderId   string `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ListingId string `protobuf:"bytes,2,opt,name=listingId,proto3" json:"listingId,omitempty"`
}

func (m *QueryGetCrowRequest) Reset()         { *m = QueryGetCrowRequest{} }
func (m *QueryGetCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrowRequest) ProtoMessage()    {}
func (*QueryGetCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{18}
}
func (m *QueryGetCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrowRequest.Merge(m, src)
}
func (m *QueryGetCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrowRequest proto.InternalMessageInfo

func (m *QueryGetCrowRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *QueryGetCrowRequest) GetListingId() string {
	if m != nil {
		return m.ListingId
	}
	return ""
}

type QueryGetCrowResponse struct {
	Crow Crow `protobuf:"bytes,1,opt,name=crow,proto3" json:"crow"`
}

func (m *QueryGetCrowResponse) Reset()         { *m = QueryGetCrowResponse{} }
func (m *QueryGetCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrowResponse) ProtoMessage()    {}
func (*QueryGetCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{19}
}
func (m *QueryGetCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrowResponse.Merge(m, src)
}
func (m *QueryGetCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrowResponse proto.InternalMessageInfo

func (m *QueryGetCrowResponse) GetCrow() Crow {
	if m != nil {
		return m.Crow
	}
	return Crow{}
}

type QueryAllCrowRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrowRequest) Reset()         { *m = QueryAllCrowRequest{} }
func (m *QueryAllCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrowRequest) ProtoMessage()    {}
func (*QueryAllCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{20}
}
func (m *QueryAllCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrowRequest.Merge(m, src)
}
func (m *QueryAllCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrowRequest proto.InternalMessageInfo

func (m *QueryAllCrowRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrowResponse struct {
	Crow       []Crow              `protobuf:"bytes,1,rep,name=crow,proto3" json:"crow"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrowResponse) Reset()         { *m = QueryAllCrowResponse{} }
func (m *QueryAllCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrowResponse) ProtoMessage()    {}
func (*QueryAllCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{21}
}
func (m *QueryAllCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrowResponse.Merge(m, src)
}
func (m *QueryAllCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrowResponse proto.InternalMessageInfo

func (m *QueryAllCrowResponse) GetCrow() []Crow {
	if m != nil {
		return m.Crow
	}
	return nil
}

func (m *QueryAllCrowResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMonoCrowRequest struct {
	CrowId string `protobuf:"bytes,1,opt,name=crowId,proto3" json:"crowId,omitempty"`
}

func (m *QueryGetMonoCrowRequest) Reset()         { *m = QueryGetMonoCrowRequest{} }
func (m *QueryGetMonoCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMonoCrowRequest) ProtoMessage()    {}
func (*QueryGetMonoCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{22}
}
func (m *QueryGetMonoCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMonoCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMonoCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMonoCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMonoCrowRequest.Merge(m, src)
}
func (m *QueryGetMonoCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMonoCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMonoCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMonoCrowRequest proto.InternalMessageInfo

func (m *QueryGetMonoCrowRequest) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

type QueryGetMonoCrowResponse struct {
	MonoCrow MonoCrow `protobuf:"bytes,1,opt,name=monoCrow,proto3" json:"monoCrow"`
}

func (m *QueryGetMonoCrowResponse) Reset()         { *m = QueryGetMonoCrowResponse{} }
func (m *QueryGetMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMonoCrowResponse) ProtoMessage()    {}
func (*QueryGetMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{23}
}
func (m *QueryGetMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMonoCrowResponse.Merge(m, src)
}
func (m *QueryGetMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMonoCrowResponse proto.InternalMessageInfo

func (m *QueryGetMonoCrowResponse) GetMonoCrow() MonoCrow {
	if m != nil {
		return m.MonoCrow
	}
	return MonoCrow{}
}

type QueryAllMonoCrowRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMonoCrowRequest) Reset()         { *m = QueryAllMonoCrowRequest{} }
func (m *QueryAllMonoCrowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMonoCrowRequest) ProtoMessage()    {}
func (*QueryAllMonoCrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{24}
}
func (m *QueryAllMonoCrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMonoCrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMonoCrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMonoCrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMonoCrowRequest.Merge(m, src)
}
func (m *QueryAllMonoCrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMonoCrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMonoCrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMonoCrowRequest proto.InternalMessageInfo

func (m *QueryAllMonoCrowRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMonoCrowResponse struct {
	MonoCrow   []MonoCrow          `protobuf:"bytes,1,rep,name=monoCrow,proto3" json:"monoCrow"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMonoCrowResponse) Reset()         { *m = QueryAllMonoCrowResponse{} }
func (m *QueryAllMonoCrowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMonoCrowResponse) ProtoMessage()    {}
func (*QueryAllMonoCrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{25}
}
func (m *QueryAllMonoCrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMonoCrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMonoCrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMonoCrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMonoCrowResponse.Merge(m, src)
}
func (m *QueryAllMonoCrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMonoCrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMonoCrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMonoCrowResponse proto.InternalMessageInfo

func (m *QueryAllMonoCrowResponse) GetMonoCrow() []MonoCrow {
	if m != nil {
		return m.MonoCrow
	}
	return nil
}

func (m *QueryAllMonoCrowResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDisputeRequest struct {
	CrowId      string `protobuf:"bytes,1,opt,name=crowId,proto3" json:"crowId,omitempty"`
	PlaintiffId string `protobuf:"bytes,2,opt,name=plaintiffId,proto3" json:"plaintiffId,omitempty"`
}

func (m *QueryGetDisputeRequest) Reset()         { *m = QueryGetDisputeRequest{} }
func (m *QueryGetDisputeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDisputeRequest) ProtoMessage()    {}
func (*QueryGetDisputeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{26}
}
func (m *QueryGetDisputeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDisputeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDisputeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDisputeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDisputeRequest.Merge(m, src)
}
func (m *QueryGetDisputeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDisputeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDisputeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDisputeRequest proto.InternalMessageInfo

func (m *QueryGetDisputeRequest) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *QueryGetDisputeRequest) GetPlaintiffId() string {
	if m != nil {
		return m.PlaintiffId
	}
	return ""
}

type QueryGetDisputeResponse struct {
	Dispute Dispute `protobuf:"bytes,1,opt,name=dispute,proto3" json:"dispute"`
}

func (m *QueryGetDisputeResponse) Reset()         { *m = QueryGetDisputeResponse{} }
func (m *QueryGetDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDisputeResponse) ProtoMessage()    {}
func (*QueryGetDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{27}
}
func (m *QueryGetDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDisputeResponse.Merge(m, src)
}
func (m *QueryGetDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDisputeResponse proto.InternalMessageInfo

func (m *QueryGetDisputeResponse) GetDispute() Dispute {
	if m != nil {
		return m.Dispute
	}
	return Dispute{}
}

type QueryAllDisputeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDisputeRequest) Reset()         { *m = QueryAllDisputeRequest{} }
func (m *QueryAllDisputeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDisputeRequest) ProtoMessage()    {}
func (*QueryAllDisputeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{28}
}
func (m *QueryAllDisputeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDisputeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDisputeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDisputeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDisputeRequest.Merge(m, src)
}
func (m *QueryAllDisputeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDisputeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDisputeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDisputeRequest proto.InternalMessageInfo

func (m *QueryAllDisputeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDisputeResponse struct {
	Dispute    []Dispute           `protobuf:"bytes,1,rep,name=dispute,proto3" json:"dispute"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDisputeResponse) Reset()         { *m = QueryAllDisputeResponse{} }
func (m *QueryAllDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDisputeResponse) ProtoMessage()    {}
func (*QueryAllDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{29}
}
func (m *QueryAllDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDisputeResponse.Merge(m, src)
}
func (m *QueryAllDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDisputeResponse proto.InternalMessageInfo

func (m *QueryAllDisputeResponse) GetDispute() []Dispute {
	if m != nil {
		return m.Dispute
	}
	return nil
}

func (m *QueryAllDisputeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMonoDisputeRequest struct {
	DisputeId string `protobuf:"bytes,1,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
}

func (m *QueryGetMonoDisputeRequest) Reset()         { *m = QueryGetMonoDisputeRequest{} }
func (m *QueryGetMonoDisputeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMonoDisputeRequest) ProtoMessage()    {}
func (*QueryGetMonoDisputeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{30}
}
func (m *QueryGetMonoDisputeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMonoDisputeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMonoDisputeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMonoDisputeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMonoDisputeRequest.Merge(m, src)
}
func (m *QueryGetMonoDisputeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMonoDisputeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMonoDisputeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMonoDisputeRequest proto.InternalMessageInfo

func (m *QueryGetMonoDisputeRequest) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

type QueryGetMonoDisputeResponse struct {
	MonoDispute MonoDispute `protobuf:"bytes,1,opt,name=monoDispute,proto3" json:"monoDispute"`
}

func (m *QueryGetMonoDisputeResponse) Reset()         { *m = QueryGetMonoDisputeResponse{} }
func (m *QueryGetMonoDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMonoDisputeResponse) ProtoMessage()    {}
func (*QueryGetMonoDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{31}
}
func (m *QueryGetMonoDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMonoDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMonoDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMonoDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMonoDisputeResponse.Merge(m, src)
}
func (m *QueryGetMonoDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMonoDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMonoDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMonoDisputeResponse proto.InternalMessageInfo

func (m *QueryGetMonoDisputeResponse) GetMonoDispute() MonoDispute {
	if m != nil {
		return m.MonoDispute
	}
	return MonoDispute{}
}

type QueryAllMonoDisputeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMonoDisputeRequest) Reset()         { *m = QueryAllMonoDisputeRequest{} }
func (m *QueryAllMonoDisputeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMonoDisputeRequest) ProtoMessage()    {}
func (*QueryAllMonoDisputeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{32}
}
func (m *QueryAllMonoDisputeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMonoDisputeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMonoDisputeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMonoDisputeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMonoDisputeRequest.Merge(m, src)
}
func (m *QueryAllMonoDisputeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMonoDisputeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMonoDisputeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMonoDisputeRequest proto.InternalMessageInfo

func (m *QueryAllMonoDisputeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMonoDisputeResponse struct {
	MonoDispute []MonoDispute       `protobuf:"bytes,1,rep,name=monoDispute,proto3" json:"monoDispute"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMonoDisputeResponse) Reset()         { *m = QueryAllMonoDisputeResponse{} }
func (m *QueryAllMonoDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMonoDisputeResponse) ProtoMessage()    {}
func (*QueryAllMonoDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{33}
}
func (m *QueryAllMonoDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMonoDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMonoDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMonoDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMonoDisputeResponse.Merge(m, src)
}
func (m *QueryAllMonoDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMonoDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMonoDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMonoDisputeResponse proto.InternalMessageInfo

func (m *QueryAllMonoDisputeResponse) GetMonoDispute() []MonoDispute {
	if m != nil {
		return m.MonoDispute
	}
	return nil
}

func (m *QueryAllMonoDisputeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRebuttalRequest struct {
	DisputeId   string `protobuf:"bytes,1,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	DefendantId string `protobuf:"bytes,2,opt,name=defendantId,proto3" json:"defendantId,omitempty"`
}

func (m *QueryGetRebuttalRequest) Reset()         { *m = QueryGetRebuttalRequest{} }
func (m *QueryGetRebuttalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRebuttalRequest) ProtoMessage()    {}
func (*QueryGetRebuttalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{34}
}
func (m *QueryGetRebuttalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRebuttalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRebuttalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRebuttalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRebuttalRequest.Merge(m, src)
}
func (m *QueryGetRebuttalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRebuttalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRebuttalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRebuttalRequest proto.InternalMessageInfo

func (m *QueryGetRebuttalRequest) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *QueryGetRebuttalRequest) GetDefendantId() string {
	if m != nil {
		return m.DefendantId
	}
	return ""
}

type QueryGetRebuttalResponse struct {
	Rebuttal Rebuttal `protobuf:"bytes,1,opt,name=rebuttal,proto3" json:"rebuttal"`
}

func (m *QueryGetRebuttalResponse) Reset()         { *m = QueryGetRebuttalResponse{} }
func (m *QueryGetRebuttalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRebuttalResponse) ProtoMessage()    {}
func (*QueryGetRebuttalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{35}
}
func (m *QueryGetRebuttalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRebuttalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRebuttalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRebuttalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRebuttalResponse.Merge(m, src)
}
func (m *QueryGetRebuttalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRebuttalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRebuttalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRebuttalResponse proto.InternalMessageInfo

func (m *QueryGetRebuttalResponse) GetRebuttal() Rebuttal {
	if m != nil {
		return m.Rebuttal
	}
	return Rebuttal{}
}

type QueryAllRebuttalRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRebuttalRequest) Reset()         { *m = QueryAllRebuttalRequest{} }
func (m *QueryAllRebuttalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRebuttalRequest) ProtoMessage()    {}
func (*QueryAllRebuttalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{36}
}
func (m *QueryAllRebuttalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRebuttalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRebuttalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRebuttalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRebuttalRequest.Merge(m, src)
}
func (m *QueryAllRebuttalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRebuttalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRebuttalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRebuttalRequest proto.InternalMessageInfo

func (m *QueryAllRebuttalRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRebuttalResponse struct {
	Rebuttal   []Rebuttal          `protobuf:"bytes,1,rep,name=rebuttal,proto3" json:"rebuttal"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRebuttalResponse) Reset()         { *m = QueryAllRebuttalResponse{} }
func (m *QueryAllRebuttalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRebuttalResponse) ProtoMessage()    {}
func (*QueryAllRebuttalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{37}
}
func (m *QueryAllRebuttalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRebuttalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRebuttalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRebuttalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRebuttalResponse.Merge(m, src)
}
func (m *QueryAllRebuttalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRebuttalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRebuttalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRebuttalResponse proto.InternalMessageInfo

func (m *QueryAllRebuttalResponse) GetRebuttal() []Rebuttal {
	if m != nil {
		return m.Rebuttal
	}
	return nil
}

func (m *QueryAllRebuttalResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMonoRebutalRequest struct {
	RebuttalId string `protobuf:"bytes,1,opt,name=rebuttalId,proto3" json:"rebuttalId,omitempty"`
}

func (m *QueryGetMonoRebutalRequest) Reset()         { *m = QueryGetMonoRebutalRequest{} }
func (m *QueryGetMonoRebutalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMonoRebutalRequest) ProtoMessage()    {}
func (*QueryGetMonoRebutalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{38}
}
func (m *QueryGetMonoRebutalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMonoRebutalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMonoRebutalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMonoRebutalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMonoRebutalRequest.Merge(m, src)
}
func (m *QueryGetMonoRebutalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMonoRebutalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMonoRebutalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMonoRebutalRequest proto.InternalMessageInfo

func (m *QueryGetMonoRebutalRequest) GetRebuttalId() string {
	if m != nil {
		return m.RebuttalId
	}
	return ""
}

type QueryGetMonoRebutalResponse struct {
	MonoRebutal MonoRebutal `protobuf:"bytes,1,opt,name=monoRebutal,proto3" json:"monoRebutal"`
}

func (m *QueryGetMonoRebutalResponse) Reset()         { *m = QueryGetMonoRebutalResponse{} }
func (m *QueryGetMonoRebutalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMonoRebutalResponse) ProtoMessage()    {}
func (*QueryGetMonoRebutalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{39}
}
func (m *QueryGetMonoRebutalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMonoRebutalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMonoRebutalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMonoRebutalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMonoRebutalResponse.Merge(m, src)
}
func (m *QueryGetMonoRebutalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMonoRebutalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMonoRebutalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMonoRebutalResponse proto.InternalMessageInfo

func (m *QueryGetMonoRebutalResponse) GetMonoRebutal() MonoRebutal {
	if m != nil {
		return m.MonoRebutal
	}
	return MonoRebutal{}
}

type QueryAllMonoRebutalRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMonoRebutalRequest) Reset()         { *m = QueryAllMonoRebutalRequest{} }
func (m *QueryAllMonoRebutalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMonoRebutalRequest) ProtoMessage()    {}
func (*QueryAllMonoRebutalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{40}
}
func (m *QueryAllMonoRebutalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMonoRebutalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMonoRebutalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMonoRebutalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMonoRebutalRequest.Merge(m, src)
}
func (m *QueryAllMonoRebutalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMonoRebutalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMonoRebutalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMonoRebutalRequest proto.InternalMessageInfo

func (m *QueryAllMonoRebutalRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMonoRebutalResponse struct {
	MonoRebutal []MonoRebutal       `protobuf:"bytes,1,rep,name=monoRebutal,proto3" json:"monoRebutal"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMonoRebutalResponse) Reset()         { *m = QueryAllMonoRebutalResponse{} }
func (m *QueryAllMonoRebutalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMonoRebutalResponse) ProtoMessage()    {}
func (*QueryAllMonoRebutalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{41}
}
func (m *QueryAllMonoRebutalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMonoRebutalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMonoRebutalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMonoRebutalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMonoRebutalResponse.Merge(m, src)
}
func (m *QueryAllMonoRebutalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMonoRebutalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMonoRebutalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMonoRebutalResponse proto.InternalMessageInfo

func (m *QueryAllMonoRebutalResponse) GetMonoRebutal() []MonoRebutal {
	if m != nil {
		return m.MonoRebutal
	}
	return nil
}

func (m *QueryAllMonoRebutalResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBallotRequest struct {
	DisputeId string `protobuf:"bytes,1,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	VoterId   string `protobuf:"bytes,2,opt,name=voterId,proto3" json:"voterId,omitempty"`
}

func (m *QueryGetBallotRequest) Reset()         { *m = QueryGetBallotRequest{} }
func (m *QueryGetBallotRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBallotRequest) ProtoMessage()    {}
func (*QueryGetBallotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{42}
}
func (m *QueryGetBallotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBallotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBallotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBallotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBallotRequest.Merge(m, src)
}
func (m *QueryGetBallotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBallotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBallotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBallotRequest proto.InternalMessageInfo

func (m *QueryGetBallotRequest) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *QueryGetBallotRequest) GetVoterId() string {
	if m != nil {
		return m.VoterId
	}
	return ""
}

type QueryGetBallotResponse struct {
	Ballot Ballot `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot"`
}

func (m *QueryGetBallotResponse) Reset()         { *m = QueryGetBallotResponse{} }
func (m *QueryGetBallotResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBallotResponse) ProtoMessage()    {}
func (*QueryGetBallotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{43}
}
func (m *QueryGetBallotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBallotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBallotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBallotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBallotResponse.Merge(m, src)
}
func (m *QueryGetBallotResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBallotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBallotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBallotResponse proto.InternalMessageInfo

func (m *QueryGetBallotResponse) GetBallot() Ballot {
	if m != nil {
		return m.Ballot
	}
	return Ballot{}
}

type QueryAllBallotRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBallotRequest) Reset()         { *m = QueryAllBallotRequest{} }
func (m *QueryAllBallotRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBallotRequest) ProtoMessage()    {}
func (*QueryAllBallotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{44}
}
func (m *QueryAllBallotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBallotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBallotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBallotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBallotRequest.Merge(m, src)
}
func (m *QueryAllBallotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBallotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBallotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBallotRequest proto.InternalMessageInfo

func (m *QueryAllBallotRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBallotResponse struct {
	Ballot     []Ballot            `protobuf:"bytes,1,rep,name=ballot,proto3" json:"ballot"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBallotResponse) Reset()         { *m = QueryAllBallotResponse{} }
func (m *QueryAllBallotResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBallotResponse) ProtoMessage()    {}
func (*QueryAllBallotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{45}
}
func (m *QueryAllBallotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBallotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBallotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBallotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBallotResponse.Merge(m, src)
}
func (m *QueryAllBallotResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBallotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBallotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBallotResponse proto.InternalMessageInfo

func (m *QueryAllBallotResponse) GetBallot() []Ballot {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (m *QueryAllBallotResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetVoteRequest struct {
	VoteId string `protobuf:"bytes,1,opt,name=voteId,proto3" json:"voteId,omitempty"`
}

func (m *QueryGetVoteRequest) Reset()         { *m = QueryGetVoteRequest{} }
func (m *QueryGetVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoteRequest) ProtoMessage()    {}
func (*QueryGetVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{46}
}
func (m *QueryGetVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoteRequest.Merge(m, src)
}
func (m *QueryGetVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoteRequest proto.InternalMessageInfo

func (m *QueryGetVoteRequest) GetVoteId() string {
	if m != nil {
		return m.VoteId
	}
	return ""
}

type QueryGetVoteResponse struct {
	Vote Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote"`
}

func (m *QueryGetVoteResponse) Reset()         { *m = QueryGetVoteResponse{} }
func (m *QueryGetVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoteResponse) ProtoMessage()    {}
func (*QueryGetVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{47}
}
func (m *QueryGetVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoteResponse.Merge(m, src)
}
func (m *QueryGetVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoteResponse proto.InternalMessageInfo

func (m *QueryGetVoteResponse) GetVote() Vote {
	if m != nil {
		return m.Vote
	}
	return Vote{}
}

type QueryAllVoteRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteRequest) Reset()         { *m = QueryAllVoteRequest{} }
func (m *QueryAllVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteRequest) ProtoMessage()    {}
func (*QueryAllVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{48}
}
func (m *QueryAllVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteRequest.Merge(m, src)
}
func (m *QueryAllVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteRequest proto.InternalMessageInfo

func (m *QueryAllVoteRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVoteResponse struct {
	Vote       []Vote              `protobuf:"bytes,1,rep,name=vote,proto3" json:"vote"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteResponse) Reset()         { *m = QueryAllVoteResponse{} }
func (m *QueryAllVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteResponse) ProtoMessage()    {}
func (*QueryAllVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{49}
}
func (m *QueryAllVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteResponse.Merge(m, src)
}
func (m *QueryAllVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteResponse proto.InternalMessageInfo

func (m *QueryAllVoteResponse) GetVote() []Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *QueryAllVoteResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPollRequest struct {
	CrowId    string `protobuf:"bytes,1,opt,name=crowId,proto3" json:"crowId,omitempty"`
	DisputeId string `protobuf:"bytes,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
}

func (m *QueryGetPollRequest) Reset()         { *m = QueryGetPollRequest{} }
func (m *QueryGetPollRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPollRequest) ProtoMessage()    {}
func (*QueryGetPollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{50}
}
func (m *QueryGetPollRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPollRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPollRequest.Merge(m, src)
}
func (m *QueryGetPollRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPollRequest proto.InternalMessageInfo

func (m *QueryGetPollRequest) GetCrowId() string {
	if m != nil {
		return m.CrowId
	}
	return ""
}

func (m *QueryGetPollRequest) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

type QueryGetPollResponse struct {
	Poll Poll `protobuf:"bytes,1,opt,name=poll,proto3" json:"poll"`
}

func (m *QueryGetPollResponse) Reset()         { *m = QueryGetPollResponse{} }
func (m *QueryGetPollResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPollResponse) ProtoMessage()    {}
func (*QueryGetPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{51}
}
func (m *QueryGetPollResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPollResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPollResponse.Merge(m, src)
}
func (m *QueryGetPollResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPollResponse proto.InternalMessageInfo

func (m *QueryGetPollResponse) GetPoll() Poll {
	if m != nil {
		return m.Poll
	}
	return Poll{}
}

type QueryAllPollRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPollRequest) Reset()         { *m = QueryAllPollRequest{} }
func (m *QueryAllPollRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPollRequest) ProtoMessage()    {}
func (*QueryAllPollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{52}
}
func (m *QueryAllPollRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPollRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPollRequest.Merge(m, src)
}
func (m *QueryAllPollRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPollRequest proto.InternalMessageInfo

func (m *QueryAllPollRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPollResponse struct {
	Poll       []Poll              `protobuf:"bytes,1,rep,name=poll,proto3" json:"poll"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPollResponse) Reset()         { *m = QueryAllPollResponse{} }
func (m *QueryAllPollResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPollResponse) ProtoMessage()    {}
func (*QueryAllPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{53}
}
func (m *QueryAllPollResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPollResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPollResponse.Merge(m, src)
}
func (m *QueryAllPollResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPollResponse proto.InternalMessageInfo

func (m *QueryAllPollResponse) GetPoll() []Poll {
	if m != nil {
		return m.Poll
	}
	return nil
}

func (m *QueryAllPollResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetVerdictRequest struct {
	VerdictId string `protobuf:"bytes,1,opt,name=verdictId,proto3" json:"verdictId,omitempty"`
}

func (m *QueryGetVerdictRequest) Reset()         { *m = QueryGetVerdictRequest{} }
func (m *QueryGetVerdictRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVerdictRequest) ProtoMessage()    {}
func (*QueryGetVerdictRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{54}
}
func (m *QueryGetVerdictRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVerdictRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVerdictRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVerdictRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVerdictRequest.Merge(m, src)
}
func (m *QueryGetVerdictRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVerdictRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVerdictRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVerdictRequest proto.InternalMessageInfo

func (m *QueryGetVerdictRequest) GetVerdictId() string {
	if m != nil {
		return m.VerdictId
	}
	return ""
}

type QueryGetVerdictResponse struct {
	Verdict Verdict `protobuf:"bytes,1,opt,name=verdict,proto3" json:"verdict"`
}

func (m *QueryGetVerdictResponse) Reset()         { *m = QueryGetVerdictResponse{} }
func (m *QueryGetVerdictResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVerdictResponse) ProtoMessage()    {}
func (*QueryGetVerdictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{55}
}
func (m *QueryGetVerdictResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVerdictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVerdictResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVerdictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVerdictResponse.Merge(m, src)
}
func (m *QueryGetVerdictResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVerdictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVerdictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVerdictResponse proto.InternalMessageInfo

func (m *QueryGetVerdictResponse) GetVerdict() Verdict {
	if m != nil {
		return m.Verdict
	}
	return Verdict{}
}

type QueryAllVerdictRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVerdictRequest) Reset()         { *m = QueryAllVerdictRequest{} }
func (m *QueryAllVerdictRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVerdictRequest) ProtoMessage()    {}
func (*QueryAllVerdictRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{56}
}
func (m *QueryAllVerdictRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVerdictRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVerdictRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVerdictRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVerdictRequest.Merge(m, src)
}
func (m *QueryAllVerdictRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVerdictRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVerdictRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVerdictRequest proto.InternalMessageInfo

func (m *QueryAllVerdictRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVerdictResponse struct {
	Verdict    []Verdict           `protobuf:"bytes,1,rep,name=verdict,proto3" json:"verdict"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVerdictResponse) Reset()         { *m = QueryAllVerdictResponse{} }
func (m *QueryAllVerdictResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVerdictResponse) ProtoMessage()    {}
func (*QueryAllVerdictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d37bf65b8b6e159, []int{57}
}
func (m *QueryAllVerdictResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVerdictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVerdictResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVerdictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVerdictResponse.Merge(m, src)
}
func (m *QueryAllVerdictResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVerdictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVerdictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVerdictResponse proto.InternalMessageInfo

func (m *QueryAllVerdictResponse) GetVerdict() []Verdict {
	if m != nil {
		return m.Verdict
	}
	return nil
}

func (m *QueryAllVerdictResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "crowlabs.delta.escrow.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "crowlabs.delta.escrow.QueryParamsResponse")
	proto.RegisterType((*QueryGetBuyerCrowRequest)(nil), "crowlabs.delta.escrow.QueryGetBuyerCrowRequest")
	proto.RegisterType((*QueryGetBuyerCrowResponse)(nil), "crowlabs.delta.escrow.QueryGetBuyerCrowResponse")
	proto.RegisterType((*QueryAllBuyerCrowRequest)(nil), "crowlabs.delta.escrow.QueryAllBuyerCrowRequest")
	proto.RegisterType((*QueryAllBuyerCrowResponse)(nil), "crowlabs.delta.escrow.QueryAllBuyerCrowResponse")
	proto.RegisterType((*QueryGetBuyerMonoCrowRequest)(nil), "crowlabs.delta.escrow.QueryGetBuyerMonoCrowRequest")
	proto.RegisterType((*QueryGetBuyerMonoCrowResponse)(nil), "crowlabs.delta.escrow.QueryGetBuyerMonoCrowResponse")
	proto.RegisterType((*QueryAllBuyerMonoCrowRequest)(nil), "crowlabs.delta.escrow.QueryAllBuyerMonoCrowRequest")
	proto.RegisterType((*QueryAllBuyerMonoCrowResponse)(nil), "crowlabs.delta.escrow.QueryAllBuyerMonoCrowResponse")
	proto.RegisterType((*QueryGetSellerCrowRequest)(nil), "crowlabs.delta.escrow.QueryGetSellerCrowRequest")
	proto.RegisterType((*QueryGetSellerCrowResponse)(nil), "crowlabs.delta.escrow.QueryGetSellerCrowResponse")
	proto.RegisterType((*QueryAllSellerCrowRequest)(nil), "crowlabs.delta.escrow.QueryAllSellerCrowRequest")
	proto.RegisterType((*QueryAllSellerCrowResponse)(nil), "crowlabs.delta.escrow.QueryAllSellerCrowResponse")
	proto.RegisterType((*QueryGetSellerMonoCrowRequest)(nil), "crowlabs.delta.escrow.QueryGetSellerMonoCrowRequest")
	proto.RegisterType((*QueryGetSellerMonoCrowResponse)(nil), "crowlabs.delta.escrow.QueryGetSellerMonoCrowResponse")
	proto.RegisterType((*QueryAllSellerMonoCrowRequest)(nil), "crowlabs.delta.escrow.QueryAllSellerMonoCrowRequest")
	proto.RegisterType((*QueryAllSellerMonoCrowResponse)(nil), "crowlabs.delta.escrow.QueryAllSellerMonoCrowResponse")
	proto.RegisterType((*QueryGetCrowRequest)(nil), "crowlabs.delta.escrow.QueryGetCrowRequest")
	proto.RegisterType((*QueryGetCrowResponse)(nil), "crowlabs.delta.escrow.QueryGetCrowResponse")
	proto.RegisterType((*QueryAllCrowRequest)(nil), "crowlabs.delta.escrow.QueryAllCrowRequest")
	proto.RegisterType((*QueryAllCrowResponse)(nil), "crowlabs.delta.escrow.QueryAllCrowResponse")
	proto.RegisterType((*QueryGetMonoCrowRequest)(nil), "crowlabs.delta.escrow.QueryGetMonoCrowRequest")
	proto.RegisterType((*QueryGetMonoCrowResponse)(nil), "crowlabs.delta.escrow.QueryGetMonoCrowResponse")
	proto.RegisterType((*QueryAllMonoCrowRequest)(nil), "crowlabs.delta.escrow.QueryAllMonoCrowRequest")
	proto.RegisterType((*QueryAllMonoCrowResponse)(nil), "crowlabs.delta.escrow.QueryAllMonoCrowResponse")
	proto.RegisterType((*QueryGetDisputeRequest)(nil), "crowlabs.delta.escrow.QueryGetDisputeRequest")
	proto.RegisterType((*QueryGetDisputeResponse)(nil), "crowlabs.delta.escrow.QueryGetDisputeResponse")
	proto.RegisterType((*QueryAllDisputeRequest)(nil), "crowlabs.delta.escrow.QueryAllDisputeRequest")
	proto.RegisterType((*QueryAllDisputeResponse)(nil), "crowlabs.delta.escrow.QueryAllDisputeResponse")
	proto.RegisterType((*QueryGetMonoDisputeRequest)(nil), "crowlabs.delta.escrow.QueryGetMonoDisputeRequest")
	proto.RegisterType((*QueryGetMonoDisputeResponse)(nil), "crowlabs.delta.escrow.QueryGetMonoDisputeResponse")
	proto.RegisterType((*QueryAllMonoDisputeRequest)(nil), "crowlabs.delta.escrow.QueryAllMonoDisputeRequest")
	proto.RegisterType((*QueryAllMonoDisputeResponse)(nil), "crowlabs.delta.escrow.QueryAllMonoDisputeResponse")
	proto.RegisterType((*QueryGetRebuttalRequest)(nil), "crowlabs.delta.escrow.QueryGetRebuttalRequest")
	proto.RegisterType((*QueryGetRebuttalResponse)(nil), "crowlabs.delta.escrow.QueryGetRebuttalResponse")
	proto.RegisterType((*QueryAllRebuttalRequest)(nil), "crowlabs.delta.escrow.QueryAllRebuttalRequest")
	proto.RegisterType((*QueryAllRebuttalResponse)(nil), "crowlabs.delta.escrow.QueryAllRebuttalResponse")
	proto.RegisterType((*QueryGetMonoRebutalRequest)(nil), "crowlabs.delta.escrow.QueryGetMonoRebutalRequest")
	proto.RegisterType((*QueryGetMonoRebutalResponse)(nil), "crowlabs.delta.escrow.QueryGetMonoRebutalResponse")
	proto.RegisterType((*QueryAllMonoRebutalRequest)(nil), "crowlabs.delta.escrow.QueryAllMonoRebutalRequest")
	proto.RegisterType((*QueryAllMonoRebutalResponse)(nil), "crowlabs.delta.escrow.QueryAllMonoRebutalResponse")
	proto.RegisterType((*QueryGetBallotRequest)(nil), "crowlabs.delta.escrow.QueryGetBallotRequest")
	proto.RegisterType((*QueryGetBallotResponse)(nil), "crowlabs.delta.escrow.QueryGetBallotResponse")
	proto.RegisterType((*QueryAllBallotRequest)(nil), "crowlabs.delta.escrow.QueryAllBallotRequest")
	proto.RegisterType((*QueryAllBallotResponse)(nil), "crowlabs.delta.escrow.QueryAllBallotResponse")
	proto.RegisterType((*QueryGetVoteRequest)(nil), "crowlabs.delta.escrow.QueryGetVoteRequest")
	proto.RegisterType((*QueryGetVoteResponse)(nil), "crowlabs.delta.escrow.QueryGetVoteResponse")
	proto.RegisterType((*QueryAllVoteRequest)(nil), "crowlabs.delta.escrow.QueryAllVoteRequest")
	proto.RegisterType((*QueryAllVoteResponse)(nil), "crowlabs.delta.escrow.QueryAllVoteResponse")
	proto.RegisterType((*QueryGetPollRequest)(nil), "crowlabs.delta.escrow.QueryGetPollRequest")
	proto.RegisterType((*QueryGetPollResponse)(nil), "crowlabs.delta.escrow.QueryGetPollResponse")
	proto.RegisterType((*QueryAllPollRequest)(nil), "crowlabs.delta.escrow.QueryAllPollRequest")
	proto.RegisterType((*QueryAllPollResponse)(nil), "crowlabs.delta.escrow.QueryAllPollResponse")
	proto.RegisterType((*QueryGetVerdictRequest)(nil), "crowlabs.delta.escrow.QueryGetVerdictRequest")
	proto.RegisterType((*QueryGetVerdictResponse)(nil), "crowlabs.delta.escrow.QueryGetVerdictResponse")
	proto.RegisterType((*QueryAllVerdictRequest)(nil), "crowlabs.delta.escrow.QueryAllVerdictRequest")
	proto.RegisterType((*QueryAllVerdictResponse)(nil), "crowlabs.delta.escrow.QueryAllVerdictResponse")
}

func init() { proto.RegisterFile("escrow/query.proto", fileDescriptor_6d37bf65b8b6e159) }

var fileDescriptor_6d37bf65b8b6e159 = []byte{
	// 2109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0xdd, 0x6f, 0xdc, 0x4a,
	0x15, 0xcf, 0x64, 0x43, 0x3e, 0x66, 0x6f, 0x2b, 0xee, 0xdc, 0xb4, 0x37, 0x77, 0x9b, 0x6e, 0xd3,
	0x69, 0xda, 0x34, 0x69, 0xb2, 0x6e, 0x3e, 0xfa, 0x49, 0x29, 0x24, 0xad, 0x88, 0x0a, 0x54, 0x84,
	0xad, 0xa8, 0x04, 0x52, 0x55, 0xbc, 0x59, 0x67, 0x59, 0xc9, 0x59, 0x6f, 0x77, 0x9d, 0x94, 0x2a,
	0xda, 0x17, 0x5e, 0xe0, 0x09, 0x55, 0x02, 0x21, 0x3e, 0x54, 0x10, 0x20, 0x10, 0x42, 0xa2, 0x48,
	0x7d, 0x83, 0x87, 0x3e, 0xf7, 0xb1, 0x12, 0x2f, 0x3c, 0x21, 0xd4, 0xf2, 0x57, 0xf0, 0x74, 0x35,
	0xe3, 0x63, 0xcf, 0x78, 0xd6, 0xde, 0x19, 0xa7, 0xce, 0x5b, 0x76, 0x3c, 0xe7, 0xcc, 0xef, 0xfc,
	0xce, 0x39, 0xf6, 0xf1, 0xcf, 0xc1, 0xc4, 0xe9, 0x6e, 0x77, 0xbc, 0xa7, 0xd6, 0x93, 0x3d, 0xa7,
	0xf3, 0xac, 0xd2, 0xee, 0x78, 0xbe, 0x47, 0x4e, 0xb0, 0x15, 0xd7, 0xae, 0x75, 0x2b, 0x75, 0xc7,
	0xf5, 0xed, 0x4a, 0xb0, 0xa5, 0x34, 0xdd, 0xf0, 0xbc, 0x86, 0xeb, 0x58, 0x76, 0xbb, 0x69, 0xd9,
	0xad, 0x96, 0xe7, 0xdb, 0x7e, 0xd3, 0x6b, 0x75, 0x03, 0xa3, 0xd2, 0xc2, 0xb6, 0xd7, 0xdd, 0xf5,
	0xba, 0x56, 0xcd, 0xee, 0x3a, 0x81, 0x37, 0x6b, 0x7f, 0xb9, 0xe6, 0xf8, 0xf6, 0xb2, 0xd5, 0xb6,
	0x1b, 0xcd, 0x16, 0xdf, 0x0c, 0x7b, 0x3f, 0x81, 0x43, 0xdb, 0x76, 0xc7, 0xde, 0x0d, 0x1d, 0x7c,
	0x0a, 0x8b, 0xb5, 0xbd, 0x67, 0x4e, 0xe7, 0x31, 0xfb, 0x13, 0x2e, 0x4c, 0xc7, 0x2e, 0xec, 0x7a,
	0x2d, 0x4f, 0xbe, 0x3a, 0x05, 0x57, 0xbb, 0x8e, 0xeb, 0xc6, 0xed, 0x4e, 0xc7, 0xaf, 0xa8, 0x86,
	0x1f, 0xc3, 0x65, 0x69, 0xe9, 0x24, 0x2c, 0xa9, 0x5b, 0x27, 0x61, 0xbd, 0xde, 0xec, 0xb6, 0xf7,
	0x7c, 0x07, 0x56, 0x3f, 0x93, 0x77, 0xc7, 0x2f, 0x9d, 0x80, 0x4b, 0x1d, 0xa7, 0xb6, 0xe7, 0xfb,
	0xb6, 0x9b, 0x64, 0xc1, 0xaf, 0x45, 0x97, 0x42, 0x4a, 0x6a, 0xb6, 0xeb, 0x7a, 0xbe, 0x02, 0xb1,
	0xed, 0xb9, 0xae, 0x02, 0x65, 0xdf, 0xe9, 0xd4, 0x9b, 0xdb, 0xea, 0xc6, 0x7d, 0x2f, 0x82, 0x50,
	0x96, 0xf3, 0x11, 0x66, 0x62, 0xdb, 0x6b, 0x86, 0x39, 0x98, 0x6c, 0x78, 0x0d, 0x8f, 0xff, 0x69,
	0xb1, 0xbf, 0x82, 0x55, 0x3a, 0x89, 0xc9, 0xb7, 0x59, 0xee, 0xb6, 0x78, 0x66, 0xaa, 0xce, 0x93,
	0x3d, 0xa7, 0xeb, 0xd3, 0x2a, 0xfe, 0x24, 0xb6, 0xda, 0x6d, 0x7b, 0xad, 0xae, 0x43, 0xbe, 0x84,
	0x47, 0x83, 0x0c, 0x4e, 0xa1, 0x19, 0x74, 0xb1, 0xb8, 0x72, 0xba, 0x92, 0x58, 0x38, 0x95, 0xc0,
	0x6c, 0x63, 0xe4, 0xcd, 0x7f, 0xce, 0x0c, 0x55, 0xc1, 0x84, 0x7e, 0x13, 0x4f, 0x71, 0x9f, 0x9b,
	0x8e, 0xbf, 0xc1, 0x12, 0x7b, 0xa7, 0xe3, 0x3d, 0x85, 0xf3, 0xc8, 0x49, 0x3c, 0xca, 0x0c, 0xef,
	0xd5, 0xb9, 0xe3, 0x89, 0x2a, 0xfc, 0x22, 0x53, 0x78, 0x8c, 0x17, 0xc1, 0xbd, 0xfa, 0xd4, 0x30,
	0xbf, 0x10, 0xfe, 0xa4, 0x36, 0xfe, 0x2c, 0xc1, 0x1b, 0xe0, 0xbc, 0x8b, 0x27, 0x6a, 0xe1, 0x22,
	0x40, 0x9d, 0x49, 0x81, 0x1a, 0x19, 0x03, 0x5a, 0x61, 0x48, 0x6b, 0x00, 0x78, 0xdd, 0x75, 0xfb,
	0x00, 0x7f, 0x0d, 0x63, 0x51, 0xe4, 0x70, 0xc4, 0x85, 0x4a, 0x90, 0x81, 0x0a, 0xcb, 0x40, 0x25,
	0xe8, 0x2f, 0xc8, 0x43, 0x65, 0xcb, 0x6e, 0x38, 0x60, 0x5b, 0x95, 0x2c, 0xe9, 0x5f, 0x11, 0xc4,
	0x11, 0x3f, 0x24, 0x39, 0x8e, 0xc2, 0xa1, 0xe2, 0x20, 0x9b, 0x31, 0xac, 0xc3, 0x1c, 0xeb, 0x9c,
	0x16, 0x6b, 0x00, 0x21, 0x06, 0xf6, 0xab, 0x78, 0x3a, 0xc6, 0xf9, 0x7d, 0xaf, 0xe5, 0xc9, 0xa4,
	0xcc, 0xe0, 0x62, 0x74, 0x6a, 0x94, 0x4a, 0x79, 0x89, 0x3e, 0xc1, 0xa7, 0x53, 0x3c, 0x40, 0xc4,
	0x5b, 0xf8, 0x58, 0x4d, 0xbe, 0x00, 0xd4, 0xce, 0x0e, 0x8a, 0x3a, 0xdc, 0x0b, 0x91, 0xc7, 0x1d,
	0xd0, 0x1d, 0x00, 0x1d, 0x12, 0xac, 0x82, 0xce, 0x2b, 0x93, 0xff, 0x44, 0x10, 0x5b, 0xff, 0x41,
	0xe9, 0xb1, 0x15, 0x3e, 0x28, 0xb6, 0xfc, 0x32, 0xfb, 0x2d, 0xd1, 0x4d, 0x0f, 0xf8, 0xcd, 0xd3,
	0xa4, 0x39, 0x4b, 0x78, 0x3c, 0xb8, 0xd3, 0x46, 0xdd, 0x19, 0xfd, 0xa6, 0x0e, 0x2e, 0x25, 0x39,
	0x04, 0x26, 0x36, 0x31, 0xee, 0x46, 0xab, 0xc0, 0xf9, 0xd9, 0x14, 0x1a, 0x84, 0x39, 0x70, 0x20,
	0x99, 0xd2, 0x6d, 0xd1, 0x3d, 0xfd, 0xb8, 0xf3, 0xca, 0xec, 0x4b, 0x04, 0xc1, 0x28, 0xa7, 0xa4,
	0x04, 0x53, 0x38, 0x64, 0x30, 0xf9, 0x65, 0xf3, 0x8e, 0xe8, 0xb2, 0xe0, 0x40, 0xb5, 0xe6, 0x29,
	0xfe, 0x48, 0x9c, 0x1b, 0xe5, 0x35, 0xb6, 0x46, 0xf7, 0x70, 0x39, 0xcd, 0x09, 0x04, 0xfe, 0x00,
	0x1f, 0xef, 0xc6, 0xae, 0x00, 0xc7, 0xe7, 0x07, 0x06, 0xaf, 0x54, 0xb4, 0xe2, 0x82, 0x36, 0x44,
	0x17, 0x25, 0x63, 0xcf, 0x2b, 0xab, 0xaf, 0x11, 0x04, 0x98, 0x70, 0xd2, 0x80, 0x00, 0x0b, 0x1f,
	0x18, 0x60, 0x7e, 0x59, 0xbe, 0x0f, 0xcf, 0xe8, 0x4d, 0xc7, 0x97, 0xf9, 0x99, 0xc2, 0x63, 0x5e,
	0xa7, 0xce, 0x9b, 0x32, 0x48, 0x6b, 0xf8, 0x93, 0x4c, 0xe3, 0x09, 0xb7, 0xd9, 0xf5, 0x9b, 0xad,
	0x46, 0xd4, 0xb0, 0x62, 0x81, 0xde, 0xc7, 0x93, 0x71, 0x77, 0x40, 0xc2, 0x15, 0x3c, 0xb2, 0x2d,
	0x72, 0x7b, 0x2a, 0x25, 0x74, 0x29, 0x60, 0xbe, 0x9d, 0x3e, 0x02, 0x74, 0xeb, 0xae, 0x7b, 0x14,
	0xd9, 0xfb, 0x05, 0x02, 0xb8, 0x91, 0xff, 0x3e, 0xb8, 0x85, 0x0c, 0x70, 0xf3, 0xcb, 0xca, 0x32,
	0xfe, 0x34, 0xa4, 0x51, 0xad, 0xdc, 0x94, 0xfb, 0x28, 0x7d, 0x24, 0x06, 0xa3, 0xbe, 0x12, 0x5c,
	0xc7, 0xe3, 0xbb, 0xf1, 0xee, 0x3a, 0x93, 0x12, 0x92, 0x52, 0x76, 0x91, 0x19, 0xb5, 0x01, 0xd1,
	0xba, 0xeb, 0x1e, 0x55, 0x2f, 0xfd, 0x19, 0x89, 0x51, 0x49, 0x13, 0x42, 0xe1, 0x10, 0x21, 0xe4,
	0x97, 0x9d, 0x2a, 0x3e, 0x19, 0x52, 0x7d, 0x37, 0x98, 0xdf, 0x75, 0x0f, 0xb9, 0x19, 0x5c, 0x6c,
	0xbb, 0x76, 0xb3, 0xe5, 0x37, 0x77, 0x76, 0xa2, 0xb6, 0x91, 0x97, 0xe8, 0x77, 0x45, 0xc6, 0x23,
	0x9f, 0x10, 0xfa, 0x6d, 0x3c, 0x06, 0xaf, 0x09, 0x40, 0x6e, 0x39, 0x25, 0x72, 0x30, 0x84, 0xc0,
	0x43, 0x23, 0xfa, 0x7d, 0x80, 0xbb, 0xee, 0xba, 0x0a, 0xdc, 0xbc, 0x32, 0xf7, 0x07, 0x24, 0xaa,
	0x63, 0x20, 0xfa, 0x42, 0x66, 0xf4, 0xf9, 0x65, 0xed, 0xa6, 0x18, 0x26, 0x58, 0x89, 0x28, 0x54,
	0x4c, 0xe3, 0x09, 0x38, 0x31, 0x4a, 0x9e, 0x58, 0xa0, 0x4d, 0x7c, 0x2a, 0xd1, 0x16, 0x62, 0xfc,
	0x3a, 0x2e, 0xee, 0x8a, 0x65, 0x20, 0x92, 0x0e, 0xa8, 0xcf, 0x78, 0xac, 0xb2, 0x31, 0xad, 0x8b,
	0x31, 0x21, 0x01, 0x66, 0x5e, 0x19, 0x7b, 0x85, 0x20, 0x22, 0xf5, 0x98, 0xb4, 0x88, 0x0a, 0x87,
	0x8e, 0x28, 0xbf, 0x0c, 0x4a, 0x3d, 0x52, 0x85, 0x37, 0x64, 0xa3, 0xf4, 0xb1, 0xf6, 0xab, 0x3b,
	0x3b, 0x4e, 0xab, 0x6e, 0xb7, 0x7c, 0xd1, 0x7e, 0xd2, 0x92, 0x7c, 0xf7, 0x14, 0xae, 0xc5, 0xad,
	0x27, 0x7c, 0x21, 0xd7, 0xdc, 0x3d, 0x43, 0xd3, 0xf0, 0xd6, 0x13, 0x9a, 0xc9, 0x77, 0x4f, 0x15,
	0xf9, 0x51, 0xdc, 0x3d, 0x35, 0x21, 0x14, 0x0e, 0x11, 0x42, 0x7e, 0x59, 0xbc, 0x15, 0xef, 0xc3,
	0x6a, 0xa0, 0x67, 0x84, 0x74, 0x94, 0x31, 0x0e, 0x8f, 0x8c, 0x32, 0x29, 0xad, 0xa8, 0x9d, 0x18,
	0x59, 0xc7, 0xeb, 0x16, 0x96, 0x0d, 0x3a, 0x11, 0x76, 0xca, 0x75, 0x0b, 0x4b, 0x6a, 0x27, 0x2a,
	0x40, 0x8f, 0xaa, 0x13, 0xb5, 0x11, 0x15, 0x0e, 0x1d, 0x51, 0x9e, 0x6f, 0x7a, 0x27, 0xa2, 0x37,
	0x70, 0xae, 0x3c, 0x99, 0xf5, 0xe1, 0x14, 0x1e, 0xdb, 0xf7, 0x7c, 0x59, 0x88, 0x81, 0x9f, 0xf4,
	0x3b, 0xe2, 0x91, 0x1a, 0x3a, 0x14, 0x6a, 0x51, 0x20, 0x6e, 0x69, 0xd4, 0xa2, 0xc0, 0x2c, 0x54,
	0x8b, 0x02, 0x13, 0xfa, 0x18, 0x70, 0xb2, 0xb7, 0xe9, 0x18, 0xce, 0xbc, 0xb2, 0xf7, 0x5b, 0x24,
	0x1e, 0xae, 0x03, 0x80, 0x17, 0x32, 0x02, 0xcf, 0x2f, 0x53, 0x4b, 0x62, 0xbe, 0x7f, 0xe8, 0xc5,
	0x06, 0x15, 0x46, 0xbd, 0x18, 0x54, 0x82, 0x5f, 0xf2, 0xfc, 0x1e, 0x6c, 0x17, 0x03, 0x31, 0xdb,
	0xa1, 0x99, 0xdf, 0x99, 0x49, 0x38, 0x10, 0xb3, 0xed, 0xf2, 0xfc, 0x2e, 0x9f, 0x7e, 0x14, 0xf3,
	0x7b, 0x0a, 0xdc, 0x42, 0x06, 0xb8, 0xf9, 0xb1, 0xfe, 0x0d, 0xc1, 0xfa, 0x96, 0xe7, 0xba, 0xba,
	0xf1, 0x30, 0xd6, 0x35, 0xc3, 0xea, 0xf0, 0x21, 0xe5, 0x24, 0x70, 0x26, 0x82, 0x6c, 0x7b, 0xae,
	0xab, 0xc9, 0x09, 0x33, 0x09, 0x83, 0x64, 0xdb, 0xe5, 0x9c, 0xc8, 0xd8, 0x8e, 0x22, 0x27, 0x29,
	0x70, 0x0b, 0x19, 0xe0, 0xe6, 0x97, 0x93, 0xab, 0xe2, 0x16, 0xf3, 0x30, 0x50, 0xc1, 0xa5, 0x9b,
	0x16, 0xe8, 0xe2, 0xe2, 0xa6, 0x15, 0x2d, 0xc8, 0x53, 0x47, 0x64, 0x27, 0x66, 0x5b, 0xd8, 0xa7,
	0x99, 0xcc, 0xc1, 0x30, 0x9c, 0x6d, 0xc1, 0x48, 0x9e, 0xcc, 0x15, 0x48, 0x47, 0x31, 0x99, 0x0f,
	0x44, 0x5f, 0xc8, 0x8c, 0x3e, 0xb7, 0xcc, 0xac, 0xfc, 0x7f, 0x16, 0x7f, 0x81, 0x83, 0x24, 0x3f,
	0x46, 0x78, 0x34, 0x90, 0xfd, 0xc9, 0x7c, 0x0a, 0x98, 0xfe, 0xef, 0x0c, 0xa5, 0x05, 0x93, 0xad,
	0xc1, 0xb9, 0xf4, 0xc2, 0x8f, 0xfe, 0xf5, 0xbf, 0x9f, 0x0d, 0xcf, 0x90, 0x32, 0xff, 0x80, 0xb3,
	0xc4, 0x8c, 0x2c, 0x6e, 0x64, 0xc5, 0x3e, 0x2e, 0x91, 0xbf, 0x21, 0x3c, 0x11, 0xa9, 0xe1, 0xc4,
	0x1a, 0x74, 0x42, 0xc2, 0xa7, 0x88, 0xd2, 0x65, 0x73, 0x03, 0x00, 0xf6, 0x65, 0x0e, 0xec, 0x1a,
	0xb9, 0x92, 0x06, 0x4c, 0x7c, 0xe0, 0xb2, 0x0e, 0x82, 0xfb, 0x46, 0xcf, 0x3a, 0x80, 0x0f, 0x19,
	0x3d, 0xf2, 0x02, 0xe1, 0x8f, 0x22, 0xa7, 0xeb, 0xae, 0x3b, 0x18, 0x72, 0xc2, 0xc7, 0x88, 0xc1,
	0x90, 0x93, 0x3e, 0x2c, 0xd0, 0x05, 0x0e, 0x79, 0x96, 0x50, 0x3d, 0x64, 0xf2, 0x0f, 0x84, 0x8f,
	0xc5, 0xb4, 0x68, 0xb2, 0x6a, 0x42, 0x91, 0xa2, 0x35, 0x94, 0xd6, 0xb2, 0x19, 0x65, 0xe3, 0x36,
	0xfa, 0x7e, 0x07, 0xbc, 0x06, 0x1a, 0x66, 0x8f, 0xbc, 0x44, 0xf8, 0x8b, 0x31, 0xc7, 0x8c, 0xdf,
	0x55, 0x13, 0xba, 0x32, 0xc1, 0x4f, 0x93, 0xfc, 0xa9, 0xc5, 0xe1, 0xcf, 0x93, 0x39, 0x43, 0xf8,
	0xe4, 0x15, 0xc2, 0x58, 0x88, 0xc4, 0x44, 0x57, 0x8c, 0x7d, 0xa2, 0x77, 0x69, 0x39, 0x83, 0x05,
	0x80, 0xfc, 0x0a, 0x07, 0x79, 0x83, 0x5c, 0x4b, 0x03, 0x29, 0x7d, 0x69, 0x95, 0x0a, 0x38, 0xd4,
	0xfa, 0x7b, 0xe4, 0xf7, 0x08, 0x1f, 0x13, 0x7e, 0x19, 0xc5, 0xba, 0x8a, 0xcc, 0x88, 0x3b, 0x51,
	0x78, 0xa7, 0x97, 0x38, 0xee, 0xf3, 0xe4, 0x9c, 0x01, 0x6e, 0xf2, 0x1a, 0xe1, 0xe3, 0x71, 0x7d,
	0x96, 0xac, 0x19, 0x51, 0xa5, 0x16, 0xc2, 0x95, 0x8c, 0x56, 0x19, 0x49, 0x96, 0x2a, 0x59, 0x96,
	0xe3, 0x7b, 0xac, 0x32, 0x3e, 0x8e, 0xfb, 0x66, 0x44, 0xaf, 0x19, 0xd1, 0x96, 0x29, 0x86, 0x54,
	0x3d, 0x9c, 0x5e, 0xe6, 0x31, 0x2c, 0x90, 0x8b, 0xa6, 0x31, 0x90, 0xdf, 0x20, 0x3c, 0xc2, 0xb9,
	0x5e, 0xd0, 0xb0, 0x26, 0xa3, 0xbb, 0x64, 0xb4, 0x17, 0x30, 0xdd, 0xe4, 0x98, 0xd6, 0xc8, 0x4a,
	0x1a, 0xa6, 0x80, 0x4b, 0xd0, 0xc0, 0x7b, 0xd6, 0x41, 0xa4, 0x78, 0xf7, 0xc8, 0x4f, 0x10, 0x1e,
	0x0b, 0x89, 0x5c, 0xd0, 0x50, 0x62, 0x0c, 0x50, 0x11, 0xa4, 0xe9, 0x2c, 0x07, 0x58, 0x26, 0xd3,
	0x83, 0x00, 0x92, 0xdf, 0x21, 0x3c, 0x1e, 0x15, 0x66, 0x45, 0x43, 0x80, 0x9a, 0x4e, 0xcb, 0x78,
	0x3f, 0x60, 0x5a, 0xe1, 0x98, 0x16, 0xc9, 0x42, 0x1a, 0x26, 0xa9, 0x0a, 0xa1, 0xdf, 0xc9, 0xaf,
	0x10, 0x2e, 0xca, 0x95, 0x57, 0xd1, 0x90, 0x90, 0x09, 0x64, 0x82, 0x6e, 0x4c, 0xe7, 0x39, 0xc8,
	0x73, 0xe4, 0xac, 0x16, 0x24, 0xf9, 0x0b, 0xc2, 0x63, 0xa1, 0x66, 0xb5, 0xa4, 0x21, 0x23, 0x2e,
	0xcb, 0x95, 0x2a, 0xa6, 0xdb, 0x01, 0xd5, 0x6d, 0x8e, 0xea, 0x3a, 0xb9, 0x9a, 0x86, 0x0a, 0xa6,
	0x7f, 0xe9, 0x46, 0x29, 0x89, 0xc5, 0x3d, 0xf2, 0x73, 0x84, 0x31, 0xf8, 0x64, 0x2c, 0x2e, 0x69,
	0x58, 0xc9, 0x82, 0xb6, 0x5f, 0xc2, 0xa5, 0x73, 0x1c, 0xed, 0x59, 0x72, 0x46, 0x83, 0x96, 0x3d,
	0x28, 0x8b, 0x92, 0x18, 0x48, 0x96, 0x0d, 0x4a, 0x4a, 0xc1, 0xb6, 0x92, 0xc5, 0x04, 0xf0, 0x5d,
	0xe7, 0xf8, 0x56, 0xc8, 0xe5, 0x81, 0x39, 0x8e, 0x28, 0x8d, 0xde, 0xac, 0x7a, 0xe4, 0x4f, 0x08,
	0x1f, 0x97, 0x3c, 0x32, 0x2e, 0x97, 0x0d, 0x2a, 0x2c, 0x0b, 0xe6, 0x64, 0x81, 0x95, 0x2e, 0x72,
	0xcc, 0x17, 0xc8, 0xac, 0x09, 0x66, 0xf2, 0x77, 0x84, 0xc7, 0x43, 0x65, 0x4e, 0xdb, 0xd8, 0x8a,
	0xc2, 0xa8, 0x6d, 0x6c, 0x55, 0x2d, 0xa4, 0x1b, 0x1c, 0xdb, 0x2d, 0x72, 0x33, 0x0d, 0x5b, 0xa8,
	0xc7, 0xc9, 0x5c, 0x5a, 0x07, 0x92, 0x9e, 0xda, 0x23, 0xbf, 0x44, 0xb8, 0x18, 0x3a, 0x36, 0x69,
	0xf4, 0x4c, 0xa0, 0x13, 0x24, 0x4e, 0x7a, 0x91, 0x83, 0xa6, 0x64, 0x46, 0x07, 0x9a, 0x91, 0x59,
	0x94, 0x84, 0x32, 0xa3, 0x2a, 0x8d, 0x8b, 0x7f, 0x46, 0x55, 0xaa, 0x08, 0x79, 0xf4, 0x06, 0x07,
	0xb8, 0x4a, 0x96, 0x07, 0x66, 0x1c, 0xfe, 0xbd, 0xcb, 0x3a, 0x10, 0x9a, 0xa7, 0x28, 0x53, 0x70,
	0x69, 0x5a, 0xa6, 0x59, 0x40, 0x27, 0xab, 0x8f, 0x86, 0x65, 0x0a, 0xa0, 0xc9, 0x1f, 0x11, 0x1e,
	0x0d, 0xe4, 0x2c, 0xb2, 0xa8, 0x1b, 0xd4, 0x65, 0x39, 0xae, 0xb4, 0x64, 0xb8, 0x1b, 0x50, 0xdd,
	0xe2, 0xa8, 0xae, 0x92, 0xb5, 0xd4, 0x81, 0x98, 0xef, 0x8f, 0x97, 0x27, 0x48, 0x8d, 0x3d, 0xf2,
	0x9c, 0xbd, 0xda, 0xf1, 0x0d, 0x8c, 0xc8, 0x45, 0xdd, 0x48, 0x6e, 0x0e, 0xb4, 0x4f, 0x03, 0xd4,
	0xbf, 0x6d, 0x82, 0xdc, 0xf7, 0x53, 0x84, 0x47, 0x1e, 0x7a, 0xbe, 0xa3, 0x9d, 0x70, 0x24, 0x15,
	0x4d, 0x3b, 0xe1, 0xc8, 0x8a, 0x18, 0x5d, 0xe2, 0x48, 0xe6, 0xc8, 0xf9, 0x34, 0x24, 0x8c, 0x9e,
	0x80, 0xa4, 0x70, 0xa8, 0x61, 0xf6, 0x26, 0x43, 0x8d, 0x31, 0x26, 0x45, 0xa5, 0xd3, 0x0f, 0x35,
	0x5c, 0x94, 0xfb, 0x35, 0xc2, 0x23, 0x5b, 0x9e, 0x0e, 0x47, 0x5c, 0x69, 0xd3, 0x72, 0x23, 0x2b,
	0x53, 0xfa, 0xce, 0x6c, 0x7b, 0xae, 0x2b, 0x3d, 0x8a, 0xa5, 0x07, 0x08, 0xe3, 0x89, 0xf9, 0x32,
	0xe1, 0xc9, 0x18, 0x9f, 0xa2, 0x9c, 0xe9, 0x79, 0xe2, 0x42, 0xd9, 0x0b, 0x96, 0x32, 0x90, 0x66,
	0x74, 0xfd, 0x14, 0x57, 0x9b, 0xb4, 0xe3, 0x8b, 0xa2, 0x1c, 0xd1, 0x55, 0x0e, 0x68, 0x89, 0x5c,
	0x4a, 0x4d, 0x5c, 0x60, 0x60, 0x1d, 0x44, 0x32, 0x5a, 0x30, 0xb3, 0x80, 0x23, 0x93, 0x99, 0x25,
	0x0b, 0xc4, 0x7e, 0x71, 0x4b, 0x3f, 0xb3, 0x00, 0xb2, 0x8d, 0x3b, 0x6f, 0xde, 0x95, 0xd1, 0xdb,
	0x77, 0x65, 0xf4, 0xdf, 0x77, 0x65, 0xf4, 0xfc, 0x7d, 0x79, 0xe8, 0xed, 0xfb, 0xf2, 0xd0, 0xbf,
	0xdf, 0x97, 0x87, 0xbe, 0x37, 0xdf, 0x68, 0xfa, 0x3f, 0xd8, 0xab, 0x55, 0xb6, 0xbd, 0xdd, 0x3e,
	0x27, 0x3f, 0x0c, 0xdd, 0xf8, 0xcf, 0xda, 0x4e, 0xb7, 0x36, 0xca, 0xff, 0x0d, 0x76, 0xf5, 0xf3,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xd6, 0xf1, 0x90, 0x17, 0x2d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a BuyerCrow by index.
	BuyerCrow(ctx context.Context, in *QueryGetBuyerCrowRequest, opts ...grpc.CallOption) (*QueryGetBuyerCrowResponse, error)
	// Queries a list of BuyerCrow items.
	BuyerCrowAll(ctx context.Context, in *QueryAllBuyerCrowRequest, opts ...grpc.CallOption) (*QueryAllBuyerCrowResponse, error)
	// Queries a BuyerMonoCrow by index.
	BuyerMonoCrow(ctx context.Context, in *QueryGetBuyerMonoCrowRequest, opts ...grpc.CallOption) (*QueryGetBuyerMonoCrowResponse, error)
	// Queries a list of BuyerMonoCrow items.
	BuyerMonoCrowAll(ctx context.Context, in *QueryAllBuyerMonoCrowRequest, opts ...grpc.CallOption) (*QueryAllBuyerMonoCrowResponse, error)
	// Queries a SellerCrow by index.
	SellerCrow(ctx context.Context, in *QueryGetSellerCrowRequest, opts ...grpc.CallOption) (*QueryGetSellerCrowResponse, error)
	// Queries a list of SellerCrow items.
	SellerCrowAll(ctx context.Context, in *QueryAllSellerCrowRequest, opts ...grpc.CallOption) (*QueryAllSellerCrowResponse, error)
	// Queries a SellerMonoCrow by index.
	SellerMonoCrow(ctx context.Context, in *QueryGetSellerMonoCrowRequest, opts ...grpc.CallOption) (*QueryGetSellerMonoCrowResponse, error)
	// Queries a list of SellerMonoCrow items.
	SellerMonoCrowAll(ctx context.Context, in *QueryAllSellerMonoCrowRequest, opts ...grpc.CallOption) (*QueryAllSellerMonoCrowResponse, error)
	// Queries a Crow by index.
	Crow(ctx context.Context, in *QueryGetCrowRequest, opts ...grpc.CallOption) (*QueryGetCrowResponse, error)
	// Queries a list of Crow items.
	CrowAll(ctx context.Context, in *QueryAllCrowRequest, opts ...grpc.CallOption) (*QueryAllCrowResponse, error)
	// Queries a MonoCrow by index.
	MonoCrow(ctx context.Context, in *QueryGetMonoCrowRequest, opts ...grpc.CallOption) (*QueryGetMonoCrowResponse, error)
	// Queries a list of MonoCrow items.
	MonoCrowAll(ctx context.Context, in *QueryAllMonoCrowRequest, opts ...grpc.CallOption) (*QueryAllMonoCrowResponse, error)
	// Queries a Dispute by index.
	Dispute(ctx context.Context, in *QueryGetDisputeRequest, opts ...grpc.CallOption) (*QueryGetDisputeResponse, error)
	// Queries a list of Dispute items.
	DisputeAll(ctx context.Context, in *QueryAllDisputeRequest, opts ...grpc.CallOption) (*QueryAllDisputeResponse, error)
	// Queries a MonoDispute by index.
	MonoDispute(ctx context.Context, in *QueryGetMonoDisputeRequest, opts ...grpc.CallOption) (*QueryGetMonoDisputeResponse, error)
	// Queries a list of MonoDispute items.
	MonoDisputeAll(ctx context.Context, in *QueryAllMonoDisputeRequest, opts ...grpc.CallOption) (*QueryAllMonoDisputeResponse, error)
	// Queries a Rebuttal by index.
	Rebuttal(ctx context.Context, in *QueryGetRebuttalRequest, opts ...grpc.CallOption) (*QueryGetRebuttalResponse, error)
	// Queries a list of Rebuttal items.
	RebuttalAll(ctx context.Context, in *QueryAllRebuttalRequest, opts ...grpc.CallOption) (*QueryAllRebuttalResponse, error)
	// Queries a MonoRebutal by index.
	MonoRebutal(ctx context.Context, in *QueryGetMonoRebutalRequest, opts ...grpc.CallOption) (*QueryGetMonoRebutalResponse, error)
	// Queries a list of MonoRebutal items.
	MonoRebutalAll(ctx context.Context, in *QueryAllMonoRebutalRequest, opts ...grpc.CallOption) (*QueryAllMonoRebutalResponse, error)
	// Queries a Ballot by index.
	Ballot(ctx context.Context, in *QueryGetBallotRequest, opts ...grpc.CallOption) (*QueryGetBallotResponse, error)
	// Queries a list of Ballot items.
	BallotAll(ctx context.Context, in *QueryAllBallotRequest, opts ...grpc.CallOption) (*QueryAllBallotResponse, error)
	// Queries a Vote by index.
	Vote(ctx context.Context, in *QueryGetVoteRequest, opts ...grpc.CallOption) (*QueryGetVoteResponse, error)
	// Queries a list of Vote items.
	VoteAll(ctx context.Context, in *QueryAllVoteRequest, opts ...grpc.CallOption) (*QueryAllVoteResponse, error)
	// Queries a Poll by index.
	Poll(ctx context.Context, in *QueryGetPollRequest, opts ...grpc.CallOption) (*QueryGetPollResponse, error)
	// Queries a list of Poll items.
	PollAll(ctx context.Context, in *QueryAllPollRequest, opts ...grpc.CallOption) (*QueryAllPollResponse, error)
	// Queries a Verdict by index.
	Verdict(ctx context.Context, in *QueryGetVerdictRequest, opts ...grpc.CallOption) (*QueryGetVerdictResponse, error)
	// Queries a list of Verdict items.
	VerdictAll(ctx context.Context, in *QueryAllVerdictRequest, opts ...grpc.CallOption) (*QueryAllVerdictResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyerCrow(ctx context.Context, in *QueryGetBuyerCrowRequest, opts ...grpc.CallOption) (*QueryGetBuyerCrowResponse, error) {
	out := new(QueryGetBuyerCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/BuyerCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyerCrowAll(ctx context.Context, in *QueryAllBuyerCrowRequest, opts ...grpc.CallOption) (*QueryAllBuyerCrowResponse, error) {
	out := new(QueryAllBuyerCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/BuyerCrowAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyerMonoCrow(ctx context.Context, in *QueryGetBuyerMonoCrowRequest, opts ...grpc.CallOption) (*QueryGetBuyerMonoCrowResponse, error) {
	out := new(QueryGetBuyerMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/BuyerMonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyerMonoCrowAll(ctx context.Context, in *QueryAllBuyerMonoCrowRequest, opts ...grpc.CallOption) (*QueryAllBuyerMonoCrowResponse, error) {
	out := new(QueryAllBuyerMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/BuyerMonoCrowAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SellerCrow(ctx context.Context, in *QueryGetSellerCrowRequest, opts ...grpc.CallOption) (*QueryGetSellerCrowResponse, error) {
	out := new(QueryGetSellerCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/SellerCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SellerCrowAll(ctx context.Context, in *QueryAllSellerCrowRequest, opts ...grpc.CallOption) (*QueryAllSellerCrowResponse, error) {
	out := new(QueryAllSellerCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/SellerCrowAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SellerMonoCrow(ctx context.Context, in *QueryGetSellerMonoCrowRequest, opts ...grpc.CallOption) (*QueryGetSellerMonoCrowResponse, error) {
	out := new(QueryGetSellerMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/SellerMonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SellerMonoCrowAll(ctx context.Context, in *QueryAllSellerMonoCrowRequest, opts ...grpc.CallOption) (*QueryAllSellerMonoCrowResponse, error) {
	out := new(QueryAllSellerMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/SellerMonoCrowAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Crow(ctx context.Context, in *QueryGetCrowRequest, opts ...grpc.CallOption) (*QueryGetCrowResponse, error) {
	out := new(QueryGetCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/Crow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrowAll(ctx context.Context, in *QueryAllCrowRequest, opts ...grpc.CallOption) (*QueryAllCrowResponse, error) {
	out := new(QueryAllCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/CrowAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MonoCrow(ctx context.Context, in *QueryGetMonoCrowRequest, opts ...grpc.CallOption) (*QueryGetMonoCrowResponse, error) {
	out := new(QueryGetMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/MonoCrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MonoCrowAll(ctx context.Context, in *QueryAllMonoCrowRequest, opts ...grpc.CallOption) (*QueryAllMonoCrowResponse, error) {
	out := new(QueryAllMonoCrowResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/MonoCrowAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Dispute(ctx context.Context, in *QueryGetDisputeRequest, opts ...grpc.CallOption) (*QueryGetDisputeResponse, error) {
	out := new(QueryGetDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/Dispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DisputeAll(ctx context.Context, in *QueryAllDisputeRequest, opts ...grpc.CallOption) (*QueryAllDisputeResponse, error) {
	out := new(QueryAllDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/DisputeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MonoDispute(ctx context.Context, in *QueryGetMonoDisputeRequest, opts ...grpc.CallOption) (*QueryGetMonoDisputeResponse, error) {
	out := new(QueryGetMonoDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/MonoDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MonoDisputeAll(ctx context.Context, in *QueryAllMonoDisputeRequest, opts ...grpc.CallOption) (*QueryAllMonoDisputeResponse, error) {
	out := new(QueryAllMonoDisputeResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/MonoDisputeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Rebuttal(ctx context.Context, in *QueryGetRebuttalRequest, opts ...grpc.CallOption) (*QueryGetRebuttalResponse, error) {
	out := new(QueryGetRebuttalResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/Rebuttal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RebuttalAll(ctx context.Context, in *QueryAllRebuttalRequest, opts ...grpc.CallOption) (*QueryAllRebuttalResponse, error) {
	out := new(QueryAllRebuttalResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/RebuttalAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MonoRebutal(ctx context.Context, in *QueryGetMonoRebutalRequest, opts ...grpc.CallOption) (*QueryGetMonoRebutalResponse, error) {
	out := new(QueryGetMonoRebutalResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/MonoRebutal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MonoRebutalAll(ctx context.Context, in *QueryAllMonoRebutalRequest, opts ...grpc.CallOption) (*QueryAllMonoRebutalResponse, error) {
	out := new(QueryAllMonoRebutalResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/MonoRebutalAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ballot(ctx context.Context, in *QueryGetBallotRequest, opts ...grpc.CallOption) (*QueryGetBallotResponse, error) {
	out := new(QueryGetBallotResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/Ballot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BallotAll(ctx context.Context, in *QueryAllBallotRequest, opts ...grpc.CallOption) (*QueryAllBallotResponse, error) {
	out := new(QueryAllBallotResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/BallotAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vote(ctx context.Context, in *QueryGetVoteRequest, opts ...grpc.CallOption) (*QueryGetVoteResponse, error) {
	out := new(QueryGetVoteResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteAll(ctx context.Context, in *QueryAllVoteRequest, opts ...grpc.CallOption) (*QueryAllVoteResponse, error) {
	out := new(QueryAllVoteResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/VoteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Poll(ctx context.Context, in *QueryGetPollRequest, opts ...grpc.CallOption) (*QueryGetPollResponse, error) {
	out := new(QueryGetPollResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PollAll(ctx context.Context, in *QueryAllPollRequest, opts ...grpc.CallOption) (*QueryAllPollResponse, error) {
	out := new(QueryAllPollResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/PollAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Verdict(ctx context.Context, in *QueryGetVerdictRequest, opts ...grpc.CallOption) (*QueryGetVerdictResponse, error) {
	out := new(QueryGetVerdictResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/Verdict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerdictAll(ctx context.Context, in *QueryAllVerdictRequest, opts ...grpc.CallOption) (*QueryAllVerdictResponse, error) {
	out := new(QueryAllVerdictResponse)
	err := c.cc.Invoke(ctx, "/crowlabs.delta.escrow.Query/VerdictAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a BuyerCrow by index.
	BuyerCrow(context.Context, *QueryGetBuyerCrowRequest) (*QueryGetBuyerCrowResponse, error)
	// Queries a list of BuyerCrow items.
	BuyerCrowAll(context.Context, *QueryAllBuyerCrowRequest) (*QueryAllBuyerCrowResponse, error)
	// Queries a BuyerMonoCrow by index.
	BuyerMonoCrow(context.Context, *QueryGetBuyerMonoCrowRequest) (*QueryGetBuyerMonoCrowResponse, error)
	// Queries a list of BuyerMonoCrow items.
	BuyerMonoCrowAll(context.Context, *QueryAllBuyerMonoCrowRequest) (*QueryAllBuyerMonoCrowResponse, error)
	// Queries a SellerCrow by index.
	SellerCrow(context.Context, *QueryGetSellerCrowRequest) (*QueryGetSellerCrowResponse, error)
	// Queries a list of SellerCrow items.
	SellerCrowAll(context.Context, *QueryAllSellerCrowRequest) (*QueryAllSellerCrowResponse, error)
	// Queries a SellerMonoCrow by index.
	SellerMonoCrow(context.Context, *QueryGetSellerMonoCrowRequest) (*QueryGetSellerMonoCrowResponse, error)
	// Queries a list of SellerMonoCrow items.
	SellerMonoCrowAll(context.Context, *QueryAllSellerMonoCrowRequest) (*QueryAllSellerMonoCrowResponse, error)
	// Queries a Crow by index.
	Crow(context.Context, *QueryGetCrowRequest) (*QueryGetCrowResponse, error)
	// Queries a list of Crow items.
	CrowAll(context.Context, *QueryAllCrowRequest) (*QueryAllCrowResponse, error)
	// Queries a MonoCrow by index.
	MonoCrow(context.Context, *QueryGetMonoCrowRequest) (*QueryGetMonoCrowResponse, error)
	// Queries a list of MonoCrow items.
	MonoCrowAll(context.Context, *QueryAllMonoCrowRequest) (*QueryAllMonoCrowResponse, error)
	// Queries a Dispute by index.
	Dispute(context.Context, *QueryGetDisputeRequest) (*QueryGetDisputeResponse, error)
	// Queries a list of Dispute items.
	DisputeAll(context.Context, *QueryAllDisputeRequest) (*QueryAllDisputeResponse, error)
	// Queries a MonoDispute by index.
	MonoDispute(context.Context, *QueryGetMonoDisputeRequest) (*QueryGetMonoDisputeResponse, error)
	// Queries a list of MonoDispute items.
	MonoDisputeAll(context.Context, *QueryAllMonoDisputeRequest) (*QueryAllMonoDisputeResponse, error)
	// Queries a Rebuttal by index.
	Rebuttal(context.Context, *QueryGetRebuttalRequest) (*QueryGetRebuttalResponse, error)
	// Queries a list of Rebuttal items.
	RebuttalAll(context.Context, *QueryAllRebuttalRequest) (*QueryAllRebuttalResponse, error)
	// Queries a MonoRebutal by index.
	MonoRebutal(context.Context, *QueryGetMonoRebutalRequest) (*QueryGetMonoRebutalResponse, error)
	// Queries a list of MonoRebutal items.
	MonoRebutalAll(context.Context, *QueryAllMonoRebutalRequest) (*QueryAllMonoRebutalResponse, error)
	// Queries a Ballot by index.
	Ballot(context.Context, *QueryGetBallotRequest) (*QueryGetBallotResponse, error)
	// Queries a list of Ballot items.
	BallotAll(context.Context, *QueryAllBallotRequest) (*QueryAllBallotResponse, error)
	// Queries a Vote by index.
	Vote(context.Context, *QueryGetVoteRequest) (*QueryGetVoteResponse, error)
	// Queries a list of Vote items.
	VoteAll(context.Context, *QueryAllVoteRequest) (*QueryAllVoteResponse, error)
	// Queries a Poll by index.
	Poll(context.Context, *QueryGetPollRequest) (*QueryGetPollResponse, error)
	// Queries a list of Poll items.
	PollAll(context.Context, *QueryAllPollRequest) (*QueryAllPollResponse, error)
	// Queries a Verdict by index.
	Verdict(context.Context, *QueryGetVerdictRequest) (*QueryGetVerdictResponse, error)
	// Queries a list of Verdict items.
	VerdictAll(context.Context, *QueryAllVerdictRequest) (*QueryAllVerdictResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) BuyerCrow(ctx context.Context, req *QueryGetBuyerCrowRequest) (*QueryGetBuyerCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyerCrow not implemented")
}
func (*UnimplementedQueryServer) BuyerCrowAll(ctx context.Context, req *QueryAllBuyerCrowRequest) (*QueryAllBuyerCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyerCrowAll not implemented")
}
func (*UnimplementedQueryServer) BuyerMonoCrow(ctx context.Context, req *QueryGetBuyerMonoCrowRequest) (*QueryGetBuyerMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyerMonoCrow not implemented")
}
func (*UnimplementedQueryServer) BuyerMonoCrowAll(ctx context.Context, req *QueryAllBuyerMonoCrowRequest) (*QueryAllBuyerMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyerMonoCrowAll not implemented")
}
func (*UnimplementedQueryServer) SellerCrow(ctx context.Context, req *QueryGetSellerCrowRequest) (*QueryGetSellerCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerCrow not implemented")
}
func (*UnimplementedQueryServer) SellerCrowAll(ctx context.Context, req *QueryAllSellerCrowRequest) (*QueryAllSellerCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerCrowAll not implemented")
}
func (*UnimplementedQueryServer) SellerMonoCrow(ctx context.Context, req *QueryGetSellerMonoCrowRequest) (*QueryGetSellerMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerMonoCrow not implemented")
}
func (*UnimplementedQueryServer) SellerMonoCrowAll(ctx context.Context, req *QueryAllSellerMonoCrowRequest) (*QueryAllSellerMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerMonoCrowAll not implemented")
}
func (*UnimplementedQueryServer) Crow(ctx context.Context, req *QueryGetCrowRequest) (*QueryGetCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crow not implemented")
}
func (*UnimplementedQueryServer) CrowAll(ctx context.Context, req *QueryAllCrowRequest) (*QueryAllCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrowAll not implemented")
}
func (*UnimplementedQueryServer) MonoCrow(ctx context.Context, req *QueryGetMonoCrowRequest) (*QueryGetMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonoCrow not implemented")
}
func (*UnimplementedQueryServer) MonoCrowAll(ctx context.Context, req *QueryAllMonoCrowRequest) (*QueryAllMonoCrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonoCrowAll not implemented")
}
func (*UnimplementedQueryServer) Dispute(ctx context.Context, req *QueryGetDisputeRequest) (*QueryGetDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispute not implemented")
}
func (*UnimplementedQueryServer) DisputeAll(ctx context.Context, req *QueryAllDisputeRequest) (*QueryAllDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisputeAll not implemented")
}
func (*UnimplementedQueryServer) MonoDispute(ctx context.Context, req *QueryGetMonoDisputeRequest) (*QueryGetMonoDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonoDispute not implemented")
}
func (*UnimplementedQueryServer) MonoDisputeAll(ctx context.Context, req *QueryAllMonoDisputeRequest) (*QueryAllMonoDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonoDisputeAll not implemented")
}
func (*UnimplementedQueryServer) Rebuttal(ctx context.Context, req *QueryGetRebuttalRequest) (*QueryGetRebuttalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebuttal not implemented")
}
func (*UnimplementedQueryServer) RebuttalAll(ctx context.Context, req *QueryAllRebuttalRequest) (*QueryAllRebuttalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuttalAll not implemented")
}
func (*UnimplementedQueryServer) MonoRebutal(ctx context.Context, req *QueryGetMonoRebutalRequest) (*QueryGetMonoRebutalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonoRebutal not implemented")
}
func (*UnimplementedQueryServer) MonoRebutalAll(ctx context.Context, req *QueryAllMonoRebutalRequest) (*QueryAllMonoRebutalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonoRebutalAll not implemented")
}
func (*UnimplementedQueryServer) Ballot(ctx context.Context, req *QueryGetBallotRequest) (*QueryGetBallotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ballot not implemented")
}
func (*UnimplementedQueryServer) BallotAll(ctx context.Context, req *QueryAllBallotRequest) (*QueryAllBallotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BallotAll not implemented")
}
func (*UnimplementedQueryServer) Vote(ctx context.Context, req *QueryGetVoteRequest) (*QueryGetVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedQueryServer) VoteAll(ctx context.Context, req *QueryAllVoteRequest) (*QueryAllVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteAll not implemented")
}
func (*UnimplementedQueryServer) Poll(ctx context.Context, req *QueryGetPollRequest) (*QueryGetPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedQueryServer) PollAll(ctx context.Context, req *QueryAllPollRequest) (*QueryAllPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollAll not implemented")
}
func (*UnimplementedQueryServer) Verdict(ctx context.Context, req *QueryGetVerdictRequest) (*QueryGetVerdictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verdict not implemented")
}
func (*UnimplementedQueryServer) VerdictAll(ctx context.Context, req *QueryAllVerdictRequest) (*QueryAllVerdictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerdictAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyerCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBuyerCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyerCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/BuyerCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyerCrow(ctx, req.(*QueryGetBuyerCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyerCrowAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBuyerCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyerCrowAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/BuyerCrowAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyerCrowAll(ctx, req.(*QueryAllBuyerCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyerMonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBuyerMonoCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyerMonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/BuyerMonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyerMonoCrow(ctx, req.(*QueryGetBuyerMonoCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyerMonoCrowAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBuyerMonoCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyerMonoCrowAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/BuyerMonoCrowAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyerMonoCrowAll(ctx, req.(*QueryAllBuyerMonoCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SellerCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSellerCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SellerCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/SellerCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SellerCrow(ctx, req.(*QueryGetSellerCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SellerCrowAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSellerCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SellerCrowAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/SellerCrowAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SellerCrowAll(ctx, req.(*QueryAllSellerCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SellerMonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSellerMonoCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SellerMonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/SellerMonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SellerMonoCrow(ctx, req.(*QueryGetSellerMonoCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SellerMonoCrowAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSellerMonoCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SellerMonoCrowAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/SellerMonoCrowAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SellerMonoCrowAll(ctx, req.(*QueryAllSellerMonoCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Crow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Crow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/Crow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Crow(ctx, req.(*QueryGetCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrowAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrowAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/CrowAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrowAll(ctx, req.(*QueryAllCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MonoCrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMonoCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MonoCrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/MonoCrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MonoCrow(ctx, req.(*QueryGetMonoCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MonoCrowAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMonoCrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MonoCrowAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/MonoCrowAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MonoCrowAll(ctx, req.(*QueryAllMonoCrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Dispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDisputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Dispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/Dispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Dispute(ctx, req.(*QueryGetDisputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DisputeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDisputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DisputeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/DisputeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DisputeAll(ctx, req.(*QueryAllDisputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MonoDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMonoDisputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MonoDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/MonoDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MonoDispute(ctx, req.(*QueryGetMonoDisputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MonoDisputeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMonoDisputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MonoDisputeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/MonoDisputeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MonoDisputeAll(ctx, req.(*QueryAllMonoDisputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Rebuttal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRebuttalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rebuttal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/Rebuttal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rebuttal(ctx, req.(*QueryGetRebuttalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RebuttalAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRebuttalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RebuttalAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/RebuttalAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RebuttalAll(ctx, req.(*QueryAllRebuttalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MonoRebutal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMonoRebutalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MonoRebutal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/MonoRebutal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MonoRebutal(ctx, req.(*QueryGetMonoRebutalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MonoRebutalAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMonoRebutalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MonoRebutalAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/MonoRebutalAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MonoRebutalAll(ctx, req.(*QueryAllMonoRebutalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ballot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBallotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ballot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/Ballot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ballot(ctx, req.(*QueryGetBallotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BallotAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBallotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BallotAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/BallotAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BallotAll(ctx, req.(*QueryAllBallotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vote(ctx, req.(*QueryGetVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/VoteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteAll(ctx, req.(*QueryAllVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Poll(ctx, req.(*QueryGetPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PollAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PollAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/PollAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PollAll(ctx, req.(*QueryAllPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Verdict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVerdictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Verdict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/Verdict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Verdict(ctx, req.(*QueryGetVerdictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerdictAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVerdictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerdictAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crowlabs.delta.escrow.Query/VerdictAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerdictAll(ctx, req.(*QueryAllVerdictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crowlabs.delta.escrow.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "BuyerCrow",
			Handler:    _Query_BuyerCrow_Handler,
		},
		{
			MethodName: "BuyerCrowAll",
			Handler:    _Query_BuyerCrowAll_Handler,
		},
		{
			MethodName: "BuyerMonoCrow",
			Handler:    _Query_BuyerMonoCrow_Handler,
		},
		{
			MethodName: "BuyerMonoCrowAll",
			Handler:    _Query_BuyerMonoCrowAll_Handler,
		},
		{
			MethodName: "SellerCrow",
			Handler:    _Query_SellerCrow_Handler,
		},
		{
			MethodName: "SellerCrowAll",
			Handler:    _Query_SellerCrowAll_Handler,
		},
		{
			MethodName: "SellerMonoCrow",
			Handler:    _Query_SellerMonoCrow_Handler,
		},
		{
			MethodName: "SellerMonoCrowAll",
			Handler:    _Query_SellerMonoCrowAll_Handler,
		},
		{
			MethodName: "Crow",
			Handler:    _Query_Crow_Handler,
		},
		{
			MethodName: "CrowAll",
			Handler:    _Query_CrowAll_Handler,
		},
		{
			MethodName: "MonoCrow",
			Handler:    _Query_MonoCrow_Handler,
		},
		{
			MethodName: "MonoCrowAll",
			Handler:    _Query_MonoCrowAll_Handler,
		},
		{
			MethodName: "Dispute",
			Handler:    _Query_Dispute_Handler,
		},
		{
			MethodName: "DisputeAll",
			Handler:    _Query_DisputeAll_Handler,
		},
		{
			MethodName: "MonoDispute",
			Handler:    _Query_MonoDispute_Handler,
		},
		{
			MethodName: "MonoDisputeAll",
			Handler:    _Query_MonoDisputeAll_Handler,
		},
		{
			MethodName: "Rebuttal",
			Handler:    _Query_Rebuttal_Handler,
		},
		{
			MethodName: "RebuttalAll",
			Handler:    _Query_RebuttalAll_Handler,
		},
		{
			MethodName: "MonoRebutal",
			Handler:    _Query_MonoRebutal_Handler,
		},
		{
			MethodName: "MonoRebutalAll",
			Handler:    _Query_MonoRebutalAll_Handler,
		},
		{
			MethodName: "Ballot",
			Handler:    _Query_Ballot_Handler,
		},
		{
			MethodName: "BallotAll",
			Handler:    _Query_BallotAll_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Query_Vote_Handler,
		},
		{
			MethodName: "VoteAll",
			Handler:    _Query_VoteAll_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Query_Poll_Handler,
		},
		{
			MethodName: "PollAll",
			Handler:    _Query_PollAll_Handler,
		},
		{
			MethodName: "Verdict",
			Handler:    _Query_Verdict_Handler,
		},
		{
			MethodName: "VerdictAll",
			Handler:    _Query_VerdictAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "escrow/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetBuyerCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBuyerCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBuyerCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyerId) > 0 {
		i -= len(m.BuyerId)
		copy(dAtA[i:], m.BuyerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BuyerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBuyerCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBuyerCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBuyerCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BuyerCrow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBuyerCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBuyerCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBuyerCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBuyerCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBuyerCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBuyerCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BuyerCrow) > 0 {
		for iNdEx := len(m.BuyerCrow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerCrow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBuyerMonoCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBuyerMonoCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBuyerMonoCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuyerCrowId) > 0 {
		i -= len(m.BuyerCrowId)
		copy(dAtA[i:], m.BuyerCrowId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BuyerCrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBuyerMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBuyerMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBuyerMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BuyerMonoCrow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBuyerMonoCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBuyerMonoCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBuyerMonoCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBuyerMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBuyerMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBuyerMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BuyerMonoCrow) > 0 {
		for iNdEx := len(m.BuyerMonoCrow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerMonoCrow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSellerCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSellerCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSellerCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerId) > 0 {
		i -= len(m.SellerId)
		copy(dAtA[i:], m.SellerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SellerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSellerCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSellerCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSellerCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SellerCrow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSellerCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSellerCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSellerCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSellerCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSellerCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSellerCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SellerCrow) > 0 {
		for iNdEx := len(m.SellerCrow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellerCrow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSellerMonoCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSellerMonoCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSellerMonoCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerCrowId) > 0 {
		i -= len(m.SellerCrowId)
		copy(dAtA[i:], m.SellerCrowId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SellerCrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSellerMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSellerMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSellerMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SellerMonoCrow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSellerMonoCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSellerMonoCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSellerMonoCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSellerMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSellerMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSellerMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SellerMonoCrow) > 0 {
		for iNdEx := len(m.SellerMonoCrow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellerMonoCrow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ListingId) > 0 {
		i -= len(m.ListingId)
		copy(dAtA[i:], m.ListingId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ListingId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Crow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Crow) > 0 {
		for iNdEx := len(m.Crow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Crow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMonoCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMonoCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMonoCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MonoCrow.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMonoCrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMonoCrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMonoCrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMonoCrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMonoCrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMonoCrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MonoCrow) > 0 {
		for iNdEx := len(m.MonoCrow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MonoCrow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDisputeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDisputeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDisputeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlaintiffId) > 0 {
		i -= len(m.PlaintiffId)
		copy(dAtA[i:], m.PlaintiffId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlaintiffId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Dispute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDisputeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDisputeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDisputeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Dispute) > 0 {
		for iNdEx := len(m.Dispute) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dispute[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMonoDisputeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMonoDisputeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMonoDisputeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMonoDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMonoDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMonoDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MonoDispute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMonoDisputeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMonoDisputeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMonoDisputeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMonoDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMonoDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMonoDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MonoDispute) > 0 {
		for iNdEx := len(m.MonoDispute) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MonoDispute[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRebuttalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRebuttalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRebuttalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefendantId) > 0 {
		i -= len(m.DefendantId)
		copy(dAtA[i:], m.DefendantId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DefendantId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRebuttalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRebuttalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRebuttalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rebuttal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRebuttalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRebuttalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRebuttalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRebuttalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRebuttalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRebuttalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rebuttal) > 0 {
		for iNdEx := len(m.Rebuttal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rebuttal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMonoRebutalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMonoRebutalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMonoRebutalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RebuttalId) > 0 {
		i -= len(m.RebuttalId)
		copy(dAtA[i:], m.RebuttalId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RebuttalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMonoRebutalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMonoRebutalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMonoRebutalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MonoRebutal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMonoRebutalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMonoRebutalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMonoRebutalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMonoRebutalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMonoRebutalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMonoRebutalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MonoRebutal) > 0 {
		for iNdEx := len(m.MonoRebutal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MonoRebutal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBallotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBallotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBallotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterId) > 0 {
		i -= len(m.VoterId)
		copy(dAtA[i:], m.VoterId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VoterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBallotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBallotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBallotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Ballot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBallotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBallotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBallotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBallotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBallotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBallotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ballot) > 0 {
		for iNdEx := len(m.Ballot) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ballot[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteId) > 0 {
		i -= len(m.VoteId)
		copy(dAtA[i:], m.VoteId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VoteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vote) > 0 {
		for iNdEx := len(m.Vote) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vote[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPollRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPollRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPollRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrowId) > 0 {
		i -= len(m.CrowId)
		copy(dAtA[i:], m.CrowId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPollResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPollResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPollResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Poll.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPollRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPollRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPollRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPollResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPollResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPollResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Poll) > 0 {
		for iNdEx := len(m.Poll) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Poll[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVerdictRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVerdictRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVerdictRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerdictId) > 0 {
		i -= len(m.VerdictId)
		copy(dAtA[i:], m.VerdictId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerdictId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVerdictResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVerdictResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVerdictResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Verdict.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVerdictRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVerdictRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVerdictRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVerdictResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVerdictResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVerdictResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Verdict) > 0 {
		for iNdEx := len(m.Verdict) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Verdict[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetBuyerCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BuyerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBuyerCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BuyerCrow.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBuyerCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBuyerCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuyerCrow) > 0 {
		for _, e := range m.BuyerCrow {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBuyerMonoCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BuyerCrowId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBuyerMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BuyerMonoCrow.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBuyerMonoCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBuyerMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuyerMonoCrow) > 0 {
		for _, e := range m.BuyerMonoCrow {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSellerCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SellerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSellerCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SellerCrow.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSellerCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSellerCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SellerCrow) > 0 {
		for _, e := range m.SellerCrow {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSellerMonoCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SellerCrowId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSellerMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SellerMonoCrow.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSellerMonoCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSellerMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SellerMonoCrow) > 0 {
		for _, e := range m.SellerMonoCrow {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ListingId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Crow.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Crow) > 0 {
		for _, e := range m.Crow {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMonoCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MonoCrow.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMonoCrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMonoCrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MonoCrow) > 0 {
		for _, e := range m.MonoCrow {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDisputeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PlaintiffId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Dispute.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDisputeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dispute) > 0 {
		for _, e := range m.Dispute {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMonoDisputeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMonoDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MonoDispute.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMonoDisputeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMonoDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MonoDispute) > 0 {
		for _, e := range m.MonoDispute {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRebuttalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DefendantId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRebuttalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rebuttal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRebuttalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRebuttalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rebuttal) > 0 {
		for _, e := range m.Rebuttal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMonoRebutalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RebuttalId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMonoRebutalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MonoRebutal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMonoRebutalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMonoRebutalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MonoRebutal) > 0 {
		for _, e := range m.MonoRebutal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBallotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VoterId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBallotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Ballot.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBallotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBallotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ballot) > 0 {
		for _, e := range m.Ballot {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoteId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vote) > 0 {
		for _, e := range m.Vote {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPollRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CrowId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPollResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Poll.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPollRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPollResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Poll) > 0 {
		for _, e := range m.Poll {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVerdictRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerdictId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVerdictResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Verdict.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVerdictRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVerdictResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Verdict) > 0 {
		for _, e := range m.Verdict {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBuyerCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBuyerCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBuyerCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBuyerCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBuyerCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBuyerCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuyerCrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBuyerCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBuyerCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBuyerCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBuyerCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBuyerCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBuyerCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCrow = append(m.BuyerCrow, BuyerCrow{})
			if err := m.BuyerCrow[len(m.BuyerCrow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBuyerMonoCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBuyerMonoCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBuyerMonoCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBuyerMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBuyerMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBuyerMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerMonoCrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuyerMonoCrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBuyerMonoCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBuyerMonoCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBuyerMonoCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBuyerMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBuyerMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBuyerMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerMonoCrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerMonoCrow = append(m.BuyerMonoCrow, BuyerMonoCrow{})
			if err := m.BuyerMonoCrow[len(m.BuyerMonoCrow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSellerCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSellerCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSellerCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSellerCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSellerCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSellerCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellerCrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSellerCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSellerCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSellerCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSellerCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSellerCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSellerCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCrow = append(m.SellerCrow, SellerCrow{})
			if err := m.SellerCrow[len(m.SellerCrow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSellerMonoCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSellerMonoCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSellerMonoCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSellerMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSellerMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSellerMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerMonoCrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellerMonoCrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSellerMonoCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSellerMonoCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSellerMonoCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSellerMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSellerMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSellerMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerMonoCrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerMonoCrow = append(m.SellerMonoCrow, SellerMonoCrow{})
			if err := m.SellerMonoCrow[len(m.SellerMonoCrow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Crow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crow = append(m.Crow, Crow{})
			if err := m.Crow[len(m.Crow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMonoCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMonoCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMonoCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonoCrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MonoCrow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMonoCrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMonoCrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMonoCrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMonoCrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMonoCrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMonoCrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonoCrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonoCrow = append(m.MonoCrow, MonoCrow{})
			if err := m.MonoCrow[len(m.MonoCrow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDisputeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDisputeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDisputeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaintiffId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlaintiffId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dispute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dispute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDisputeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDisputeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDisputeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dispute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dispute = append(m.Dispute, Dispute{})
			if err := m.Dispute[len(m.Dispute)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMonoDisputeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMonoDisputeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMonoDisputeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMonoDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMonoDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMonoDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonoDispute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MonoDispute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMonoDisputeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMonoDisputeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMonoDisputeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMonoDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMonoDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMonoDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonoDispute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonoDispute = append(m.MonoDispute, MonoDispute{})
			if err := m.MonoDispute[len(m.MonoDispute)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRebuttalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRebuttalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRebuttalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefendantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefendantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRebuttalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRebuttalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRebuttalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rebuttal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rebuttal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRebuttalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRebuttalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRebuttalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRebuttalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRebuttalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRebuttalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rebuttal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rebuttal = append(m.Rebuttal, Rebuttal{})
			if err := m.Rebuttal[len(m.Rebuttal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMonoRebutalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMonoRebutalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMonoRebutalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebuttalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RebuttalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMonoRebutalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMonoRebutalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMonoRebutalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonoRebutal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MonoRebutal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMonoRebutalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMonoRebutalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMonoRebutalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMonoRebutalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMonoRebutalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMonoRebutalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonoRebutal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonoRebutal = append(m.MonoRebutal, MonoRebutal{})
			if err := m.MonoRebutal[len(m.MonoRebutal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBallotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBallotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBallotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBallotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBallotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBallotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ballot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBallotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBallotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBallotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBallotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBallotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBallotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ballot = append(m.Ballot, Ballot{})
			if err := m.Ballot[len(m.Ballot)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vote = append(m.Vote, Vote{})
			if err := m.Vote[len(m.Vote)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPollRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPollRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPollRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPollResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPollResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPollResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Poll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPollRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPollRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPollRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPollResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPollResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPollResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poll = append(m.Poll, Poll{})
			if err := m.Poll[len(m.Poll)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVerdictRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVerdictRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVerdictRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerdictId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerdictId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVerdictResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVerdictResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVerdictResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verdict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Verdict.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVerdictRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVerdictRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVerdictRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVerdictResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVerdictResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVerdictResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verdict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verdict = append(m.Verdict, Verdict{})
			if err := m.Verdict[len(m.Verdict)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
