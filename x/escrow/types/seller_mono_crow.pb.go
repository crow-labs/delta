// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/seller_mono_crow.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SellerMonoCrow struct {
	SellerCrowId string       `protobuf:"bytes,1,opt,name=sellerCrowId,proto3" json:"sellerCrowId,omitempty"`
	Collateral   []types.Coin `protobuf:"bytes,2,rep,name=collateral,proto3" json:"collateral"`
	Status       string       `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Seller       string       `protobuf:"bytes,4,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (m *SellerMonoCrow) Reset()         { *m = SellerMonoCrow{} }
func (m *SellerMonoCrow) String() string { return proto.CompactTextString(m) }
func (*SellerMonoCrow) ProtoMessage()    {}
func (*SellerMonoCrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_0161186376843228, []int{0}
}
func (m *SellerMonoCrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SellerMonoCrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SellerMonoCrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SellerMonoCrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellerMonoCrow.Merge(m, src)
}
func (m *SellerMonoCrow) XXX_Size() int {
	return m.Size()
}
func (m *SellerMonoCrow) XXX_DiscardUnknown() {
	xxx_messageInfo_SellerMonoCrow.DiscardUnknown(m)
}

var xxx_messageInfo_SellerMonoCrow proto.InternalMessageInfo

func (m *SellerMonoCrow) GetSellerCrowId() string {
	if m != nil {
		return m.SellerCrowId
	}
	return ""
}

func (m *SellerMonoCrow) GetCollateral() []types.Coin {
	if m != nil {
		return m.Collateral
	}
	return nil
}

func (m *SellerMonoCrow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SellerMonoCrow) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func init() {
	proto.RegisterType((*SellerMonoCrow)(nil), "crowlabs.delta.escrow.SellerMonoCrow")
}

func init() { proto.RegisterFile("escrow/seller_mono_crow.proto", fileDescriptor_0161186376843228) }

var fileDescriptor_0161186376843228 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x18, 0x85, 0x63, 0x5a, 0x55, 0xc2, 0x20, 0x86, 0x08, 0x50, 0xa8, 0x84, 0xa9, 0x3a, 0x95, 0x01,
	0x5b, 0x85, 0x03, 0x20, 0x35, 0x13, 0x03, 0x4b, 0xd9, 0x58, 0x2a, 0xdb, 0xb5, 0x42, 0x24, 0x27,
	0x7f, 0x65, 0xbb, 0x14, 0x6e, 0xc1, 0x25, 0xb8, 0x4b, 0xc7, 0x8c, 0x4c, 0x08, 0x25, 0x17, 0x41,
	0xb6, 0x33, 0xc0, 0xf6, 0xde, 0xf3, 0xb3, 0x3f, 0xf9, 0xe1, 0x4b, 0x65, 0xa5, 0x81, 0x1d, 0xb3,
	0x4a, 0x6b, 0x65, 0x56, 0x15, 0xd4, 0xb0, 0xf2, 0x01, 0xdd, 0x18, 0x70, 0x90, 0x9e, 0x79, 0xad,
	0xb9, 0xb0, 0x74, 0xad, 0xb4, 0xe3, 0x34, 0xb6, 0xc7, 0xa7, 0x05, 0x14, 0x10, 0x1a, 0xcc, 0xab,
	0x58, 0x1e, 0x13, 0x09, 0xb6, 0x02, 0xcb, 0x04, 0xb7, 0x8a, 0xbd, 0xce, 0x85, 0x72, 0x7c, 0xce,
	0x24, 0x94, 0x75, 0x3c, 0x9f, 0x7e, 0x22, 0x7c, 0xf2, 0x14, 0x38, 0x8f, 0x50, 0x43, 0x6e, 0x60,
	0x97, 0x4e, 0xf1, 0x71, 0x24, 0x7b, 0xf7, 0xb0, 0xce, 0xd0, 0x04, 0xcd, 0x0e, 0x97, 0xff, 0xb2,
	0xf4, 0x1e, 0x63, 0x09, 0x5a, 0x73, 0xa7, 0x0c, 0xd7, 0xd9, 0xc1, 0x64, 0x30, 0x3b, 0xba, 0xbd,
	0xa0, 0x91, 0x45, 0x3d, 0x8b, 0xf6, 0x2c, 0x9a, 0x43, 0x59, 0x2f, 0x86, 0xfb, 0xef, 0xab, 0x64,
	0xf9, 0xe7, 0x4a, 0x7a, 0x8e, 0x47, 0xd6, 0x71, 0xb7, 0xb5, 0xd9, 0x20, 0x3c, 0xdf, 0xbb, 0x90,
	0x07, 0x50, 0x36, 0xec, 0xf3, 0xe0, 0x16, 0xf9, 0xbe, 0x25, 0xa8, 0x69, 0x09, 0xfa, 0x69, 0x09,
	0xfa, 0xe8, 0x48, 0xd2, 0x74, 0x24, 0xf9, 0xea, 0x48, 0xf2, 0x7c, 0x5d, 0x94, 0xee, 0x65, 0x2b,
	0xa8, 0x84, 0x8a, 0xf9, 0x21, 0x6e, 0xfc, 0x34, 0x2c, 0x4c, 0xc3, 0xde, 0x58, 0x3f, 0xa5, 0x7b,
	0xdf, 0x28, 0x2b, 0x46, 0xe1, 0xcf, 0x77, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x0d, 0x00,
	0x25, 0x61, 0x01, 0x00, 0x00,
}

func (m *SellerMonoCrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SellerMonoCrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SellerMonoCrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintSellerMonoCrow(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintSellerMonoCrow(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Collateral) > 0 {
		for iNdEx := len(m.Collateral) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collateral[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSellerMonoCrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SellerCrowId) > 0 {
		i -= len(m.SellerCrowId)
		copy(dAtA[i:], m.SellerCrowId)
		i = encodeVarintSellerMonoCrow(dAtA, i, uint64(len(m.SellerCrowId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSellerMonoCrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovSellerMonoCrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SellerMonoCrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SellerCrowId)
	if l > 0 {
		n += 1 + l + sovSellerMonoCrow(uint64(l))
	}
	if len(m.Collateral) > 0 {
		for _, e := range m.Collateral {
			l = e.Size()
			n += 1 + l + sovSellerMonoCrow(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSellerMonoCrow(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovSellerMonoCrow(uint64(l))
	}
	return n
}

func sovSellerMonoCrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSellerMonoCrow(x uint64) (n int) {
	return sovSellerMonoCrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SellerMonoCrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSellerMonoCrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellerMonoCrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellerMonoCrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCrowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerCrowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSellerMonoCrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSellerMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = append(m.Collateral, types.Coin{})
			if err := m.Collateral[len(m.Collateral)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSellerMonoCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSellerMonoCrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSellerMonoCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSellerMonoCrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSellerMonoCrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSellerMonoCrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSellerMonoCrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSellerMonoCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSellerMonoCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSellerMonoCrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSellerMonoCrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSellerMonoCrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSellerMonoCrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSellerMonoCrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSellerMonoCrow = fmt.Errorf("proto: unexpected end of group")
)
