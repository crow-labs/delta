// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: escrow/mono_dispute.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MonoDispute struct {
	DisputeId string `protobuf:"bytes,1,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Desc      string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Evidence  string `protobuf:"bytes,4,opt,name=evidence,proto3" json:"evidence,omitempty"`
	Plaintiff string `protobuf:"bytes,5,opt,name=plaintiff,proto3" json:"plaintiff,omitempty"`
}

func (m *MonoDispute) Reset()         { *m = MonoDispute{} }
func (m *MonoDispute) String() string { return proto.CompactTextString(m) }
func (*MonoDispute) ProtoMessage()    {}
func (*MonoDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_470447f371e4c4ca, []int{0}
}
func (m *MonoDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonoDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonoDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonoDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonoDispute.Merge(m, src)
}
func (m *MonoDispute) XXX_Size() int {
	return m.Size()
}
func (m *MonoDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MonoDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MonoDispute proto.InternalMessageInfo

func (m *MonoDispute) GetDisputeId() string {
	if m != nil {
		return m.DisputeId
	}
	return ""
}

func (m *MonoDispute) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MonoDispute) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MonoDispute) GetEvidence() string {
	if m != nil {
		return m.Evidence
	}
	return ""
}

func (m *MonoDispute) GetPlaintiff() string {
	if m != nil {
		return m.Plaintiff
	}
	return ""
}

func init() {
	proto.RegisterType((*MonoDispute)(nil), "crowlabs.delta.escrow.MonoDispute")
}

func init() { proto.RegisterFile("escrow/mono_dispute.proto", fileDescriptor_470447f371e4c4ca) }

var fileDescriptor_470447f371e4c4ca = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0x2d, 0x4e, 0x2e,
	0xca, 0x2f, 0xd7, 0xcf, 0xcd, 0xcf, 0xcb, 0x8f, 0x4f, 0xc9, 0x2c, 0x2e, 0x28, 0x2d, 0x49, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x05, 0x49, 0xe4, 0x24, 0x26, 0x15, 0xeb, 0xa5, 0xa4,
	0xe6, 0x94, 0x24, 0xea, 0x41, 0x54, 0x2a, 0xf5, 0x33, 0x72, 0x71, 0xfb, 0xe6, 0xe7, 0xe5, 0xbb,
	0x40, 0x14, 0x0b, 0xc9, 0x70, 0x71, 0x42, 0xf5, 0x79, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0x21, 0x04, 0x84, 0x44, 0xb8, 0x58, 0x4b, 0x32, 0x4b, 0x72, 0x52, 0x25, 0x98, 0xc0, 0x32,
	0x10, 0x8e, 0x90, 0x10, 0x17, 0x4b, 0x4a, 0x6a, 0x71, 0xb2, 0x04, 0x33, 0x58, 0x10, 0xcc, 0x16,
	0x92, 0xe2, 0xe2, 0x48, 0x2d, 0xcb, 0x4c, 0x49, 0xcd, 0x4b, 0x4e, 0x95, 0x60, 0x01, 0x8b, 0xc3,
	0xf9, 0x20, 0x3b, 0x0a, 0x72, 0x12, 0x33, 0xf3, 0x4a, 0x32, 0xd3, 0xd2, 0x24, 0x58, 0x21, 0x76,
	0xc0, 0x05, 0x9c, 0x9c, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x33,
	0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xe4, 0x78, 0x5d, 0x90, 0x77,
	0xf4, 0xc1, 0xde, 0xd1, 0xaf, 0xd0, 0x87, 0x7a, 0xbd, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d,
	0xec, 0x69, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xce, 0xbb, 0x86, 0x11, 0x01, 0x00,
	0x00,
}

func (m *MonoDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonoDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonoDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Plaintiff) > 0 {
		i -= len(m.Plaintiff)
		copy(dAtA[i:], m.Plaintiff)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.Plaintiff)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Evidence) > 0 {
		i -= len(m.Evidence)
		copy(dAtA[i:], m.Evidence)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.Evidence)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DisputeId) > 0 {
		i -= len(m.DisputeId)
		copy(dAtA[i:], m.DisputeId)
		i = encodeVarintMonoDispute(dAtA, i, uint64(len(m.DisputeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonoDispute(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonoDispute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MonoDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisputeId)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.Evidence)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	l = len(m.Plaintiff)
	if l > 0 {
		n += 1 + l + sovMonoDispute(uint64(l))
	}
	return n
}

func sovMonoDispute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonoDispute(x uint64) (n int) {
	return sovMonoDispute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MonoDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonoDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonoDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisputeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plaintiff", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonoDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plaintiff = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonoDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMonoDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonoDispute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonoDispute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonoDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonoDispute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonoDispute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonoDispute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonoDispute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonoDispute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonoDispute = fmt.Errorf("proto: unexpected end of group")
)
